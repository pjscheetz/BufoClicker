(()=>{"use strict";var e,n,t={43:(e,n,t)=>{t.d(n,{h:()=>c});var o=t(634),r=t(628),a=t(794),i=t(217);class s{constructor(){this.frameId=null,this.lastFrameTime=0,this.isRunning=!1,this.timeScale=1,this.targetFPS=60,this.minTickDelta=1e3/60,this.accumulatedTime=0,this.MAX_ACCUMULATED_TIME=1e3,this.timeSinceLastTick=0,this.tickEmitInterval=100}static getInstance(){return s.instance||(s.instance=new s),s.instance}start(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=performance.now(),this.accumulatedTime=0,this.frameId=requestAnimationFrame(this.gameLoop.bind(this)),r.Rm("Game loop started"))}stop(){this.isRunning&&(this.isRunning=!1,null!==this.frameId&&(cancelAnimationFrame(this.frameId),this.frameId=null),r.Rm("Game loop stopped"))}setTimeScale(e){this.timeScale=Math.max(.1,Math.min(5,e)),r.Rm(`Time scale set to ${this.timeScale}`)}getTimeScale(){return this.timeScale}setTargetFPS(e){this.targetFPS=Math.max(10,Math.min(144,e)),this.minTickDelta=1e3/this.targetFPS,r.Rm(`Target FPS set to ${this.targetFPS}`)}gameLoop(e){if(!this.isRunning)return;const n=e-this.lastFrameTime;for(this.lastFrameTime=e,this.accumulatedTime+=n*this.timeScale,this.accumulatedTime>this.MAX_ACCUMULATED_TIME&&(r.R8(`Accumulated time capped from ${this.accumulatedTime}ms to ${this.MAX_ACCUMULATED_TIME}ms`),this.accumulatedTime=this.MAX_ACCUMULATED_TIME);this.accumulatedTime>=this.minTickDelta;)this.processTick(this.minTickDelta/1e3),this.accumulatedTime-=this.minTickDelta;this.timeSinceLastTick+=n,this.timeSinceLastTick>=this.tickEmitInterval&&((0,a.J)().emit(i.lM,{deltaTime:this.timeSinceLastTick,timeScale:this.timeScale}),this.timeSinceLastTick=0),this.frameId=requestAnimationFrame(this.gameLoop.bind(this))}processTick(e){try{(0,o.a)().processTick(e)}catch(e){r.z3("Error processing game tick:",e)}}}function c(){return s.getInstance()}},56:(e,n,t)=>{t.d(n,{Jr:()=>i,TY:()=>s,f8:()=>a});var o=t(889),r=t(128);const a={resources:{bufos:0,totalBufos:0,baseClickPower:1,clickPower:1,clickMultiplier:1,productionMultiplier:1,clickCount:0},generators:o.mT,explorer:r.HZ,upgrades:{purchased:[],available:[]},achievements:{unlocked:[],progress:{},clickCount:0,customEvents:{}},gameSettings:{lastTick:Date.now(),lastSaved:Date.now(),autoSave:!0,version:"1.0.0"}};function i(e){let n=0;const t=[];return Object.values(e.generators).filter((e=>e.count>0&&e.totalProduction>0)).forEach((e=>{n+=e.totalProduction,t.push({id:e.id,name:e.name,production:e.totalProduction,percentage:0,count:e.count})})),n>0&&t.forEach((e=>{e.percentage=e.production/n*100})),{currentRate:n,perMinute:60*n,perHour:3600*n,generatorContributions:t}}function s(e){let n=0;return Object.values(e.generators).forEach((e=>{n+=e.totalProduction})),{bufos:e.resources.bufos,totalBufos:e.resources.totalBufos,clickPower:e.resources.clickPower,productionRate:n}}},72:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=o(e,r),l=0;l<a.length;l++){var A=t(a[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=c}}},109:(e,n,t)=>{t.d(n,{A:()=>x});var o=t(354),r=t.n(o),a=t(314),i=t.n(a),s=t(159),c=t(899),l=t(160),A=t(379),d=t(672),u=t(528),p=t(902),m=t(374),g=t(829),h=t(667),f=t(265),C=t(417),b=t.n(C),E=new URL(t(823),t.b),B=i()(r());B.i(s.A),B.i(c.A),B.i(l.A),B.i(A.A),B.i(d.A),B.i(u.A),B.i(p.A),B.i(m.A),B.i(g.A),B.i(h.A),B.i(f.A);var v=b()(E);B.push([e.id,`/* Defining variables */\n:root {\n    /* Color Variables */\n    --color-primary: #4CAF50;\n    --color-primary-light: #8BC34A;\n    --color-primary-dark: #2E7D32;\n    --color-accent: #FFC107;\n    --color-accent-light: #FFEB3B;\n    --color-accent-dark: #FF9800;\n    --color-success: #4CAF50;\n    --color-warning: #FF9800;\n    --color-error: #F44336;\n    --color-info: #2196F3;\n    \n    --color-text: #333;\n    --color-text-light: #777;\n    --color-text-inverse: #FFF;\n    --color-background: #F5F5F5;\n    --color-surface: #FFF;\n    --color-border: #DDD;\n    \n    /* Spacing Variables */\n    --spacing-xs: 4px;\n    --spacing-sm: 8px;\n    --spacing-md: 16px;\n    --spacing-lg: 24px;\n    --spacing-xl: 32px;\n    \n    /* Font Variables */\n    --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    --font-size-xs: 12px;\n    --font-size-sm: 14px;\n    --font-size-md: 16px;\n    --font-size-lg: 20px;\n    --font-size-xl: 24px;\n    \n    /* Border Variables */\n    --border-radius-sm: 4px;\n    --border-radius-md: 8px;\n    --border-radius-lg: 12px;\n    --border-width: 1px;\n    \n    /* Shadow Variables */\n    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.1);\n    --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.1);\n    \n    /* Animation Variables */\n    --transition-fast: 150ms;\n    --transition-normal: 300ms;\n    --transition-slow: 500ms;\n    \n    /* Z-index Variables */\n    --z-index-base: 1;\n    --z-index-content: 10;\n    --z-index-notification: 100;\n    --z-index-modal: 1000;\n  }\n  \n  /* Reset some default browser styles */\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  /* Import all style modules */\n  /* Global styles */\n  body {\n    background-image: url(${v});\n    font-family: var(--font-family);\n    font-size: var(--font-size-md);\n    color: var(--color-text);\n    line-height: 1.5;\n  }\n  \n  button {\n    cursor: pointer;\n    font-family: inherit;\n    border: none;\n    outline: none;\n  }\n  \n  a {\n    color: var(--color-primary);\n    text-decoration: none;\n  }\n  \n  a:hover {\n    text-decoration: underline;\n  }\n  \n  /* Utility classes */\n  .hidden {\n    display: none !important;\n  }\n  \n  .text-center {\n    text-align: center;\n  }\n  \n  .text-right {\n    text-align: right;\n  }\n  \n  .text-left {\n    text-align: left;\n  }\n  \n  .mt-1 { margin-top: var(--spacing-xs); }\n  .mt-2 { margin-top: var(--spacing-sm); }\n  .mt-3 { margin-top: var(--spacing-md); }\n  .mt-4 { margin-top: var(--spacing-lg); }\n  \n  .mb-1 { margin-bottom: var(--spacing-xs); }\n  .mb-2 { margin-bottom: var(--spacing-sm); }\n  .mb-3 { margin-bottom: var(--spacing-md); }\n  .mb-4 { margin-bottom: var(--spacing-lg); }\n\n\n/* Game menu styles */\n.game-menu {\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 8px;\n  background-color: #f0f9f0;\n  border-radius: 8px;\n  border: 1px solid #c8e6c9;\n}\n\n.menu-button {\n  flex: 1;\n  padding: 8px 12px;\n  background: linear-gradient(to bottom, var(--color-primary), var(--color-primary-dark));\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: center;\n}\n\n.menu-button:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n.menu-button:active {\n  transform: translateY(0);\n}\n`,"",{version:3,sources:["webpack://./styles/index.css"],names:[],mappings:"AAAA,uBAAuB;AACvB;IACI,oBAAoB;IACpB,wBAAwB;IACxB,8BAA8B;IAC9B,6BAA6B;IAC7B,uBAAuB;IACvB,6BAA6B;IAC7B,4BAA4B;IAC5B,wBAAwB;IACxB,wBAAwB;IACxB,sBAAsB;IACtB,qBAAqB;;IAErB,kBAAkB;IAClB,wBAAwB;IACxB,0BAA0B;IAC1B,2BAA2B;IAC3B,qBAAqB;IACrB,oBAAoB;;IAEpB,sBAAsB;IACtB,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;;IAElB,mBAAmB;IACnB,8DAA8D;IAC9D,oBAAoB;IACpB,oBAAoB;IACpB,oBAAoB;IACpB,oBAAoB;IACpB,oBAAoB;;IAEpB,qBAAqB;IACrB,uBAAuB;IACvB,uBAAuB;IACvB,wBAAwB;IACxB,mBAAmB;;IAEnB,qBAAqB;IACrB,yCAAyC;IACzC,yCAAyC;IACzC,0CAA0C;;IAE1C,wBAAwB;IACxB,wBAAwB;IACxB,0BAA0B;IAC1B,wBAAwB;;IAExB,sBAAsB;IACtB,iBAAiB;IACjB,qBAAqB;IACrB,2BAA2B;IAC3B,qBAAqB;EACvB;;EAEA,sCAAsC;EACtC;IACE,sBAAsB;IACtB,SAAS;IACT,UAAU;EACZ;;EAEA,6BAA6B;EAY7B,kBAAkB;EAClB;IACE,yDAA+D;IAC/D,+BAA+B;IAC/B,8BAA8B;IAC9B,wBAAwB;IACxB,gBAAgB;EAClB;;EAEA;IACE,eAAe;IACf,oBAAoB;IACpB,YAAY;IACZ,aAAa;EACf;;EAEA;IACE,2BAA2B;IAC3B,qBAAqB;EACvB;;EAEA;IACE,0BAA0B;EAC5B;;EAEA,oBAAoB;EACpB;IACE,wBAAwB;EAC1B;;EAEA;IACE,kBAAkB;EACpB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,gBAAgB;EAClB;;EAEA,QAAQ,6BAA6B,EAAE;EACvC,QAAQ,6BAA6B,EAAE;EACvC,QAAQ,6BAA6B,EAAE;EACvC,QAAQ,6BAA6B,EAAE;;EAEvC,QAAQ,gCAAgC,EAAE;EAC1C,QAAQ,gCAAgC,EAAE;EAC1C,QAAQ,gCAAgC,EAAE;EAC1C,QAAQ,gCAAgC,EAAE;;;AAG5C,qBAAqB;AACrB;EACE,aAAa;EACb,8BAA8B;EAC9B,QAAQ;EACR,mBAAmB;EACnB,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,OAAO;EACP,iBAAiB;EACjB,uFAAuF;EACvF,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,qCAAqC;EACrC,2BAA2B;EAC3B,wCAAwC;AAC1C;;AAEA;EACE,wBAAwB;AAC1B",sourcesContent:["/* Defining variables */\n:root {\n    /* Color Variables */\n    --color-primary: #4CAF50;\n    --color-primary-light: #8BC34A;\n    --color-primary-dark: #2E7D32;\n    --color-accent: #FFC107;\n    --color-accent-light: #FFEB3B;\n    --color-accent-dark: #FF9800;\n    --color-success: #4CAF50;\n    --color-warning: #FF9800;\n    --color-error: #F44336;\n    --color-info: #2196F3;\n    \n    --color-text: #333;\n    --color-text-light: #777;\n    --color-text-inverse: #FFF;\n    --color-background: #F5F5F5;\n    --color-surface: #FFF;\n    --color-border: #DDD;\n    \n    /* Spacing Variables */\n    --spacing-xs: 4px;\n    --spacing-sm: 8px;\n    --spacing-md: 16px;\n    --spacing-lg: 24px;\n    --spacing-xl: 32px;\n    \n    /* Font Variables */\n    --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    --font-size-xs: 12px;\n    --font-size-sm: 14px;\n    --font-size-md: 16px;\n    --font-size-lg: 20px;\n    --font-size-xl: 24px;\n    \n    /* Border Variables */\n    --border-radius-sm: 4px;\n    --border-radius-md: 8px;\n    --border-radius-lg: 12px;\n    --border-width: 1px;\n    \n    /* Shadow Variables */\n    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.1);\n    --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.1);\n    \n    /* Animation Variables */\n    --transition-fast: 150ms;\n    --transition-normal: 300ms;\n    --transition-slow: 500ms;\n    \n    /* Z-index Variables */\n    --z-index-base: 1;\n    --z-index-content: 10;\n    --z-index-notification: 100;\n    --z-index-modal: 1000;\n  }\n  \n  /* Reset some default browser styles */\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  /* Import all style modules */\n  @import './layout.css';\n  @import './panel.css';\n  @import './component.css';\n  @import './resourceDisplay.css';\n  @import './animations.css';\n  @import './tooltip.css';\n  @import './modal.css';\n  @import './upgrades.css';\n  @import './achievements.css';\n  @import './productionStats.css';\n  @import './statsModal.css';\n  /* Global styles */\n  body {\n    background-image: url('./../assets/images/background/pond.jpg');\n    font-family: var(--font-family);\n    font-size: var(--font-size-md);\n    color: var(--color-text);\n    line-height: 1.5;\n  }\n  \n  button {\n    cursor: pointer;\n    font-family: inherit;\n    border: none;\n    outline: none;\n  }\n  \n  a {\n    color: var(--color-primary);\n    text-decoration: none;\n  }\n  \n  a:hover {\n    text-decoration: underline;\n  }\n  \n  /* Utility classes */\n  .hidden {\n    display: none !important;\n  }\n  \n  .text-center {\n    text-align: center;\n  }\n  \n  .text-right {\n    text-align: right;\n  }\n  \n  .text-left {\n    text-align: left;\n  }\n  \n  .mt-1 { margin-top: var(--spacing-xs); }\n  .mt-2 { margin-top: var(--spacing-sm); }\n  .mt-3 { margin-top: var(--spacing-md); }\n  .mt-4 { margin-top: var(--spacing-lg); }\n  \n  .mb-1 { margin-bottom: var(--spacing-xs); }\n  .mb-2 { margin-bottom: var(--spacing-sm); }\n  .mb-3 { margin-bottom: var(--spacing-md); }\n  .mb-4 { margin-bottom: var(--spacing-lg); }\n\n\n/* Game menu styles */\n.game-menu {\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 8px;\n  background-color: #f0f9f0;\n  border-radius: 8px;\n  border: 1px solid #c8e6c9;\n}\n\n.menu-button {\n  flex: 1;\n  padding: 8px 12px;\n  background: linear-gradient(to bottom, var(--color-primary), var(--color-primary-dark));\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: center;\n}\n\n.menu-button:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n.menu-button:active {\n  transform: translateY(0);\n}\n"],sourceRoot:""}]);const x=B},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},128:(e,n,t)=>{var o;t.d(n,{HZ:()=>r,Lu:()=>o,SJ:()=>A,eg:()=>i,iC:()=>a,k9:()=>d,vx:()=>s,zu:()=>p}),function(e){e.Idle="idle",e.Exploring="exploring",e.Fighting="fighting",e.Resting="resting",e.Injured="injured"}(o||(o={}));const r={name:"Explorer Frog",level:1,experience:0,experienceToNextLevel:100,state:o.Idle,stateStartTime:Date.now(),health:100,maxHealth:100,attack:{value:10,level:1,growthRate:2,upgradeCost:50,multiplier:1},defense:{value:5,level:1,growthRate:1.5,upgradeCost:50,multiplier:1},speed:{value:8,level:1,growthRate:1.2,upgradeCost:50,multiplier:1},luck:{value:5,level:1,growthRate:1,upgradeCost:50,multiplier:1},equipment:{weapon:null,armor:null,accessory:null},explorationProgress:0,currentArea:"Pond",explorationsCompleted:0,lifetimeBufosFromExploring:0};function a(e){return e.attack.value*e.attack.multiplier*Math.max(.5,e.speed.value*e.speed.multiplier/20)}function i(e){const n=(5+2*e.level)*(1-Math.min(.8,e.defense.value*e.defense.multiplier/100));return n<=0?999:e.health/n}function s(e){const n=a(e),t=i(e),o=Math.sqrt(e.luck.value*e.luck.multiplier);return Math.floor(n*t/10+o)}function c(e){const n=100+20*(e.level-1)+10*e.defense.level,t=100*Math.pow(1.5,e.level-1);return Object.assign(Object.assign({},e),{maxHealth:n,health:Math.min(e.health,n),experienceToNextLevel:Math.ceil(t)})}function l(e){return e.experience>=e.experienceToNextLevel}function A(e,n,t){const o=e[n];if(!o)return{success:!1,cost:0,explorer:e};if(t<o.upgradeCost)return{success:!1,cost:o.upgradeCost,explorer:e};const r=o.level+1,a=o.value+o.growthRate,i=function(e,n=50){return Math.floor(n*Math.pow(1.15,e-1))}(r,50),s=Object.assign(Object.assign({},o),{level:r,value:a,upgradeCost:i}),l=c(Object.assign(Object.assign({},e),{[n]:s}));return{success:!0,cost:o.upgradeCost,explorer:l}}function d(e,n){return e.state!==o.Idle&&e.state!==o.Resting||e.health<.2*e.maxHealth?e:Object.assign(Object.assign({},e),{state:o.Exploring,stateStartTime:Date.now(),explorationProgress:0,currentArea:n})}function u(e,n){let t=.1*e.maxHealth;n.survived||(t=.4*e.maxHealth);const r=Math.max(1,e.health-t);let a=o.Resting;r<.2*e.maxHealth&&(a=o.Injured);const i=Object.assign(Object.assign({},e),{health:r,state:a,stateStartTime:Date.now(),experience:e.experience+n.experienceGained,explorationsCompleted:e.explorationsCompleted+1,lifetimeBufosFromExploring:e.lifetimeBufosFromExploring+n.bufosGained,explorationProgress:0});return l(i)?function(e){if(!l(e))return e;const n=e.level+1,t=e.experience-e.experienceToNextLevel;return c(Object.assign(Object.assign({},e),{level:n,experience:t}))}(i):i}function p(e,n){switch(e.state){case o.Exploring:{const t=n/60*10;let o=e.explorationProgress+t;if(o>=100){const n=function(e,n){const t={Pond:1,Creek:2,Swamp:3,River:4,Lake:5,Forest:6,Mountains:8,Dungeon:10}[e.currentArea]||1,o=function(e,n){const t=s(e),o=25*n;return t>=o?1:t/o}(e,t),r=n*(.5+.5*o),a=e.health/e.maxHealth*o,i=Math.random()<a,c=50*t*o*(r/60),l=1+e.luck.value*e.luck.multiplier/100,A=10*t*(r/60);return{survived:i,duration:r,bufosGained:i?Math.floor(c*l):Math.floor(.3*c),experienceGained:i?Math.floor(A):Math.floor(.5*A),itemsFound:[]}}(e,(Date.now()-e.stateStartTime)/1e3);return{explorer:u(e,n),result:n}}return{explorer:Object.assign(Object.assign({},e),{explorationProgress:o})}}case o.Fighting:return{explorer:e};case o.Resting:case o.Injured:{const t=function(e,n){if(e.state!==o.Resting&&e.state!==o.Injured)return e;const t=e.state===o.Injured?.05:.1,r=e.maxHealth*t*(n/60),a=Math.min(e.maxHealth,e.health+r);let i=e.state;return a>=e.maxHealth?i=o.Idle:a>=.2*e.maxHealth&&e.state===o.Injured&&(i=o.Resting),Object.assign(Object.assign({},e),{health:a,state:i,stateStartTime:i!==e.state?Date.now():e.stateStartTime})}(e,n);return{explorer:t}}default:return{explorer:e}}}},138:(e,n,t)=>{t.d(n,{R:()=>l});var o=t(628);function r(){try{const e="__storage_test__";localStorage.setItem(e,e);const n=localStorage.getItem(e)===e;return localStorage.removeItem(e),n}catch(e){return!1}}function a(e,n){if(!e)return console.error("Storage key is required"),!1;try{if(!r())return console.warn("localStorage is not available"),!1;const t=JSON.stringify(n);return localStorage.setItem(e,t),!0}catch(e){return console.error("Failed to save data to localStorage:",e),e instanceof DOMException&&("NS_ERROR_DOM_QUOTA_REACHED"===e.name||"QuotaExceededError"===e.name||22===e.code)&&console.warn("localStorage quota exceeded"),!1}}function i(e,n){if(!e)return console.error("Storage key is required"),n;try{if(!r())return console.warn("localStorage is not available"),n;const t=localStorage.getItem(e);return null===t?n:JSON.parse(t)}catch(t){return console.error(`Failed to load data from localStorage key "${e}":`,t),n}}const s="bufo_idle_save";class c{constructor(){}static getInstance(){return c.instance||(c.instance=new c),c.instance}saveGame(e,n,t,i){var c;try{if(!r())return o.R8("localStorage is not available, cannot save game"),!1;const l={state:e,generators:n,upgrades:t,explorer:i,timestamp:Date.now(),version:(null===(c=e.gameSettings)||void 0===c?void 0:c.version)||"1.0.0"},A=a(s,l);return A?o.Rm(`Game saved successfully at ${(new Date).toLocaleTimeString()}`):o.z3("Failed to save game to storage"),A}catch(e){return o.z3("Failed to save game:",e),!1}}loadGame(){try{if(!r())return o.R8("localStorage is not available, cannot load game"),null;const e=i(s,null);return e?e.state?(o.Rm(`Game loaded successfully (saved at ${new Date(e.timestamp).toLocaleString()})`),{state:e.state,upgrades:e.upgrades||[],explorer:e.explorer||{}}):(o.R8("Invalid save data format"),null):(o.Rm("No saved game found"),null)}catch(e){return o.z3("Error loading saved game:",e),null}}clearSave(){try{const e=function(e){try{return r()?(localStorage.removeItem(e),!0):(console.warn("localStorage is not available"),!1)}catch(n){return console.error(`Failed to clear localStorage key "${e}":`,n),!1}}(s);return e?o.Rm("Game save cleared"):o.z3("Failed to clear save from storage"),e}catch(e){return o.z3("Failed to clear save:",e),!1}}exportSave(){try{if(!r())return o.R8("localStorage is not available, cannot export save"),"";const e=i(s,null);return e?btoa(encodeURIComponent(JSON.stringify(e))):(o.R8("No save data to export"),"")}catch(e){return o.z3("Failed to export save:",e),""}}importSave(e){try{if(!e)return o.z3("No save string provided"),!1;if(!r())return o.R8("localStorage is not available, cannot import save"),!1;const n=decodeURIComponent(atob(e)),t=JSON.parse(n);if(!t||!t.state)return o.z3("Invalid save data format"),!1;const i=a(s,t);return i?o.Rm("Save data imported successfully"):o.z3("Failed to save imported data to storage"),i}catch(e){return o.z3("Failed to import save:",e),!1}}}function l(){return c.getInstance()}},159:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Main container styles */\n.game-container {\n  margin: 0 auto;\n  padding: 16px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Game content area */\n.game-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Three-column layout - FIXED AND ENFORCED */\n.three-column-layout {\n  display: flex !important; /* Use !important to override any inline styles */\n  flex-direction: row !important;\n  gap: 16px;\n  width: 100%;\n  flex: 1;\n  min-height: 600px;\n}\n\n/* Column styles */\n.column {\n  display: flex !important;\n  flex-direction: column !important;\n  gap: 16px;\n  background-color: rgba(228, 228, 228, 0.8);\n  border-radius: 12px;\n  padding: 16px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  border: 1px solid #e0e0e0;\n  overflow-y: auto;\n}\n\n.left-column {\n  flex: 1.25 !important;\n  min-width: 250px;\n}\n\n.center-column {\n  flex: 1.25 !important;\n  min-width: 300px;\n}\n\n.right-column {\n  flex: 1 !important;\n  min-width: 250px;\n}\n\n/* Ensure click area is visible and functioning */\n.frog-display {\n  position: relative;\n  text-align: center;\n  padding: 24px;\n  margin-bottom: 16px;\n  cursor: pointer !important;\n  border-radius: 12px;\n  background-color: #f0f9f0;\n  border: 1px solid #c8e6c9;\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);\n  transition: all 0.2s ease;\n  z-index: 1; /* Ensure it's clickable */\n}\n\n.frog-display:hover {\n  transform: scale(1.02);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);\n}\n\n.bufo-image {\n  max-width: 100%;\n  min-height: 250px;\n  max-height: 400px;\n  transition: transform 0.2s ease;\n}\n\n.owned-generator {\n  display: flex !important;\n  align-items: center;\n  padding: 16px;\n  margin-bottom: 8px;\n  background-color: white;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n/* Responsive adjustments - only apply for smaller screens */\n@media (max-width: 1024px) {\n  .three-column-layout {\n    flex-direction: column !important;\n  }\n  \n  .column {\n    width: 100%;\n    max-height: none;\n    margin-bottom: 16px;\n  }\n}\n\n/* Animation styles for click feedback */\n@keyframes ripple {\n  0% { \n    transform: scale(0);\n    opacity: 0.8;\n  }\n  100% { \n    transform: scale(2.5);\n    opacity: 0;\n  }\n}\n\n.click-indicator {\n  animation: ripple 0.6s ease-out forwards;\n  background-color: rgba(76, 175, 80, 0.2);\n  border-radius: 50%;\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n}\n","",{version:3,sources:["webpack://./styles/layout.css"],names:[],mappings:"AAAA,0BAA0B;AAC1B;EACE,cAAc;EACd,aAAa;EACb,0CAA0C;EAC1C,uCAAuC;EACvC,iBAAiB;EACjB,aAAa;EACb,sBAAsB;AACxB;;AAEA,sBAAsB;AACtB;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;AACxB;;AAEA,6CAA6C;AAC7C;EACE,wBAAwB,EAAE,iDAAiD;EAC3E,8BAA8B;EAC9B,SAAS;EACT,WAAW;EACX,OAAO;EACP,iBAAiB;AACnB;;AAEA,kBAAkB;AAClB;EACE,wBAAwB;EACxB,iCAAiC;EACjC,SAAS;EACT,0CAA0C;EAC1C,mBAAmB;EACnB,aAAa;EACb,0CAA0C;EAC1C,yBAAyB;EACzB,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA,iDAAiD;AACjD;EACE,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,0BAA0B;EAC1B,mBAAmB;EACnB,yBAAyB;EACzB,yBAAyB;EACzB,yCAAyC;EACzC,yBAAyB;EACzB,UAAU,EAAE,0BAA0B;AACxC;;AAEA;EACE,sBAAsB;EACtB,0CAA0C;AAC5C;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,iBAAiB;EACjB,+BAA+B;AACjC;;AAEA;EACE,wBAAwB;EACxB,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;EAClB,yBAAyB;EACzB,yCAAyC;AAC3C;;AAEA,4DAA4D;AAC5D;EACE;IACE,iCAAiC;EACnC;;EAEA;IACE,WAAW;IACX,gBAAgB;IAChB,mBAAmB;EACrB;AACF;;AAEA,wCAAwC;AACxC;EACE;IACE,mBAAmB;IACnB,YAAY;EACd;EACA;IACE,qBAAqB;IACrB,UAAU;EACZ;AACF;;AAEA;EACE,wCAAwC;EACxC,wCAAwC;EACxC,kBAAkB;EAClB,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gCAAgC;EAChC,oBAAoB;AACtB",sourcesContent:["/* Main container styles */\n.game-container {\n  margin: 0 auto;\n  padding: 16px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Game content area */\n.game-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Three-column layout - FIXED AND ENFORCED */\n.three-column-layout {\n  display: flex !important; /* Use !important to override any inline styles */\n  flex-direction: row !important;\n  gap: 16px;\n  width: 100%;\n  flex: 1;\n  min-height: 600px;\n}\n\n/* Column styles */\n.column {\n  display: flex !important;\n  flex-direction: column !important;\n  gap: 16px;\n  background-color: rgba(228, 228, 228, 0.8);\n  border-radius: 12px;\n  padding: 16px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  border: 1px solid #e0e0e0;\n  overflow-y: auto;\n}\n\n.left-column {\n  flex: 1.25 !important;\n  min-width: 250px;\n}\n\n.center-column {\n  flex: 1.25 !important;\n  min-width: 300px;\n}\n\n.right-column {\n  flex: 1 !important;\n  min-width: 250px;\n}\n\n/* Ensure click area is visible and functioning */\n.frog-display {\n  position: relative;\n  text-align: center;\n  padding: 24px;\n  margin-bottom: 16px;\n  cursor: pointer !important;\n  border-radius: 12px;\n  background-color: #f0f9f0;\n  border: 1px solid #c8e6c9;\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);\n  transition: all 0.2s ease;\n  z-index: 1; /* Ensure it's clickable */\n}\n\n.frog-display:hover {\n  transform: scale(1.02);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);\n}\n\n.bufo-image {\n  max-width: 100%;\n  min-height: 250px;\n  max-height: 400px;\n  transition: transform 0.2s ease;\n}\n\n.owned-generator {\n  display: flex !important;\n  align-items: center;\n  padding: 16px;\n  margin-bottom: 8px;\n  background-color: white;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n/* Responsive adjustments - only apply for smaller screens */\n@media (max-width: 1024px) {\n  .three-column-layout {\n    flex-direction: column !important;\n  }\n  \n  .column {\n    width: 100%;\n    max-height: none;\n    margin-bottom: 16px;\n  }\n}\n\n/* Animation styles for click feedback */\n@keyframes ripple {\n  0% { \n    transform: scale(0);\n    opacity: 0.8;\n  }\n  100% { \n    transform: scale(2.5);\n    opacity: 0;\n  }\n}\n\n.click-indicator {\n  animation: ripple 0.6s ease-out forwards;\n  background-color: rgba(76, 175, 80, 0.2);\n  border-radius: 50%;\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n}\n"],sourceRoot:""}]);const s=i},160:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,'/* Shop styles - Updated */\n.shop-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.purchase-controls {\n  margin-bottom: var(--spacing-md);\n  background-color: #f5f5f5;\n  padding: var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n}\n\n.purchase-amount-buttons {\n  display: flex;\n  gap: var(--spacing-sm);\n}\n\n.purchase-amount-button {\n  padding: var(--spacing-sm) var(--spacing-md);\n  background-color: white;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.purchase-amount-button:hover {\n  background-color: #f0f0f0;\n}\n\n.purchase-amount-button.active {\n  background-color: var(--color-primary);\n  color: white;\n  border-color: var(--color-primary-dark);\n}\n\n.buildings-container {\n  flex: 1;\n  overflow-y: auto;\n}\n\n/* Building item styles - Fixed layout */\n.building-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-md);\n  background-color: white;\n  border-radius: var(--border-radius-md);\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  margin-bottom: var(--spacing-sm);\n  transition: box-shadow 0.2s ease, transform 0.2s ease;\n}\n\n.building-item:hover {\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);\n  transform: translateY(-2px);\n}\n\n/* Generator row styling - Ensure proper flex layout */\n.generator-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.generator-left {\n  display: flex;\n  align-items: center;\n  flex: 1;\n  min-width: 0; /* Prevent flex items from overflowing */\n}\n\n.generators-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: stretch;\n  justify-content: flex-start; /* Start from the top */\n}\n\n.empty-generators {\n  order: -1; /* Ensure it\'s at the top */\n  text-align: center;\n  padding: 20px;\n  color: #777;\n  font-style: italic;\n}\n.generator-icon-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n.generator-icon-img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n  display: block;\n}\n\n.generator-icon-fallback {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  background-color: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n/* Enhanced icon styles for generator categories */\n.category-basic .generator-icon {\n  background-color: rgba(76, 175, 80, 0.1);\n}\n\n.category-premium .generator-icon {\n  background-color: rgba(63, 81, 181, 0.1);\n}\n\n.category-special .generator-icon {\n  background-color: rgba(255, 152, 0, 0.1);\n}\n.generator-icon {\n  width: 48px;\n  height: 48px;\n  min-width: 48px;\n  min-height: 48px;\n  border-radius: 8px;\n  margin-right: 12px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background-color: white;\n}\n\n.generator-info {\n  flex: 1;\n  min-width: 0; /* Allow text to truncate if needed */\n  margin-right: var(--spacing-md);\n}\n\n.generator-name-section {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px;\n  flex-wrap: wrap;\n}\n\n.generator-name {\n  font-weight: bold;\n  font-size: var(--font-size-md);\n  color: #333;\n  margin-right: var(--spacing-sm);\n}\n\n.generator-count {\n  font-size: var(--font-size-sm);\n  color: var(--color-text-light);\n  background-color: #f0f0f0;\n  padding: 2px 6px;\n  border-radius: 10px;\n  white-space: nowrap;\n}\n\n.generator-production {\n  font-size: var(--font-size-sm);\n  color: var(--color-primary);\n}\n/* Add this to your styles/component.css file */\n\n/* Style for the generator count */\n.generator-count {\n  display: inline-block;\n  margin-left: 8px;\n  font-size: 0.9em;\n  font-weight: 600;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 2px 6px;\n  border-radius: 10px;\n}\n\n/* Adjust the owned-generator layout */\n/* Add this to your styles/component.css file */\n\n/* Style for the generator count */\n.generator-count {\n  display: inline-block;\n  margin-left: 8px;\n  font-size: 0.9em;\n  font-weight: 600;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 2px 6px;\n  border-radius: 10px;\n  width: auto; /* Prevent stretching */\n}\n\n/* Adjust the owned-generator layout */\n.owned-generator {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  margin-bottom: 8px;\n  background-color: white;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.owned-generator:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n.owned-generator .generator-info {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.owned-generator .generator-name {\n  font-weight: bold;\n  font-size: 1.1em;\n  margin-bottom: 2px;\n}\n\n/* Create a flex container for the name and count */\n.owned-generator .name-count-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 2px;\n}\n\n.owned-generator .generator-production {\n  color: #2a9d8f;\n  font-weight: 500;\n}\n/* Add this to your styles/component.css file */\n\n.generator-icon-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.generator-icon-img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n}\n\n.generator-icon-fallback {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n}\n/* Add some styling for the count based on generator category */\n.category-basic .generator-count {\n  background-color: rgba(76, 175, 80, 0.1);\n  color: #2e7d32;\n}\n\n.category-premium .generator-count {\n  background-color: rgba(63, 81, 181, 0.1);\n  color: #303f9f;\n}\n\n.category-special .generator-count {\n  background-color: rgba(255, 152, 0, 0.1);\n  color: #ef6c00;\n}\n\n/* Buy button styling - Ensure fixed width and positioning */\n.buy-button {\n  padding: var(--spacing-sm) var(--spacing-md);\n  background: linear-gradient(to bottom, var(--color-primary), var(--color-primary-dark));\n  color: white;\n  border: none;\n  border-radius: var(--border-radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-weight: 500;\n  min-width: 120px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  flex-shrink: 0; /* Prevent button from shrinking */\n  align-self: center; /* Center vertically */\n}\n\n.buy-button:hover {\n  background: var(--color-primary-dark);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);\n}\n\n.buy-button.disabled {\n  background: linear-gradient(to bottom, #aaa, #888);\n  cursor: not-allowed;\n  opacity: 0.7;\n  box-shadow: none;\n}\n\n/* Add feedback styles for purchase actions */\n.purchase-success {\n  animation: pulse 0.3s ease;\n}\n\n.purchase-error {\n  animation: shake 0.5s ease;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.03); }\n  100% { transform: scale(1); }\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  20%, 60% { transform: translateX(-5px); }\n  40%, 80% { transform: translateX(5px); }\n}\n\n/* Generator category styling */\n.category-Basic .generator-icon {\n  background-color: rgba(29, 234, 115, 0);\n}\n\n.category-Premium .generator-icon {\n  background-color: #3f51b5;\n}\n\n.category-Special .generator-icon {\n  background-color: #FF9800;\n}\n\n/* Tooltip styling improvements */\n.tooltip-header {\n  font-size: 16px;\n  margin-bottom: 8px;\n  border-bottom: 1px solid rgba(0,0,0,0.1);\n  padding-bottom: 8px;\n}\n\n.tooltip-count {\n  font-weight: normal;\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.tooltip-description {\n  margin-bottom: 12px;\n  font-size: 14px;\n}\n\n.tooltip-section {\n  margin-bottom: 10px;\n}\n\n.tooltip-section-title {\n  font-weight: bold;\n  font-size: 14px;\n  margin-bottom: 4px;\n}\n\n.tooltip-production, .tooltip-costs {\n  font-size: 13px;\n}\n\n.tooltip-production-item, .tooltip-cost-item {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2px;\n}\n\n.tooltip-label {\n  margin-right: 10px;\n}\n\n.tooltip-value {\n  font-weight: 500;\n}\n\n.affordable .tooltip-value {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n/* Game menu styling */\n.game-menu {\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 8px;\n  background-color: #f0f9f0;\n  border-radius: 8px;\n  border: 1px solid #c8e6c9;\n}\n\n.menu-button {\n  flex: 1;\n  padding: 8px 12px;\n  background: linear-gradient(to bottom, var(--color-primary), var(--color-primary-dark));\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: center;\n}\n\n.menu-button:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n.menu-button:active {\n  transform: translateY(0);\n}\n\n/* Modal styling adjustments */\n.modal-content {\n  min-width: 300px;\n  max-width: 90vw;\n  max-height: 90vh;\n  overflow: auto;\n}\n\n.stats-modal .production-stats {\n  box-shadow: none;\n  border: none;\n  margin: 0;\n}\n\n.modal-close {\n  cursor: pointer;\n  font-size: 1.5rem;\n  background: none;\n  border: none;\n  color: white;\n}\n\n.save-notification {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: var(--color-primary);\n  color: white;\n  padding: 12px 20px;\n  border-radius: 6px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  opacity: 0;\n  transform: translateY(20px);\n  transition: opacity 0.3s ease, transform 0.3s ease;\n  z-index: 1000;\n}\n\n.save-notification.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n\n\n\n/* Super goofy progress indicators */\n.owned-generator {\n  background: linear-gradient(to right, #ffffff, #f0f8f0);\n  border-left: 4px solid transparent;\n  transition: border-left-color 0.3s ease, background 0.3s ease;\n}\n\n.owned-generator[data-count="0"] {\n  border-left-color: #ccc;\n  background: linear-gradient(to right, #ffffff, #f5f5f5);\n}\n\n.owned-generator[data-count="1"] {\n  border-left-color: #A5D6A7;\n}\n\n.owned-generator[data-count="5"] {\n  border-left-color: #81C784;\n}\n\n.owned-generator[data-count="10"] {\n  border-left-color: #66BB6A;\n}\n\n.owned-generator[data-count="25"] {\n  border-left-color: #4CAF50;\n}\n\n.owned-generator[data-count="50"] {\n  border-left-color: #43A047;\n  background: linear-gradient(to right, #f8fff8, #e8f5e9);\n}\n\n.owned-generator[data-count="100"] {\n  border-left-color: #2E7D32;\n  background: linear-gradient(to right, #f0fff0, #c8e6c9);\n}',"",{version:3,sources:["webpack://./styles/component.css"],names:[],mappings:"AAAA,0BAA0B;AAC1B;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,0BAA0B;EAC1B,sCAAsC;AACxC;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,4CAA4C;EAC5C,uBAAuB;EACvB,qCAAqC;EACrC,sCAAsC;EACtC,eAAe;EACf,yBAAyB;EACzB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,sCAAsC;EACtC,YAAY;EACZ,uCAAuC;AACzC;;AAEA;EACE,OAAO;EACP,gBAAgB;AAClB;;AAEA,wCAAwC;AACxC;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,0BAA0B;EAC1B,uBAAuB;EACvB,sCAAsC;EACtC,yBAAyB;EACzB,yCAAyC;EACzC,gCAAgC;EAChC,qDAAqD;AACvD;;AAEA;EACE,yCAAyC;EACzC,2BAA2B;AAC7B;;AAEA,sDAAsD;AACtD;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,OAAO;EACP,YAAY,EAAE,wCAAwC;AACxD;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,oBAAoB;EACpB,2BAA2B,EAAE,uBAAuB;AACtD;;AAEA;EACE,SAAS,EAAE,2BAA2B;EACtC,kBAAkB;EAClB,aAAa;EACb,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,qCAAqC;EACrC,kBAAkB;AACpB;;AAEA,kDAAkD;AAClD;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE,wCAAwC;AAC1C;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,yCAAyC;EACzC,oCAAoC;EACpC,uBAAuB;AACzB;;AAEA;EACE,OAAO;EACP,YAAY,EAAE,qCAAqC;EACnD,+BAA+B;AACjC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,8BAA8B;EAC9B,WAAW;EACX,+BAA+B;AACjC;;AAEA;EACE,8BAA8B;EAC9B,8BAA8B;EAC9B,yBAAyB;EACzB,gBAAgB;EAChB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;EAC9B,2BAA2B;AAC7B;AACA,+CAA+C;;AAE/C,kCAAkC;AAClC;EACE,qBAAqB;EACrB,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,WAAW;EACX,yBAAyB;EACzB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA,sCAAsC;AACtC,+CAA+C;;AAE/C,kCAAkC;AAClC;EACE,qBAAqB;EACrB,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,WAAW;EACX,yBAAyB;EACzB,gBAAgB;EAChB,mBAAmB;EACnB,WAAW,EAAE,uBAAuB;AACtC;;AAEA,sCAAsC;AACtC;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;EAClB,yBAAyB;EACzB,yCAAyC;EACzC,qDAAqD;AACvD;;AAEA;EACE,2BAA2B;EAC3B,wCAAwC;AAC1C;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,OAAO;AACT;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA,mDAAmD;AACnD;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;AACA,+CAA+C;;AAE/C;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;AACjB;AACA,+DAA+D;AAC/D;EACE,wCAAwC;EACxC,cAAc;AAChB;;AAEA;EACE,wCAAwC;EACxC,cAAc;AAChB;;AAEA;EACE,wCAAwC;EACxC,cAAc;AAChB;;AAEA,4DAA4D;AAC5D;EACE,4CAA4C;EAC5C,uFAAuF;EACvF,YAAY;EACZ,YAAY;EACZ,sCAAsC;EACtC,eAAe;EACf,yBAAyB;EACzB,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,wCAAwC;EACxC,cAAc,EAAE,kCAAkC;EAClD,kBAAkB,EAAE,sBAAsB;AAC5C;;AAEA;EACE,qCAAqC;EACrC,yCAAyC;AAC3C;;AAEA;EACE,kDAAkD;EAClD,mBAAmB;EACnB,YAAY;EACZ,gBAAgB;AAClB;;AAEA,6CAA6C;AAC7C;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,KAAK,mBAAmB,EAAE;EAC1B,MAAM,sBAAsB,EAAE;EAC9B,OAAO,mBAAmB,EAAE;AAC9B;;AAEA;EACE,WAAW,wBAAwB,EAAE;EACrC,WAAW,2BAA2B,EAAE;EACxC,WAAW,0BAA0B,EAAE;AACzC;;AAEA,+BAA+B;AAC/B;EACE,uCAAuC;AACzC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,iCAAiC;AACjC;EACE,eAAe;EACf,kBAAkB;EAClB,wCAAwC;EACxC,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB;;AAEA,sBAAsB;AACtB;EACE,aAAa;EACb,8BAA8B;EAC9B,QAAQ;EACR,mBAAmB;EACnB,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,OAAO;EACP,iBAAiB;EACjB,uFAAuF;EACvF,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,qCAAqC;EACrC,2BAA2B;EAC3B,wCAAwC;AAC1C;;AAEA;EACE,wBAAwB;AAC1B;;AAEA,8BAA8B;AAC9B;EACE,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,sCAAsC;EACtC,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,wCAAwC;EACxC,UAAU;EACV,2BAA2B;EAC3B,kDAAkD;EAClD,aAAa;AACf;;AAEA;EACE,UAAU;EACV,wBAAwB;AAC1B;;;;;AAKA,oCAAoC;AACpC;EACE,uDAAuD;EACvD,kCAAkC;EAClC,6DAA6D;AAC/D;;AAEA;EACE,uBAAuB;EACvB,uDAAuD;AACzD;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;EAC1B,uDAAuD;AACzD;;AAEA;EACE,0BAA0B;EAC1B,uDAAuD;AACzD",sourcesContent:['/* Shop styles - Updated */\n.shop-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.purchase-controls {\n  margin-bottom: var(--spacing-md);\n  background-color: #f5f5f5;\n  padding: var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n}\n\n.purchase-amount-buttons {\n  display: flex;\n  gap: var(--spacing-sm);\n}\n\n.purchase-amount-button {\n  padding: var(--spacing-sm) var(--spacing-md);\n  background-color: white;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.purchase-amount-button:hover {\n  background-color: #f0f0f0;\n}\n\n.purchase-amount-button.active {\n  background-color: var(--color-primary);\n  color: white;\n  border-color: var(--color-primary-dark);\n}\n\n.buildings-container {\n  flex: 1;\n  overflow-y: auto;\n}\n\n/* Building item styles - Fixed layout */\n.building-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-md);\n  background-color: white;\n  border-radius: var(--border-radius-md);\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  margin-bottom: var(--spacing-sm);\n  transition: box-shadow 0.2s ease, transform 0.2s ease;\n}\n\n.building-item:hover {\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);\n  transform: translateY(-2px);\n}\n\n/* Generator row styling - Ensure proper flex layout */\n.generator-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.generator-left {\n  display: flex;\n  align-items: center;\n  flex: 1;\n  min-width: 0; /* Prevent flex items from overflowing */\n}\n\n.generators-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: stretch;\n  justify-content: flex-start; /* Start from the top */\n}\n\n.empty-generators {\n  order: -1; /* Ensure it\'s at the top */\n  text-align: center;\n  padding: 20px;\n  color: #777;\n  font-style: italic;\n}\n.generator-icon-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n.generator-icon-img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n  display: block;\n}\n\n.generator-icon-fallback {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  background-color: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n/* Enhanced icon styles for generator categories */\n.category-basic .generator-icon {\n  background-color: rgba(76, 175, 80, 0.1);\n}\n\n.category-premium .generator-icon {\n  background-color: rgba(63, 81, 181, 0.1);\n}\n\n.category-special .generator-icon {\n  background-color: rgba(255, 152, 0, 0.1);\n}\n.generator-icon {\n  width: 48px;\n  height: 48px;\n  min-width: 48px;\n  min-height: 48px;\n  border-radius: 8px;\n  margin-right: 12px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background-color: white;\n}\n\n.generator-info {\n  flex: 1;\n  min-width: 0; /* Allow text to truncate if needed */\n  margin-right: var(--spacing-md);\n}\n\n.generator-name-section {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px;\n  flex-wrap: wrap;\n}\n\n.generator-name {\n  font-weight: bold;\n  font-size: var(--font-size-md);\n  color: #333;\n  margin-right: var(--spacing-sm);\n}\n\n.generator-count {\n  font-size: var(--font-size-sm);\n  color: var(--color-text-light);\n  background-color: #f0f0f0;\n  padding: 2px 6px;\n  border-radius: 10px;\n  white-space: nowrap;\n}\n\n.generator-production {\n  font-size: var(--font-size-sm);\n  color: var(--color-primary);\n}\n/* Add this to your styles/component.css file */\n\n/* Style for the generator count */\n.generator-count {\n  display: inline-block;\n  margin-left: 8px;\n  font-size: 0.9em;\n  font-weight: 600;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 2px 6px;\n  border-radius: 10px;\n}\n\n/* Adjust the owned-generator layout */\n/* Add this to your styles/component.css file */\n\n/* Style for the generator count */\n.generator-count {\n  display: inline-block;\n  margin-left: 8px;\n  font-size: 0.9em;\n  font-weight: 600;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 2px 6px;\n  border-radius: 10px;\n  width: auto; /* Prevent stretching */\n}\n\n/* Adjust the owned-generator layout */\n.owned-generator {\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  margin-bottom: 8px;\n  background-color: white;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.owned-generator:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n.owned-generator .generator-info {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.owned-generator .generator-name {\n  font-weight: bold;\n  font-size: 1.1em;\n  margin-bottom: 2px;\n}\n\n/* Create a flex container for the name and count */\n.owned-generator .name-count-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 2px;\n}\n\n.owned-generator .generator-production {\n  color: #2a9d8f;\n  font-weight: 500;\n}\n/* Add this to your styles/component.css file */\n\n.generator-icon-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.generator-icon-img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n}\n\n.generator-icon-fallback {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n}\n/* Add some styling for the count based on generator category */\n.category-basic .generator-count {\n  background-color: rgba(76, 175, 80, 0.1);\n  color: #2e7d32;\n}\n\n.category-premium .generator-count {\n  background-color: rgba(63, 81, 181, 0.1);\n  color: #303f9f;\n}\n\n.category-special .generator-count {\n  background-color: rgba(255, 152, 0, 0.1);\n  color: #ef6c00;\n}\n\n/* Buy button styling - Ensure fixed width and positioning */\n.buy-button {\n  padding: var(--spacing-sm) var(--spacing-md);\n  background: linear-gradient(to bottom, var(--color-primary), var(--color-primary-dark));\n  color: white;\n  border: none;\n  border-radius: var(--border-radius-md);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-weight: 500;\n  min-width: 120px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  flex-shrink: 0; /* Prevent button from shrinking */\n  align-self: center; /* Center vertically */\n}\n\n.buy-button:hover {\n  background: var(--color-primary-dark);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);\n}\n\n.buy-button.disabled {\n  background: linear-gradient(to bottom, #aaa, #888);\n  cursor: not-allowed;\n  opacity: 0.7;\n  box-shadow: none;\n}\n\n/* Add feedback styles for purchase actions */\n.purchase-success {\n  animation: pulse 0.3s ease;\n}\n\n.purchase-error {\n  animation: shake 0.5s ease;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.03); }\n  100% { transform: scale(1); }\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  20%, 60% { transform: translateX(-5px); }\n  40%, 80% { transform: translateX(5px); }\n}\n\n/* Generator category styling */\n.category-Basic .generator-icon {\n  background-color: rgba(29, 234, 115, 0);\n}\n\n.category-Premium .generator-icon {\n  background-color: #3f51b5;\n}\n\n.category-Special .generator-icon {\n  background-color: #FF9800;\n}\n\n/* Tooltip styling improvements */\n.tooltip-header {\n  font-size: 16px;\n  margin-bottom: 8px;\n  border-bottom: 1px solid rgba(0,0,0,0.1);\n  padding-bottom: 8px;\n}\n\n.tooltip-count {\n  font-weight: normal;\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.tooltip-description {\n  margin-bottom: 12px;\n  font-size: 14px;\n}\n\n.tooltip-section {\n  margin-bottom: 10px;\n}\n\n.tooltip-section-title {\n  font-weight: bold;\n  font-size: 14px;\n  margin-bottom: 4px;\n}\n\n.tooltip-production, .tooltip-costs {\n  font-size: 13px;\n}\n\n.tooltip-production-item, .tooltip-cost-item {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2px;\n}\n\n.tooltip-label {\n  margin-right: 10px;\n}\n\n.tooltip-value {\n  font-weight: 500;\n}\n\n.affordable .tooltip-value {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n/* Game menu styling */\n.game-menu {\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 8px;\n  background-color: #f0f9f0;\n  border-radius: 8px;\n  border: 1px solid #c8e6c9;\n}\n\n.menu-button {\n  flex: 1;\n  padding: 8px 12px;\n  background: linear-gradient(to bottom, var(--color-primary), var(--color-primary-dark));\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: center;\n}\n\n.menu-button:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n}\n\n.menu-button:active {\n  transform: translateY(0);\n}\n\n/* Modal styling adjustments */\n.modal-content {\n  min-width: 300px;\n  max-width: 90vw;\n  max-height: 90vh;\n  overflow: auto;\n}\n\n.stats-modal .production-stats {\n  box-shadow: none;\n  border: none;\n  margin: 0;\n}\n\n.modal-close {\n  cursor: pointer;\n  font-size: 1.5rem;\n  background: none;\n  border: none;\n  color: white;\n}\n\n.save-notification {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: var(--color-primary);\n  color: white;\n  padding: 12px 20px;\n  border-radius: 6px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  opacity: 0;\n  transform: translateY(20px);\n  transition: opacity 0.3s ease, transform 0.3s ease;\n  z-index: 1000;\n}\n\n.save-notification.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n\n\n\n/* Super goofy progress indicators */\n.owned-generator {\n  background: linear-gradient(to right, #ffffff, #f0f8f0);\n  border-left: 4px solid transparent;\n  transition: border-left-color 0.3s ease, background 0.3s ease;\n}\n\n.owned-generator[data-count="0"] {\n  border-left-color: #ccc;\n  background: linear-gradient(to right, #ffffff, #f5f5f5);\n}\n\n.owned-generator[data-count="1"] {\n  border-left-color: #A5D6A7;\n}\n\n.owned-generator[data-count="5"] {\n  border-left-color: #81C784;\n}\n\n.owned-generator[data-count="10"] {\n  border-left-color: #66BB6A;\n}\n\n.owned-generator[data-count="25"] {\n  border-left-color: #4CAF50;\n}\n\n.owned-generator[data-count="50"] {\n  border-left-color: #43A047;\n  background: linear-gradient(to right, #f8fff8, #e8f5e9);\n}\n\n.owned-generator[data-count="100"] {\n  border-left-color: #2E7D32;\n  background: linear-gradient(to right, #f0fff0, #c8e6c9);\n}'],sourceRoot:""}]);const s=i},205:(e,n,t)=>{t.d(n,{F:()=>f});var o,r=t(393),a=t(794),i=t(128);!function(e){e.Normal="normal",e.Elite="elite",e.Boss="boss"}(o||(o={}));const s={common_slime:{id:"common_slime",name:"Common Slime",dropRate:.8},water_essence:{id:"water_essence",name:"Water Essence",dropRate:.5},thorn_spike:{id:"thorn_spike",name:"Thorn Spike",dropRate:.4},frog_scale:{id:"frog_scale",name:"Frog Scale",dropRate:.6},golden_egg:{id:"golden_egg",name:"Golden Egg",dropRate:.05}},c=[{baseId:"waterBug",nameTemplate:"Water Bug",baseMaxHealth:20,baseAttack:3,baseDefense:1,baseSpeed:5,possibleTypes:[o.Normal,o.Elite],typeWeights:[95,5],colorTheme:"#6BCDFF",spriteRef:"assets/images/enemies/water_bug.png",areas:["Pond","Creek","Swamp"],minAreaLevel:1,baseDropTable:{possibleDrops:[s.common_slime,s.water_essence],baseBufos:5,baseExperience:10},healthScaling:1.2,attackScaling:1.1,defenseScaling:1.05,speedScaling:1.15},{baseId:"mudCrawler",nameTemplate:"Mud Crawler",baseMaxHealth:35,baseAttack:4,baseDefense:3,baseSpeed:2,possibleTypes:[o.Normal,o.Elite],typeWeights:[90,10],colorTheme:"#8B4513",spriteRef:"assets/images/enemies/mud_crawler.png",areas:["Creek","Swamp","River"],minAreaLevel:2,baseDropTable:{possibleDrops:[s.common_slime,s.thorn_spike],baseBufos:10,baseExperience:15},healthScaling:1.25,attackScaling:1.15,defenseScaling:1.2,speedScaling:1.05},{baseId:"poisonDartFrog",nameTemplate:"Poison Dart Frog",baseMaxHealth:25,baseAttack:8,baseDefense:2,baseSpeed:7,possibleTypes:[o.Normal,o.Elite,o.Boss],typeWeights:[85,13,2],colorTheme:"#FF4D4D",spriteRef:"assets/images/enemies/poison_frog.png",areas:["Swamp","River","Forest"],minAreaLevel:3,baseDropTable:{possibleDrops:[s.frog_scale,s.water_essence],baseBufos:25,baseExperience:30},healthScaling:1.2,attackScaling:1.25,defenseScaling:1.1,speedScaling:1.2},{baseId:"giantSnapper",nameTemplate:"Giant Snapper",baseMaxHealth:80,baseAttack:12,baseDefense:10,baseSpeed:2,possibleTypes:[o.Normal,o.Elite,o.Boss],typeWeights:[80,15,5],colorTheme:"#006400",spriteRef:"assets/images/enemies/giant_snapper.png",areas:["River","Lake","Swamp"],minAreaLevel:4,baseDropTable:{possibleDrops:[s.water_essence,s.thorn_spike,s.golden_egg],baseBufos:40,baseExperience:50},healthScaling:1.3,attackScaling:1.2,defenseScaling:1.3,speedScaling:1.05},{baseId:"forestStalker",nameTemplate:"Forest Stalker",baseMaxHealth:60,baseAttack:15,baseDefense:6,baseSpeed:10,possibleTypes:[o.Normal,o.Elite,o.Boss],typeWeights:[75,20,5],colorTheme:"#3D7B3D",spriteRef:"assets/images/enemies/forest_stalker.png",areas:["Forest","Mountains"],minAreaLevel:5,baseDropTable:{possibleDrops:[s.thorn_spike,s.golden_egg],baseBufos:60,baseExperience:80},healthScaling:1.25,attackScaling:1.3,defenseScaling:1.15,speedScaling:1.25},{baseId:"darkDweller",nameTemplate:"Dark Dweller",baseMaxHealth:100,baseAttack:20,baseDefense:15,baseSpeed:5,possibleTypes:[o.Elite,o.Boss],typeWeights:[80,20],colorTheme:"#4B0082",spriteRef:"assets/images/enemies/dark_dweller.png",areas:["Mountains","Dungeon"],minAreaLevel:7,baseDropTable:{possibleDrops:[s.frog_scale,s.golden_egg],baseBufos:100,baseExperience:120},healthScaling:1.35,attackScaling:1.35,defenseScaling:1.3,speedScaling:1.15}];function l(e,n,t,o){const r=e*Math.pow(t,Math.sqrt(n))*o,a=.9+.2*Math.random();return Math.round(r*a)}function A(e){const n=.8+.4*Math.random(),t=Math.max(1,Math.round(e.dropTable.baseBufos*n)),o=.8+.4*Math.random(),r=Math.max(1,Math.round(e.dropTable.baseExperience*o)),a=[];return e.dropTable.guaranteedDrops&&a.push(...e.dropTable.guaranteedDrops),e.dropTable.possibleDrops.forEach((e=>{Math.random()<e.dropRate&&a.push(e.id)})),{bufos:t,experience:r,drops:a}}var d,u;function p(e,n,t=.9,o=1.1){const r=Math.max(1,e-.5*n),a=t+Math.random()*(o-t);return Math.round(r*a)}function m(e,n=1){const{explorer:t,enemy:o}=e,r=p(o.attack*n,t.defense.value*t.defense.multiplier);return t.health=Math.max(0,t.health-r),e.combatLog.push(`${o.name} attacks ${t.name} for ${r} damage!`),r}!function(e){e.InProgress="inProgress",e.Victory="victory",e.Defeat="defeat"}(d||(d={})),function(e){e.Attack="attack",e.Defend="defend",e.Flee="flee"}(u||(u={}));var g=t(217);class h{constructor(){this.availableAreas=["Pond","Creek","Swamp","River","Lake","Forest","Mountains","Dungeon"],this.currentCombat=null,this.currentEnemy=null,this.lastUpdateTime=Date.now(),this.encounterChance=.05,this.explorationDistance=0,this.maxExplorationDistance=10}static getInstance(){return h.instance||(h.instance=new h),h.instance}getExplorerFromState(){return(0,r.b)().getState().explorer}updateExplorerInState(e){(0,r.b)().setState({explorer:e})}getExplorer(){return this.getExplorerFromState()}getCurrentEnemy(){return this.currentEnemy?Object.assign({},this.currentEnemy):null}getCurrentCombat(){return this.currentCombat?Object.assign({},this.currentCombat):null}update(e){const n=Date.now(),t=this.getExplorerFromState();if(e<=0)return null;if(t.state===i.Lu.Fighting&&this.currentCombat)return null;if(t.state!==i.Lu.Exploring){const o=t.state,r=(0,i.zu)(t,e);return this.updateExplorerInState(r.explorer),this.lastUpdateTime=n,o!==r.explorer.state&&(0,a.J)().emit(g.hl,{explorer:r.explorer,previousState:o}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:r.explorer}),r.result?((0,a.J)().emit(g.YP,{explorer:r.explorer,result:r.result}),r.result):null}if(this.explorationDistance+=.2*e,Math.random()<this.encounterChance*e)return this.generateEncounter(),null;if(this.explorationDistance>=this.maxExplorationDistance){const e=(n-t.stateStartTime)/1e3,o=this.getAreaLevel(t.currentArea),r=50*o*this.calculateAreaEffectiveness(t,o)*(e/60),a=1+t.luck.value*t.luck.multiplier/100,i=10*o*(e/60),s={survived:!0,duration:e,bufosGained:Math.floor(r*a),experienceGained:Math.floor(i),itemsFound:[]};return this.completeExploration(s),this.explorationDistance=0,s}return this.updateExplorerInState({explorationProgress:this.explorationDistance/this.maxExplorationDistance*100}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:this.getExplorerFromState()}),null}startExploration(e){const n=this.getExplorerFromState();if(!this.availableAreas.includes(e))return!1;if(n.state!==i.Lu.Idle&&n.state!==i.Lu.Resting)return!1;this.explorationDistance=0;const t=n.state,o=(0,i.k9)(n,e);return this.updateExplorerInState(o),t!==o.state&&((0,a.J)().emit(g.hl,{explorer:o,previousState:t}),(0,a.J)().emit(g.sl,{explorer:o,area:e}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:o}),!0)}generateEncounter(){const e=this.getExplorerFromState();if(e.state!==i.Lu.Exploring)return;const n=this.getAreaLevel(e.currentArea),t=this.explorationDistance/this.maxExplorationDistance;try{const r=function(e,n,t){const r=c.filter((n=>n.areas.includes(e)&&n.minAreaLevel<=t));if(0===r.length)throw new Error(`No valid enemy templates for area ${e} at level ${t}`);const a=r[Math.floor(Math.random()*r.length)],i=function(e){const n=e.reduce(((e,n)=>e+n),0);let t=Math.random()*n;for(let n=0;n<e.length;n++)if(t-=e[n],t<=0)return n;return 0}(a.typeWeights),s=a.possibleTypes[i],A=function(e){switch(e){case o.Normal:return{health:1,attack:1,defense:1,speed:1};case o.Elite:return{health:2.5,attack:1.8,defense:1.5,speed:1.2};case o.Boss:return{health:5,attack:3,defense:2.5,speed:1.5};default:return{health:1,attack:1,defense:1,speed:1}}}(s),d=t+.5*n,u=l(a.baseMaxHealth,d,a.healthScaling,A.health),p=l(a.baseAttack,d,a.attackScaling,A.attack),m=l(a.baseDefense,d,a.defenseScaling,A.defense),g=l(a.baseSpeed,d,a.speedScaling,A.speed),h=`${a.baseId}_${e}_${Date.now()}`;let f=a.nameTemplate;s===o.Elite?f=`Elite ${f}`:s===o.Boss&&(f=`${f} Boss`);const C=function(e,n,t){const r={[o.Normal]:1,[o.Elite]:2.5,[o.Boss]:5}[n],a=e.baseBufos*Math.pow(1.1,t)*r,i=e.baseExperience*Math.pow(1.1,t)*r;return{guaranteedDrops:e.guaranteedDrops,possibleDrops:e.possibleDrops,baseBufos:Math.round(a),baseExperience:Math.round(i)}}(a.baseDropTable,s,d);return{id:h,name:f,health:u,maxHealth:u,attack:p,defense:m,speed:g,type:s,colorTheme:a.colorTheme,spriteRef:a.spriteRef,area:e,difficultyLevel:d,dropTable:C}}(e.currentArea,t,n);this.currentEnemy=r;const s=e.state,A=Object.assign(Object.assign({},e),{state:i.Lu.Fighting});this.updateExplorerInState(A),this.currentCombat=function(e,n){return{explorer:e,enemy:n,status:d.InProgress,round:1,combatLog:[`${e.name} encounters ${n.name}!`],startTime:Date.now(),lastActionTime:Date.now()}}(A,r),(0,a.J)().emit(g.hl,{explorer:A,previousState:s}),(0,a.J)().emit("ENEMY_ENCOUNTERED",{explorer:A,enemy:r}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:A})}catch(e){console.error("Failed to generate enemy:",e)}}performCombatAction(e){const n=this.getExplorerFromState();if(!this.currentCombat||!this.currentEnemy||n.state!==i.Lu.Fighting)return!1;const t=function(e,n){const{explorer:t,enemy:o,round:r}=e,a=Object.assign(Object.assign({},e),{explorer:Object.assign({},t),enemy:Object.assign({},o),round:r+1,lastActionTime:Date.now()});let i=0,s=0,c="";switch(n){case u.Attack:if(i=p(t.attack.value*t.attack.multiplier,o.defense,.8,1.2),a.enemy.health=Math.max(0,o.health-i),c=`${t.name} attacks ${o.name} for ${i} damage!`,a.combatLog.push(c),a.enemy.health<=0){a.status=d.Victory,a.combatLog.push(`${o.name} is defeated!`);const e=A(o);return a.combatLog.push(`Gained ${e.bufos} bufos and ${e.experience} experience!`),e.drops.length>0&&a.combatLog.push(`Found items: ${e.drops.join(", ")}!`),{newState:a,damageToEnemy:i,damageToExplorer:0,actionMessage:c,rewards:e}}s=m(a);break;case u.Defend:s=m(a,.5),c=`${t.name} defends against ${o.name}'s attack!`,a.combatLog.push(c);break;case u.Flee:const e=t.speed.value*t.speed.multiplier,n=Math.min(.75,.5+(e-o.speed)/20);if(Math.random()<n)return c=`${t.name} successfully fled from the battle!`,a.combatLog.push(c),a.status=d.Defeat,{newState:a,damageToEnemy:0,damageToExplorer:0,actionMessage:c};c=`${t.name} failed to escape!`,a.combatLog.push(c),s=m(a,1.2)}return a.explorer.health<=0&&(a.status=d.Defeat,a.combatLog.push(`${t.name} has been defeated!`)),{newState:a,damageToEnemy:i,damageToExplorer:s,actionMessage:c}}(this.currentCombat,e);if(this.currentCombat=t.newState,this.updateExplorerInState({health:this.currentCombat.explorer.health}),(0,a.J)().emit("COMBAT_ACTION",t),this.currentCombat.status!==d.InProgress){this.currentCombat.status===d.Victory?(t.rewards&&(this.updateExplorerInState({experience:n.experience+t.rewards.experience,lifetimeBufosFromExploring:n.lifetimeBufosFromExploring+t.rewards.bufos}),this.checkForLevelUp()),(0,a.J)().emit("COMBAT_ENDED",{explorer:this.getExplorerFromState(),enemy:this.currentEnemy,victory:!0,rewards:t.rewards})):(0,a.J)().emit("COMBAT_ENDED",{explorer:this.getExplorerFromState(),enemy:this.currentEnemy,victory:!1});const e=this.getExplorerFromState(),o=e.state;let r=i.Lu.Exploring;e.health<.2*e.maxHealth?r=i.Lu.Injured:e.health<.5*e.maxHealth&&(r=i.Lu.Resting),this.updateExplorerInState({state:r,stateStartTime:Date.now()}),this.currentCombat=null,this.currentEnemy=null,(0,a.J)().emit(g.hl,{explorer:this.getExplorerFromState(),previousState:o}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:this.getExplorerFromState()})}return!0}autoResolveCombat(){const e=this.getExplorerFromState();if(!this.currentCombat||!this.currentEnemy||e.state!==i.Lu.Fighting)return!1;const n=function(e,n,t=10){const o=JSON.parse(JSON.stringify(e)),r=JSON.parse(JSON.stringify(n));let a=0;for(;a<t&&o.health>0&&r.health>0;){a++;const e=p(o.attack.value*o.attack.multiplier,r.defense);if(r.health=Math.max(0,r.health-e),r.health<=0)break;const n=p(r.attack,o.defense.value*o.defense.multiplier);o.health=Math.max(0,o.health-n)}const i=r.health<=0;let s=0,c=0,l=[];if(i){const e=A(n);s=e.experience,c=e.bufos,l=e.drops}return{victory:i,explorerRemainingHealth:o.health,experienceGained:s,bufosGained:c,itemsFound:l,rounds:a}}(e,this.currentEnemy);this.updateExplorerInState({health:n.explorerRemainingHealth}),n.victory?(this.updateExplorerInState({experience:e.experience+n.experienceGained,lifetimeBufosFromExploring:e.lifetimeBufosFromExploring+n.bufosGained}),this.checkForLevelUp(),(0,a.J)().emit("COMBAT_ENDED",{explorer:this.getExplorerFromState(),enemy:this.currentEnemy,victory:!0,rewards:{bufos:n.bufosGained,experience:n.experienceGained,drops:n.itemsFound}})):(0,a.J)().emit("COMBAT_ENDED",{explorer:this.getExplorerFromState(),enemy:this.currentEnemy,victory:!1});const t=this.getExplorerFromState(),o=t.state;let r=i.Lu.Exploring;return t.health<.2*t.maxHealth?r=i.Lu.Injured:t.health<.5*t.maxHealth&&(r=i.Lu.Resting),this.updateExplorerInState({state:r,stateStartTime:Date.now()}),this.currentCombat=null,this.currentEnemy=null,(0,a.J)().emit(g.hl,{explorer:this.getExplorerFromState(),previousState:o}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:this.getExplorerFromState()}),!0}calculateAreaEffectiveness(e,n){return Math.min(1,e.level/n)}completeExploration(e){const n=this.getExplorerFromState();let t=.05*n.maxHealth;const o=Math.max(1,n.health-t);let r=i.Lu.Resting;o<.2*n.maxHealth&&(r=i.Lu.Injured);const s=n.state;this.updateExplorerInState({health:o,state:r,stateStartTime:Date.now(),experience:n.experience+e.experienceGained,explorationsCompleted:n.explorationsCompleted+1,lifetimeBufosFromExploring:n.lifetimeBufosFromExploring+e.bufosGained,explorationProgress:0}),this.checkForLevelUp(),s!==r&&(0,a.J)().emit(g.hl,{explorer:this.getExplorerFromState(),previousState:s}),(0,a.J)().emit(g.YP,{explorer:this.getExplorerFromState(),result:e})}checkForLevelUp(){let e=this.getExplorerFromState(),n=!1;for(;e.experience>=e.experienceToNextLevel;){n=!0;const t=e.level+1,o=e.experience-e.experienceToNextLevel,r=20+5*e.defense.level,i=e.maxHealth+r,s=Math.ceil(100*Math.pow(1.5,t-1));this.updateExplorerInState({level:t,experience:o,maxHealth:i,experienceToNextLevel:s}),e=this.getExplorerFromState(),(0,a.J)().emit(g.Xj,{explorer:e,newLevel:t})}n&&(0,a.J)().emit("EXPLORER_UPDATED",{explorer:this.getExplorerFromState()})}getAreaLevel(e){return{Pond:1,Creek:2,Swamp:3,River:4,Lake:5,Forest:6,Mountains:8,Dungeon:10}[e]||1}upgradeExplorerStat(e,n){const t=this.getExplorerFromState(),o=(0,i.SJ)(t,e,n);if(o.success){const n=t.level;this.updateExplorerInState(o.explorer);const r=this.getExplorerFromState();(0,a.J)().emit(g.Q,{explorer:r,statName:e,newLevel:r[e].level}),(0,a.J)().emit("EXPLORER_UPDATED",{explorer:r}),n!==r.level&&(0,a.J)().emit(g.Xj,{explorer:r,newLevel:r.level})}return{success:o.success,cost:o.cost}}getExplorerStats(){const e=this.getExplorerFromState();return{powerRating:(0,i.vx)(e),dps:(0,i.iC)(e),survivalTime:(0,i.eg)(e),healthPercent:e.health/e.maxHealth*100}}getAvailableAreas(){return[...this.availableAreas]}reset(){this.currentCombat=null,this.currentEnemy=null,this.explorationDistance=0,(0,a.J)().emit("EXPLORER_UPDATED",{explorer:this.getExplorerFromState()})}}function f(){return h.getInstance()}},217:(e,n,t)=>{t.d(n,{Dk:()=>g,Gc:()=>o,Gq:()=>a,LG:()=>f,Ly:()=>E,Mn:()=>p,Q:()=>l,ST:()=>r,U9:()=>u,Uu:()=>B,VO:()=>h,Xj:()=>c,YP:()=>s,dY:()=>d,hl:()=>A,lM:()=>m,nJ:()=>C,sl:()=>i,ux:()=>b});const o="GENERATOR_PURCHASED",r="GENERATOR_UNLOCKED",a="GENERATOR_PRODUCTION_UPDATED",i="EXPLORATION_STARTED",s="EXPLORATION_COMPLETED",c="EXPLORER_LEVEL_UP",l="EXPLORER_STAT_UPGRADED",A="EXPLORER_STATE_CHANGED",d="UPGRADE_PURCHASED",u="UPGRADES_AVAILABLE",p="ACHIEVEMENT_UNLOCKED",m="GAME_TICK",g="GAME_SAVED",h="GAME_LOADED",f="GAME_RESET",C="GAME_STARTED",b="GAME_PAUSED",E="UI_MODAL_OPENED",B="UI_MODAL_CLOSED"},259:(e,n,t)=>{t.d(n,{$m:()=>A,E:()=>a,aG:()=>l,bD:()=>m,oB:()=>o,q1:()=>g,qG:()=>r});var o,r,a,i=t(715),s=t(628),c=function(e,n,t,o){return new(t||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}))};!function(e){e.Generators="generators",e.Production="production",e.Clicks="clicks",e.Special="special"}(o||(o={})),function(e){e.TotalBufos="totalBufos",e.BufosPerSecond="bufosPerSecond",e.TotalGenerators="totalGenerators",e.GeneratorType="generatorType",e.ClickCount="clickCount",e.ConsoleOpened="consoleOpened",e.UpgradeCount="upgradeCount",e.ExplorationCount="explorationCount",e.CustomEvent="customEvent"}(r||(r={})),function(e){e.ProductionBoost="productionBoost",e.ClickBoost="clickBoost",e.GeneratorBoost="generatorBoost",e.UnlockGenerator="unlockGenerator",e.UnlockUpgrade="unlockUpgrade",e.UnlockFeature="unlockFeature",e.BufoBonus="bufoBonus"}(a||(a={}));let l=[];function A(){return c(this,void 0,void 0,(function*(){try{s.Yz("Loading achievements from JSON...");const e=yield(0,i.hH)("./assets/data/achievements.json");s.Yz(`Retrieved achievements JSON with ${e.length} entries`);const n=[];for(const t of e)try{n.push(Object.assign(Object.assign({},t),{category:d(t.category),requirement:Object.assign(Object.assign({},t.requirement),{type:u(t.requirement.type)}),reward:t.reward?Object.assign(Object.assign({},t.reward),{type:p(t.reward.type)}):void 0})),s.Yz(`Processed achievement: ${t.id}`)}catch(e){s.z3(`Error processing achievement ${t.id||"unknown"}:`,e)}return l=n,s.Rm(`Initialized ${n.length} achievements from JSON`),n}catch(e){return s.z3("Failed to initialize achievements from JSON:",e),[]}}))}function d(e){switch(e.toLowerCase()){case"generators":return o.Generators;case"production":return o.Production;case"clicks":return o.Clicks;default:return o.Special}}function u(e){switch(e.toLowerCase()){case"totalbufos":return r.TotalBufos;case"bufospersecond":return r.BufosPerSecond;case"totalgenerators":return r.TotalGenerators;case"generatortype":return r.GeneratorType;case"clickcount":return r.ClickCount;case"consoleopened":return r.ConsoleOpened;case"upgradecount":return r.UpgradeCount;case"explorationcount":return r.ExplorationCount;default:return r.CustomEvent}}function p(e){switch(e.toLowerCase()){case"productionboost":return a.ProductionBoost;case"clickboost":return a.ClickBoost;case"generatorboost":return a.GeneratorBoost;case"unlockgenerator":return a.UnlockGenerator;case"unlockupgrade":return a.UnlockUpgrade;case"unlockfeature":return a.UnlockFeature;default:return a.BufoBonus}}function m(e,n){const t=e.requirement;switch(t.type){case r.TotalBufos:return n.totalBufos>=t.value;case r.BufosPerSecond:return n.bufosPerSecond>=t.value;case r.TotalGenerators:return n.totalGenerators>=t.value;case r.GeneratorType:return!!t.target&&n.generatorCounts[t.target]>=t.value;case r.ClickCount:return n.clickCount>=t.value;case r.ConsoleOpened:return n.consoleOpened;case r.UpgradeCount:return n.upgradesPurchased>=t.value;case r.ExplorationCount:return n.explorationsCompleted>=t.value;case r.CustomEvent:return!!t.target&&!0===n.customEvents[t.target];default:return!1}}function g(e){switch(e){case o.Generators:return"🏭";case o.Production:return"💰";case o.Clicks:return"👆";case o.Special:return"🎮";default:return"🏆"}}},265:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Stats Modal Styling */\n.stats-modal-content {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .stats-container {\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n    padding: 20px;\n    margin-bottom: 20px;\n  }\n  \n  .stats-section-title {\n    font-size: 1.2rem;\n    color: #333;\n    margin: 0 0 15px 0;\n    padding-bottom: 8px;\n    border-bottom: 2px solid #eaeaea;\n    position: relative;\n  }\n  \n  .stats-section-title::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    bottom: -2px;\n    width: 60px;\n    height: 2px;\n    background-color: #4CAF50;\n  }\n  \n  .stats-row {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 15px;\n    margin-bottom: 20px;\n  }\n  \n  .stat-item {\n    flex: 1 1 calc(50% - 15px);\n    min-width: 200px;\n    background-color: #f9f9f9;\n    border-radius: 8px;\n    padding: 12px 15px;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .stat-item:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);\n  }\n  \n  .stat-label {\n    font-size: 0.9rem;\n    color: #666;\n    margin-bottom: 5px;\n  }\n  \n  .stat-value {\n    font-size: 1.2rem;\n    font-weight: 600;\n    color: #2a9d8f;\n  }\n  \n  .production-details .stat-item {\n    flex: 1 1 calc(33.333% - 10px);\n    min-width: 120px;\n  }\n  \n  .contributions-container {\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n    padding: 20px;\n  }\n  \n  .contributions-list {\n    max-height: 250px;\n    overflow-y: auto;\n    padding-right: 10px;\n  }\n  \n  .contribution-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 12px;\n    border-bottom: 1px solid #f0f0f0;\n    transition: background-color 0.2s ease;\n  }\n  \n  .contribution-item:hover {\n    background-color: #f9f9f9;\n  }\n  \n  .contribution-item:last-child {\n    border-bottom: none;\n  }\n  \n  .contribution-name {\n    font-weight: 500;\n    color: #444;\n  }\n  \n  .contribution-value {\n    color: #2a9d8f;\n    font-weight: 600;\n    text-align: right;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n  }\n  \n  .contribution-percentage {\n    font-size: 0.8rem;\n    color: #777;\n    font-weight: normal;\n    margin-top: 2px;\n  }\n  \n  .empty-contributions {\n    padding: 20px;\n    text-align: center;\n    color: #888;\n    font-style: italic;\n  }\n  \n  /* Responsive adjustments */\n  @media (max-width: 600px) {\n    .stats-row {\n      flex-direction: column;\n    }\n    \n    .stat-item {\n      flex: 1 1 100%;\n    }\n    \n    .production-details .stat-item {\n      flex: 1 1 100%;\n    }\n  }\n  \n  /* Scrollbar styling */\n  .contributions-list::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  .contributions-list::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 4px;\n  }\n  \n  .contributions-list::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 4px;\n  }\n  \n  .contributions-list::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n  }","",{version:3,sources:["webpack://./styles/statsModal.css"],names:[],mappings:"AAAA,wBAAwB;AACxB;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,gBAAgB;IAChB,cAAc;EAChB;;EAEA;IACE,sBAAsB;IACtB,mBAAmB;IACnB,0CAA0C;IAC1C,aAAa;IACb,mBAAmB;EACrB;;EAEA;IACE,iBAAiB;IACjB,WAAW;IACX,kBAAkB;IAClB,mBAAmB;IACnB,gCAAgC;IAChC,kBAAkB;EACpB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,OAAO;IACP,YAAY;IACZ,WAAW;IACX,WAAW;IACX,yBAAyB;EAC3B;;EAEA;IACE,aAAa;IACb,eAAe;IACf,SAAS;IACT,mBAAmB;EACrB;;EAEA;IACE,0BAA0B;IAC1B,gBAAgB;IAChB,yBAAyB;IACzB,kBAAkB;IAClB,kBAAkB;IAClB,yCAAyC;IACzC,qDAAqD;EACvD;;EAEA;IACE,2BAA2B;IAC3B,yCAAyC;EAC3C;;EAEA;IACE,iBAAiB;IACjB,WAAW;IACX,kBAAkB;EACpB;;EAEA;IACE,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;EAChB;;EAEA;IACE,8BAA8B;IAC9B,gBAAgB;EAClB;;EAEA;IACE,sBAAsB;IACtB,mBAAmB;IACnB,0CAA0C;IAC1C,aAAa;EACf;;EAEA;IACE,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;EACrB;;EAEA;IACE,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,kBAAkB;IAClB,gCAAgC;IAChC,sCAAsC;EACxC;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;IAChB,WAAW;EACb;;EAEA;IACE,cAAc;IACd,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,qBAAqB;EACvB;;EAEA;IACE,iBAAiB;IACjB,WAAW;IACX,mBAAmB;IACnB,eAAe;EACjB;;EAEA;IACE,aAAa;IACb,kBAAkB;IAClB,WAAW;IACX,kBAAkB;EACpB;;EAEA,2BAA2B;EAC3B;IACE;MACE,sBAAsB;IACxB;;IAEA;MACE,cAAc;IAChB;;IAEA;MACE,cAAc;IAChB;EACF;;EAEA,sBAAsB;EACtB;IACE,UAAU;EACZ;;EAEA;IACE,mBAAmB;IACnB,kBAAkB;EACpB;;EAEA;IACE,mBAAmB;IACnB,kBAAkB;EACpB;;EAEA;IACE,mBAAmB;EACrB",sourcesContent:["/* Stats Modal Styling */\n.stats-modal-content {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .stats-container {\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n    padding: 20px;\n    margin-bottom: 20px;\n  }\n  \n  .stats-section-title {\n    font-size: 1.2rem;\n    color: #333;\n    margin: 0 0 15px 0;\n    padding-bottom: 8px;\n    border-bottom: 2px solid #eaeaea;\n    position: relative;\n  }\n  \n  .stats-section-title::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    bottom: -2px;\n    width: 60px;\n    height: 2px;\n    background-color: #4CAF50;\n  }\n  \n  .stats-row {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 15px;\n    margin-bottom: 20px;\n  }\n  \n  .stat-item {\n    flex: 1 1 calc(50% - 15px);\n    min-width: 200px;\n    background-color: #f9f9f9;\n    border-radius: 8px;\n    padding: 12px 15px;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .stat-item:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);\n  }\n  \n  .stat-label {\n    font-size: 0.9rem;\n    color: #666;\n    margin-bottom: 5px;\n  }\n  \n  .stat-value {\n    font-size: 1.2rem;\n    font-weight: 600;\n    color: #2a9d8f;\n  }\n  \n  .production-details .stat-item {\n    flex: 1 1 calc(33.333% - 10px);\n    min-width: 120px;\n  }\n  \n  .contributions-container {\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n    padding: 20px;\n  }\n  \n  .contributions-list {\n    max-height: 250px;\n    overflow-y: auto;\n    padding-right: 10px;\n  }\n  \n  .contribution-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 12px;\n    border-bottom: 1px solid #f0f0f0;\n    transition: background-color 0.2s ease;\n  }\n  \n  .contribution-item:hover {\n    background-color: #f9f9f9;\n  }\n  \n  .contribution-item:last-child {\n    border-bottom: none;\n  }\n  \n  .contribution-name {\n    font-weight: 500;\n    color: #444;\n  }\n  \n  .contribution-value {\n    color: #2a9d8f;\n    font-weight: 600;\n    text-align: right;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n  }\n  \n  .contribution-percentage {\n    font-size: 0.8rem;\n    color: #777;\n    font-weight: normal;\n    margin-top: 2px;\n  }\n  \n  .empty-contributions {\n    padding: 20px;\n    text-align: center;\n    color: #888;\n    font-style: italic;\n  }\n  \n  /* Responsive adjustments */\n  @media (max-width: 600px) {\n    .stats-row {\n      flex-direction: column;\n    }\n    \n    .stat-item {\n      flex: 1 1 100%;\n    }\n    \n    .production-details .stat-item {\n      flex: 1 1 100%;\n    }\n  }\n  \n  /* Scrollbar styling */\n  .contributions-list::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  .contributions-list::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 4px;\n  }\n  \n  .contributions-list::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 4px;\n  }\n  \n  .contributions-list::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n  }"],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),n.push(A))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},374:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,'/* Upgrades styling */\n.upgrades-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    gap: 10px;\n    padding: 10px;\n  }\n  \n  .upgrade-icon-container {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  /* Enhanced styles for upgrade icons */\n.upgrade-icon {\n  width: 60px;\n  height: 60px;\n  border-radius: 8px;\n  background: linear-gradient(135deg, #f5f7fa, #e0e4e8);\n  border: 2px solid #d0d5db;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n\n.upgrade-icon:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n  border-color: #b8c4d0;\n}\n\n.upgrade-icon:active {\n  transform: translateY(1px);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.upgrade-icon-img {\n  max-width: 80%;\n  max-height: 80%;\n  object-fit: contain;\n  display: block;\n}\n\n.upgrade-icon-emoji {\n  font-size: 28px;\n  line-height: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n/* Make sure the container is properly sized and positioned */\n.upgrade-icon-container {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 6px;\n}\n\n/* Category styling */\n.upgrade-icon-container[data-category="click"] .upgrade-icon {\n  background: linear-gradient(135deg, #e3f2fd, #bbdefb);\n  border-color: #90caf9;\n}\n\n.upgrade-icon-container[data-category="generator"] .upgrade-icon {\n  background: linear-gradient(135deg, #e8f5e9, #c8e6c9);\n  border-color: #a5d6a7;\n}\n\n.upgrade-icon-container[data-category="global"] .upgrade-icon {\n  background: linear-gradient(135deg, #fff3e0, #ffe0b2);\n  border-color: #ffcc80;\n}\n\n/* Affordability styling */\n.upgrade-icon-container.affordable .upgrade-icon {\n  border-color: #4caf50;\n  box-shadow: 0 0 8px rgba(76, 175, 80, 0.4);\n}\n\n.upgrade-icon-container.not-affordable .upgrade-icon {\n  opacity: 0.7;\n  filter: grayscale(30%);\n}\n\n/* Purchase feedback animations */\n.purchase-success .upgrade-icon {\n  animation: pulse 0.3s ease;\n}\n\n.purchase-error .upgrade-icon {\n  animation: shake 0.5s ease;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  20%, 60% { transform: translateX(-5px); }\n  40%, 80% { transform: translateX(5px); }\n}\n\n/* Empty state styling */\n.empty-upgrades {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 20px;\n  color: #aaa;\n  font-style: italic;\n}\n  \n  /* Category styling */\n  .upgrade-icon-container[data-category="click"] .upgrade-icon {\n    background: linear-gradient(135deg, #e3f2fd, #bbdefb);\n    border-color: #90caf9;\n  }\n  \n  .upgrade-icon-container[data-category="generator"] .upgrade-icon {\n    background: linear-gradient(135deg, #e8f5e9, #c8e6c9);\n    border-color: #a5d6a7;\n  }\n  \n  .upgrade-icon-container[data-category="global"] .upgrade-icon {\n    background: linear-gradient(135deg, #fff3e0, #ffe0b2);\n    border-color: #ffcc80;\n  }\n  \n  /* Affordability styling */\n  .upgrade-icon-container.affordable .upgrade-icon {\n    border-color: #4caf50;\n    box-shadow: 0 0 8px rgba(76, 175, 80, 0.4);\n  }\n  \n  .upgrade-icon-container.not-affordable .upgrade-icon {\n    opacity: 0.7;\n    filter: grayscale(30%);\n  }\n  \n  /* Tooltip adjustments for upgrades */\n  .tooltip-upgrade {\n    padding: 10px;\n    min-width: 220px;\n  }\n  \n  .tooltip-title {\n    font-weight: bold;\n    font-size: 16px;\n    margin-bottom: 3px;\n  }\n  \n  .tooltip-category {\n    font-size: 12px;\n    opacity: 0.7;\n    margin-left: 4px;\n  }\n  \n  .tooltip-description {\n    font-size: 14px;\n    margin: 6px 0;\n  }\n  \n  .tooltip-flavor {\n    font-style: italic;\n    font-size: 12px;\n    color: #777;\n    margin: 6px 0;\n    border-left: 3px solid #4CAF50;\n    padding-left: 8px;\n  }\n  \n  .tooltip-cost {\n    font-weight: 600;\n    color: #4CAF50;\n    margin-top: 8px;\n  }\n  \n  /* Category colors for tooltips */\n  .tooltip-category-click {\n    border-top: 3px solid #2196F3;\n  }\n  \n  .tooltip-category-generator {\n    border-top: 3px solid #4CAF50;\n  }\n  \n  .tooltip-category-global {\n    border-top: 3px solid #FF9800;\n  }\n  \n  /* Empty state */\n  .empty-upgrades {\n    grid-column: 1 / -1;\n    text-align: center;\n    padding: 20px;\n    color: #aaa;\n    font-style: italic;\n  }\n  \n  /* New indicator */\n  .has-new-upgrades .panel-header h2::after {\n    content: "";\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    background-color: #ff5722;\n    border-radius: 50%;\n    margin-left: 8px;\n    animation: pulse 1.5s infinite;\n  }',"",{version:3,sources:["webpack://./styles/upgrades.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;IACI,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;EACrB;;EAEA,sCAAsC;AACxC;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,qDAAqD;EACrD,yBAAyB;EACzB,wCAAwC;EACxC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,yBAAyB;EACzB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,2BAA2B;EAC3B,yCAAyC;EACzC,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;EAC1B,wCAAwC;AAC1C;;AAEA;EACE,cAAc;EACd,eAAe;EACf,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;AACd;;AAEA,6DAA6D;AAC7D;EACE,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;AACb;;AAEA,qBAAqB;AACrB;EACE,qDAAqD;EACrD,qBAAqB;AACvB;;AAEA;EACE,qDAAqD;EACrD,qBAAqB;AACvB;;AAEA;EACE,qDAAqD;EACrD,qBAAqB;AACvB;;AAEA,0BAA0B;AAC1B;EACE,qBAAqB;EACrB,0CAA0C;AAC5C;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;;AAEA,iCAAiC;AACjC;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,KAAK,mBAAmB,EAAE;EAC1B,MAAM,qBAAqB,EAAE;EAC7B,OAAO,mBAAmB,EAAE;AAC9B;;AAEA;EACE,WAAW,wBAAwB,EAAE;EACrC,WAAW,2BAA2B,EAAE;EACxC,WAAW,0BAA0B,EAAE;AACzC;;AAEA,wBAAwB;AACxB;EACE,mBAAmB;EACnB,kBAAkB;EAClB,aAAa;EACb,WAAW;EACX,kBAAkB;AACpB;;EAEE,qBAAqB;EACrB;IACE,qDAAqD;IACrD,qBAAqB;EACvB;;EAEA;IACE,qDAAqD;IACrD,qBAAqB;EACvB;;EAEA;IACE,qDAAqD;IACrD,qBAAqB;EACvB;;EAEA,0BAA0B;EAC1B;IACE,qBAAqB;IACrB,0CAA0C;EAC5C;;EAEA;IACE,YAAY;IACZ,sBAAsB;EACxB;;EAEA,qCAAqC;EACrC;IACE,aAAa;IACb,gBAAgB;EAClB;;EAEA;IACE,iBAAiB;IACjB,eAAe;IACf,kBAAkB;EACpB;;EAEA;IACE,eAAe;IACf,YAAY;IACZ,gBAAgB;EAClB;;EAEA;IACE,eAAe;IACf,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,eAAe;IACf,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,iBAAiB;EACnB;;EAEA;IACE,gBAAgB;IAChB,cAAc;IACd,eAAe;EACjB;;EAEA,iCAAiC;EACjC;IACE,6BAA6B;EAC/B;;EAEA;IACE,6BAA6B;EAC/B;;EAEA;IACE,6BAA6B;EAC/B;;EAEA,gBAAgB;EAChB;IACE,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,WAAW;IACX,kBAAkB;EACpB;;EAEA,kBAAkB;EAClB;IACE,WAAW;IACX,qBAAqB;IACrB,UAAU;IACV,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,gBAAgB;IAChB,8BAA8B;EAChC",sourcesContent:['/* Upgrades styling */\n.upgrades-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    gap: 10px;\n    padding: 10px;\n  }\n  \n  .upgrade-icon-container {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  /* Enhanced styles for upgrade icons */\n.upgrade-icon {\n  width: 60px;\n  height: 60px;\n  border-radius: 8px;\n  background: linear-gradient(135deg, #f5f7fa, #e0e4e8);\n  border: 2px solid #d0d5db;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n\n.upgrade-icon:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n  border-color: #b8c4d0;\n}\n\n.upgrade-icon:active {\n  transform: translateY(1px);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.upgrade-icon-img {\n  max-width: 80%;\n  max-height: 80%;\n  object-fit: contain;\n  display: block;\n}\n\n.upgrade-icon-emoji {\n  font-size: 28px;\n  line-height: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n/* Make sure the container is properly sized and positioned */\n.upgrade-icon-container {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 6px;\n}\n\n/* Category styling */\n.upgrade-icon-container[data-category="click"] .upgrade-icon {\n  background: linear-gradient(135deg, #e3f2fd, #bbdefb);\n  border-color: #90caf9;\n}\n\n.upgrade-icon-container[data-category="generator"] .upgrade-icon {\n  background: linear-gradient(135deg, #e8f5e9, #c8e6c9);\n  border-color: #a5d6a7;\n}\n\n.upgrade-icon-container[data-category="global"] .upgrade-icon {\n  background: linear-gradient(135deg, #fff3e0, #ffe0b2);\n  border-color: #ffcc80;\n}\n\n/* Affordability styling */\n.upgrade-icon-container.affordable .upgrade-icon {\n  border-color: #4caf50;\n  box-shadow: 0 0 8px rgba(76, 175, 80, 0.4);\n}\n\n.upgrade-icon-container.not-affordable .upgrade-icon {\n  opacity: 0.7;\n  filter: grayscale(30%);\n}\n\n/* Purchase feedback animations */\n.purchase-success .upgrade-icon {\n  animation: pulse 0.3s ease;\n}\n\n.purchase-error .upgrade-icon {\n  animation: shake 0.5s ease;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  20%, 60% { transform: translateX(-5px); }\n  40%, 80% { transform: translateX(5px); }\n}\n\n/* Empty state styling */\n.empty-upgrades {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 20px;\n  color: #aaa;\n  font-style: italic;\n}\n  \n  /* Category styling */\n  .upgrade-icon-container[data-category="click"] .upgrade-icon {\n    background: linear-gradient(135deg, #e3f2fd, #bbdefb);\n    border-color: #90caf9;\n  }\n  \n  .upgrade-icon-container[data-category="generator"] .upgrade-icon {\n    background: linear-gradient(135deg, #e8f5e9, #c8e6c9);\n    border-color: #a5d6a7;\n  }\n  \n  .upgrade-icon-container[data-category="global"] .upgrade-icon {\n    background: linear-gradient(135deg, #fff3e0, #ffe0b2);\n    border-color: #ffcc80;\n  }\n  \n  /* Affordability styling */\n  .upgrade-icon-container.affordable .upgrade-icon {\n    border-color: #4caf50;\n    box-shadow: 0 0 8px rgba(76, 175, 80, 0.4);\n  }\n  \n  .upgrade-icon-container.not-affordable .upgrade-icon {\n    opacity: 0.7;\n    filter: grayscale(30%);\n  }\n  \n  /* Tooltip adjustments for upgrades */\n  .tooltip-upgrade {\n    padding: 10px;\n    min-width: 220px;\n  }\n  \n  .tooltip-title {\n    font-weight: bold;\n    font-size: 16px;\n    margin-bottom: 3px;\n  }\n  \n  .tooltip-category {\n    font-size: 12px;\n    opacity: 0.7;\n    margin-left: 4px;\n  }\n  \n  .tooltip-description {\n    font-size: 14px;\n    margin: 6px 0;\n  }\n  \n  .tooltip-flavor {\n    font-style: italic;\n    font-size: 12px;\n    color: #777;\n    margin: 6px 0;\n    border-left: 3px solid #4CAF50;\n    padding-left: 8px;\n  }\n  \n  .tooltip-cost {\n    font-weight: 600;\n    color: #4CAF50;\n    margin-top: 8px;\n  }\n  \n  /* Category colors for tooltips */\n  .tooltip-category-click {\n    border-top: 3px solid #2196F3;\n  }\n  \n  .tooltip-category-generator {\n    border-top: 3px solid #4CAF50;\n  }\n  \n  .tooltip-category-global {\n    border-top: 3px solid #FF9800;\n  }\n  \n  /* Empty state */\n  .empty-upgrades {\n    grid-column: 1 / -1;\n    text-align: center;\n    padding: 20px;\n    color: #aaa;\n    font-style: italic;\n  }\n  \n  /* New indicator */\n  .has-new-upgrades .panel-header h2::after {\n    content: "";\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    background-color: #ff5722;\n    border-radius: 50%;\n    margin-left: 8px;\n    animation: pulse 1.5s infinite;\n  }'],sourceRoot:""}]);const s=i},379:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,".resource-display {\n  text-align: center;\n  padding: 16px;\n  background: linear-gradient(to bottom, #ffffff, #f5f9f5);\n  border-radius: 8px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);\n  margin-bottom: 16px;\n  border: 1px solid #d0e0d0;\n  position: relative;\n  overflow: hidden;\n  min-height: 80px; /* Ensure minimum height */\n  width: 100%; /* Ensure it takes full width */\n  display: block; /* Ensure it's displayed as a block */\n}\n\n/* Make sure count is visible and properly sized */\n.resource-count {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  position: relative;\n}\n\n/* Style for the main number value */\n.resource-count .number-value {\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: #2a9d8f; /* Use your game's primary color */\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.05);\n  text-align: center;\n  display: block;\n  width: 100%;\n}\n\n/* Style for the full number name + \"bufos\" label */\n.resource-count .number-label {\n  font-size: 0.9rem;\n  color: #666;\n  font-weight: normal;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  display: block;\n  text-align: center;\n  margin-top: 4px;\n}\n\n\n/* Make sure production rate is visible */\n.production-rate {\n  font-size: 1rem;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 4px 12px;\n  border-radius: 20px;\n  display: inline-block;\n  margin-top: 8px;\n}\n","",{version:3,sources:["webpack://./styles/resourceDisplay.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,aAAa;EACb,wDAAwD;EACxD,kBAAkB;EAClB,0CAA0C;EAC1C,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB,EAAE,0BAA0B;EAC5C,WAAW,EAAE,+BAA+B;EAC5C,cAAc,EAAE,qCAAqC;AACvD;;AAEA,kDAAkD;AAClD;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,WAAW;EACX,kBAAkB;AACpB;;AAEA,oCAAoC;AACpC;EACE,iBAAiB;EACjB,iBAAiB;EACjB,cAAc,EAAE,kCAAkC;EAClD,4CAA4C;EAC5C,kBAAkB;EAClB,cAAc;EACd,WAAW;AACb;;AAEA,mDAAmD;AACnD;EACE,iBAAiB;EACjB,WAAW;EACX,mBAAmB;EACnB,yBAAyB;EACzB,mBAAmB;EACnB,cAAc;EACd,kBAAkB;EAClB,eAAe;AACjB;;;AAGA,yCAAyC;AACzC;EACE,eAAe;EACf,WAAW;EACX,yBAAyB;EACzB,iBAAiB;EACjB,mBAAmB;EACnB,qBAAqB;EACrB,eAAe;AACjB",sourcesContent:[".resource-display {\n  text-align: center;\n  padding: 16px;\n  background: linear-gradient(to bottom, #ffffff, #f5f9f5);\n  border-radius: 8px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);\n  margin-bottom: 16px;\n  border: 1px solid #d0e0d0;\n  position: relative;\n  overflow: hidden;\n  min-height: 80px; /* Ensure minimum height */\n  width: 100%; /* Ensure it takes full width */\n  display: block; /* Ensure it's displayed as a block */\n}\n\n/* Make sure count is visible and properly sized */\n.resource-count {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  position: relative;\n}\n\n/* Style for the main number value */\n.resource-count .number-value {\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: #2a9d8f; /* Use your game's primary color */\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.05);\n  text-align: center;\n  display: block;\n  width: 100%;\n}\n\n/* Style for the full number name + \"bufos\" label */\n.resource-count .number-label {\n  font-size: 0.9rem;\n  color: #666;\n  font-weight: normal;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  display: block;\n  text-align: center;\n  margin-top: 4px;\n}\n\n\n/* Make sure production rate is visible */\n.production-rate {\n  font-size: 1rem;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 4px 12px;\n  border-radius: 20px;\n  display: inline-block;\n  margin-top: 8px;\n}\n"],sourceRoot:""}]);const s=i},393:(e,n,t)=>{t.d(n,{b:()=>c});var o=t(128),r=t(889),a=t(628);function i(){const e=Object.keys(r.mT).length>0;return e||a.R8("Creating default state with empty generators data. Data may not be loaded yet."),{resources:{bufos:0,totalBufos:0,baseClickPower:1,clickPower:1,clickMultiplier:1,productionMultiplier:1},generators:e?structuredClone(r.mT):{},explorer:structuredClone(o.HZ),upgrades:{purchased:[],available:[]},achievements:{unlocked:[],progress:{},clickCount:0,customEvents:{}},gameSettings:{lastTick:Date.now(),lastSaved:Date.now(),autoSave:!0,version:"1.0.0"}}}class s{constructor(){this.subscribers=[],this.batchUpdating=!1,this.pendingUpdates=[],this.state=i()}static getInstance(){return s.instance||(s.instance=new s),s.instance}getState(){return structuredClone(this.state)}setState(e){const n=this.state;this.state=function(e,n){const t=Object.assign({},e);return n.resources&&(t.resources=Object.assign(Object.assign({},t.resources),n.resources)),n.generators&&(t.generators=Object.assign({},t.generators),Object.entries(n.generators).forEach((([e,n])=>{const o=e;n&&t.generators[o]&&(t.generators[o]=Object.assign(Object.assign({},t.generators[o]),n))}))),n.explorer&&(t.explorer=Object.assign(Object.assign({},t.explorer),n.explorer)),n.upgrades&&(t.upgrades=Object.assign(Object.assign(Object.assign({},t.upgrades),n.upgrades),{purchased:n.upgrades.purchased?[...n.upgrades.purchased]:[...t.upgrades.purchased],available:n.upgrades.available?[...n.upgrades.available]:[...t.upgrades.available]})),n.achievements&&(t.achievements=Object.assign(Object.assign(Object.assign({},t.achievements),n.achievements),{unlocked:n.achievements.unlocked?[...n.achievements.unlocked]:[...t.achievements.unlocked],progress:n.achievements.progress?Object.assign({},n.achievements.progress):Object.assign({},t.achievements.progress),customEvents:n.achievements.customEvents?Object.assign({},n.achievements.customEvents):Object.assign({},t.achievements.customEvents)})),n.gameSettings&&(t.gameSettings=Object.assign(Object.assign({},t.gameSettings),n.gameSettings)),function(e){const n=e.resources.baseClickPower*e.resources.clickMultiplier;return Object.assign(Object.assign({},e),{resources:Object.assign(Object.assign({},e.resources),{clickPower:n})})}(t)}(n,e),this.batchUpdating?this.pendingUpdates.push(e):this.notifySubscribers(n)}startBatch(){this.batchUpdating=!0,this.pendingUpdates=[]}endBatch(){if(this.batchUpdating&&(this.batchUpdating=!1,this.pendingUpdates.length>0)){const e=structuredClone(this.state);this.notifySubscribers(e),this.pendingUpdates=[]}}subscribe(e){return this.subscribers.push(e),()=>{this.unsubscribe(e)}}unsubscribe(e){const n=this.subscribers.indexOf(e);-1!==n&&this.subscribers.splice(n,1)}resetState(){const e=this.state;this.state=i(),this.notifySubscribers(e)}loadState(e){if(!((n=e)&&"object"==typeof n&&n.resources&&n.generators&&n.explorer&&n.upgrades&&n.gameSettings&&["bufos","totalBufos","clickPower","clickMultiplier","productionMultiplier"].every((e=>"number"==typeof n.resources[e]))&&Array.isArray(n.upgrades.purchased)&&Array.isArray(n.upgrades.available)&&["lastSaved","lastTick","version"].every((e=>void 0!==n.gameSettings[e]))))return!1;var n;const t=this.state;return this.state=e,this.notifySubscribers(t),!0}notifySubscribers(e){const n=this.getState();for(const t of this.subscribers)try{t(n,e)}catch(e){console.error("Error in state change subscriber:",e)}}}function c(){return s.getInstance()}},417:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},437:(e,n,t)=>{t.d(n,{Q:()=>j});var o=t(393),r=t(794),a=t(634),i=t(217),s=t(628);class c{constructor(e={}){this.element=null,this.id=null,this.initialized=!1,this.eventHandlers=new Map,this.stateUnsubscribers=[],this.eventUnsubscribers=[],this.id=e.id||null,e.element?this.element=e.element:e.id?(this.element=document.getElementById(e.id),this.element||(this.element=this.createElement(e.tagName||"div",{id:e.id,className:e.className}))):this.element=this.createElement(e.tagName||"div",{className:e.className}),this.element&&e.className&&!e.element&&this.addClass(e.className),e.template&&this.element&&this.setContent(e.template)}init(){if(!this.initialized)try{this.setup(),this.initialized=!0}catch(e){s.z3(`Error initializing component ${this.id||"unnamed"}:`,e)}}setup(){}render(){return""}update(e){}setContent(e,n={replace:!0}){this.element&&("string"==typeof e?n.replace?this.element.innerHTML=e:n.append&&(this.element.innerHTML+=e):n.replace?(this.element.innerHTML="",this.element.appendChild(e)):n.append&&this.element.appendChild(e))}createElement(e,n={}){const t=document.createElement(e);return n.id&&(t.id=n.id),n.className&&(t.className=n.className),t}addClass(e){if(!this.element)return;const n=e.split(" ");this.element.classList.add(...n)}removeClass(e){if(!this.element)return;const n=e.split(" ");this.element.classList.remove(...n)}toggleClass(e,n){this.element&&this.element.classList.toggle(e,n)}addEventListener(e,n){if(!this.element)return;this.eventHandlers.has(e)||this.eventHandlers.set(e,new Set);const t=this.eventHandlers.get(e);t.has(n)||(t.add(n),this.element.addEventListener(e,n))}removeEventListener(e,n){if(this.element&&(this.element.removeEventListener(e,n),this.eventHandlers.has(e))){const t=this.eventHandlers.get(e);t.delete(n),0===t.size&&this.eventHandlers.delete(e)}}connectToState(e,n){const t=e((0,o.b)().getState());n(t);const r=(0,o.b)().subscribe(((t,o)=>{const r=e(t),a=e(o);JSON.stringify(r)!==JSON.stringify(a)&&n(r)}));this.stateUnsubscribers.push(r)}subscribeToEvent(e,n){(0,r.J)().on(e,n),this.eventUnsubscribers.push((()=>{(0,r.J)().off(e,n)}))}getElement(){return this.element}getId(){return this.id}destroy(){this.eventHandlers.forEach(((e,n)=>{e.forEach((e=>{this.element&&this.element.removeEventListener(n,e)}))})),this.eventHandlers.clear(),this.stateUnsubscribers.forEach((e=>e())),this.stateUnsubscribers=[],this.eventUnsubscribers.forEach((e=>e())),this.eventUnsubscribers=[],this.element&&(this.element.innerHTML=""),this.initialized=!1}}function l(e,n=2){if(!Number.isFinite(e))return 0;const t=Math.pow(10,n);return Math.round(e*t)/t}function A(e,n=1){if(!Number.isFinite(e))return"0";if(0===e)return"0";const t=Math.abs(e);if(t<1e3)return l(e,n).toLocaleString();const o=["","K","M","B","T","Qa","Qi","Sx","Sp","Oc","No","Dc"],r=Math.min(Math.floor(Math.log10(t)/3),o.length-1);return`${l(e/Math.pow(10,3*r),n)}${o[r]}`}var d=t(56);class u extends c{constructor(e={}){super(Object.assign({id:e.id||"resource-display",className:e.className||"resource-display"},e)),this.lastBufos=0,this.bufoCountElement=null,this.productionRateElement=null,this.showProductionRate=!1!==e.showProductionRate}setup(){if(this.element=document.getElementById(this.id||""),!this.element){console.error(`ResourceDisplay: Element with ID "${this.id}" not found`),this.element=document.createElement("div"),this.element.id=this.id||"",this.element.className="resource-display";const e=document.querySelector(".left-column");e?e.prepend(this.element):document.body.appendChild(this.element)}this.element.style.display="block",this.element.style.visibility="visible",this.element.style.minHeight="80px",this.element.style.width="100%",this.bufoCountElement=this.element.querySelector(".resource-count"),this.productionRateElement=this.element.querySelector(".production-rate"),this.bufoCountElement||(this.bufoCountElement=document.createElement("div"),this.bufoCountElement.className="resource-count",this.element.appendChild(this.bufoCountElement),this.bufoCountElement.innerHTML='\n        <span class="number-value">0</span>\n        <span class="number-label">Bufos</span>\n      '),!this.productionRateElement&&this.showProductionRate&&(this.productionRateElement=document.createElement("div"),this.productionRateElement.className="production-rate",this.element.appendChild(this.productionRateElement),this.productionRateElement.textContent="0/sec"),this.connectToState((e=>{const n=(0,d.TY)(e);return{bufos:n.bufos,totalProduction:n.productionRate}}),this.handleStateChange.bind(this)),this.subscribeToEvent("productionChanged",(e=>{this.productionRateElement&&this.updateProductionRate(e.totalProduction)}))}handleStateChange(e){const{bufos:n,totalProduction:t}=e;this.bufoCountElement&&this.updateBufoCount(n),this.productionRateElement&&this.showProductionRate&&this.updateProductionRate(t)}updateBufoCount(e){if(!this.bufoCountElement)return;const n=function(e){if(!Number.isFinite(e))return"0";if(0===e)return"0";const n=Math.abs(e);if(n<1e3)return Math.floor(e).toLocaleString();const t=Math.min(Math.floor(Math.log10(n)/3),11);return`${l(e/Math.pow(10,3*t),3).toFixed(3)}`}(Math.floor(e)),t=function(e){if(!Number.isFinite(e))return"";if(0===e)return"";const n=Math.abs(e);if(n<1e3)return"";const t=["","Thousand","Million","Billion","Trillion","Quadrillion","Quintillion","Sextillion","Septillion","Octillion","Nonillion","Decillion"];return t[Math.min(Math.floor(Math.log10(n)/3),t.length-1)]}(Math.floor(e));this.bufoCountElement.innerHTML=`\n      <span class="number-value">${n}</span>\n      <span class="number-label">${t} Bufos</span>\n    `,this.lastBufos,this.lastBufos=e}updateProductionRate(e){this.productionRateElement&&(this.productionRateElement.textContent=`${A(e)} bufos/sec`,this.productionRateElement.classList.add("production-updated"),setTimeout((()=>{this.productionRateElement&&this.productionRateElement.classList.remove("production-updated")}),300))}render(){return`\n      <div class="resource-count">\n        <span class="number-value">0</span>\n        <span class="number-label">Bufos</span>\n      </div>\n      ${this.showProductionRate?'<div class="production-rate">0/sec</div>':""}\n    `}update(e){e&&(void 0!==e.bufos&&this.bufoCountElement&&this.updateBufoCount(e.bufos),void 0!==e.productionRate&&this.productionRateElement&&this.updateProductionRate(e.productionRate))}}const p={linear:e=>e,easeIn:e=>e*e,easeOut:e=>e*(2-e),easeInOut:e=>e<.5?2*e*e:(4-2*e)*e-1,elastic:e=>Math.pow(2,-10*e)*Math.sin((e-.075)*(2*Math.PI)/.3)+1,bounce:e=>{if(e<1/2.75)return 7.5625*e*e;if(e<2/2.75){const n=e-1.5/2.75;return 7.5625*n*n+.75}if(e<2.5/2.75){const n=e-2.25/2.75;return 7.5625*n*n+.9375}{const n=e-2.625/2.75;return 7.5625*n*n+.984375}}};function m(e,n,t={}){return new Promise((o=>{const r=performance.now(),a=t.easing||p.linear;function i(){let i;const s=c=>{const l=c-r,A=Math.min(l/e,1),d=a(A);n(d),t.onUpdate&&t.onUpdate(d),A<1?i=requestAnimationFrame(s):(t.onComplete&&t.onComplete(),o())};i=requestAnimationFrame(s)}t.delay&&t.delay>0?setTimeout((()=>i()),t.delay):i()}))}class g extends c{constructor(e={}){super(Object.assign({id:e.id||"frog-display",className:e.className||"frog-display"},e)),this.bufoImage=null,this.recentClicks=[],this.clearClicksTimer=null,this.clickCooldown=!1,this.imagePath=e.imagePath||"./assets/images/bufo.png",this.maxComboClicks=e.maxComboClicks||5,this.comboTimeout=e.comboTimeout||1e3}setup(){this.setContent(this.render()),this.element&&(this.bufoImage=this.element.querySelector(".bufo-image")),this.element&&this.element.addEventListener("click",this.handleClick.bind(this)),this.clearClicksTimer=window.setInterval((()=>{this.clearOldClicks()}),1e3)}handleClick(e){var n;if(e.preventDefault(),this.clickCooldown)return;this.clickCooldown=!0,setTimeout((()=>{this.clickCooldown=!1}),50),this.recentClicks.push(Date.now()),this.recentClicks.length>this.maxComboClicks&&this.recentClicks.shift();const t=null===(n=this.element)||void 0===n?void 0:n.getBoundingClientRect();if(!t)return;const o=e.clientX-t.left,r=e.clientY-t.top,i=(0,a.a)().click();this.createClickEffects(o,r,i)}createClickEffects(e,n,t){this.bufoImage&&function(e,n=1.05,t=600){if(!e)return Promise.reject(new Error("Element is required"));if("true"===e.dataset.animating)return Promise.resolve();e.dataset.animating="true",e.style.transform="";const o=t/2;m(o,(t=>{const o=1+(n-1)*t;e.style.transform=`scale(${o})`}),{easing:p.easeOut,onComplete:()=>{m(o,(t=>{const o=n-(n-1)*t;e.style.transform=`scale(${o})`}),{easing:p.easeIn,onComplete:()=>{e.style.transform="",e.dataset.animating="false"}})}})}(this.bufoImage,.95,100),this.createClickIndicator(e,n),this.createFloatingNumber(e,n,t)}createFloatingNumber(e,n,t){const o=document.createElement("div");o.classList.add("floating-number"),t.isCombo&&o.classList.add("combo");const r=document.createElement("span");r.classList.add("value"),r.textContent=`+${t.bufosGained.toFixed(1)}`,o.appendChild(r),o.style.cssText=`\n      position: absolute;\n      font-weight: bold;\n      font-size: ${t.isCombo?"1.4em":"1.2em"};\n      color: ${t.isCombo?"#FFD700":"#FFFFFF"};\n      text-shadow: 0 1px 2px rgba(0,0,0,0.8);\n      pointer-events: none;\n      z-index: 1000;\n    `,t.isCombo&&(o.style.cssText+="\n        background-color: rgba(76, 175, 80, 0.2);\n        padding: 4px 8px;\n        border-radius: 10px;\n      ");const a=30*Math.random()-15,i=20*Math.random()-10;o.style.left=`${e+a}px`,o.style.top=`${n+i}px`,this.element&&this.element.appendChild(o);let s=0;const c=n+i,l=e+a,A=c-(50+20*Math.random()),d=l+(40*Math.random()-20),u=()=>{if(s+=16/1500,s>=1)return void(o.parentNode&&o.parentNode.removeChild(o));const e=1-Math.pow(1-s,3),n=c+(A-c)*e,t=s<.5?2*s*s:1-Math.pow(-2*s+2,2)/2,r=l+(d-l)*t,a=s<.7?1:1-(s-.7)/.3;let i=1;i=s<.2?.7+s/.2*.5:1.2-(s-.2)/.8*.4,o.style.transform=`translate(${r-l}px, ${n-c}px) scale(${i})`,o.style.opacity=a.toString(),requestAnimationFrame(u)};requestAnimationFrame(u)}createClickIndicator(e,n){var t;let o=null===(t=this.element)||void 0===t?void 0:t.querySelector(".click-indicator-container");if(!o&&this.element&&(o=document.createElement("div"),o.classList.add("click-indicator-container"),this.element.appendChild(o)),!o)return;const r=document.createElement("div");r.classList.add("click-indicator"),r.style.left=`${e}px`,r.style.top=`${n}px`,o.appendChild(r),setTimeout((()=>{r.parentNode===o&&o.removeChild(r)}),1e3)}clearOldClicks(){const e=Date.now();this.recentClicks=this.recentClicks.filter((n=>e-n<this.comboTimeout))}render(){return`\n      <img src="${this.imagePath}" alt="Bufo" class="bufo-image">\n      <div class="click-indicator-container"></div>\n    `}destroy(){null!==this.clearClicksTimer&&(clearInterval(this.clearClicksTimer),this.clearClicksTimer=null),super.destroy()}}class h extends c{constructor(e={}){super(e),this.children=[]}addChild(e,n){return this.children.push({component:e,data:n}),this.element&&e.getElement()&&this.element.appendChild(e.getElement()),e.init(),e}removeChild(e){const n="string"==typeof e?this.children.findIndex((n=>n.component.getId()===e)):this.children.findIndex((n=>n.component===e));if(-1!==n){const{component:e}=this.children[n],t=e.getElement();return t&&t.parentNode&&t.parentNode.removeChild(t),e.destroy(),this.children.splice(n,1),!0}return!1}getChildren(){return[...this.children]}getChildById(e){const n=this.children.find((n=>n.component.getId()===e));return n?n.component:null}clearChildren(){[...this.children].forEach((e=>{this.removeChild(e.component)}))}destroy(){this.clearChildren(),super.destroy()}renderChildren(){this.element&&(this.element.innerHTML="",this.children.forEach((({component:e})=>{const n=e.getElement();n&&this.element.appendChild(n)})))}}var f=t(889);let C=null,b=0,E=0,B=!1;function v(e,n){b=n.clientX,E=n.clientY,null!==C&&(clearTimeout(C),C=null),C=window.setTimeout((()=>{y();const t=document.createElement("div");t.id="game-tooltip",t.classList.add("game-tooltip"),t.innerHTML=e,t.style.left=`${n.clientX+15}px`,t.style.top=`${n.clientY+15}px`,document.body.appendChild(t),setTimeout((()=>{t.classList.add("visible")}),10);const o=t.getBoundingClientRect(),r=window.innerWidth,a=window.innerHeight;o.right>r&&(t.style.left=n.clientX-o.width-15+"px"),o.bottom>a&&(t.style.top=n.clientY-o.height-15+"px"),B=!0,document.addEventListener("mousemove",x),C=null}),300)}function x(e){if(!B)return;const n=Math.abs(e.clientX-b),t=Math.abs(e.clientY-E);(n>5||t>5)&&y()}function y(){document.removeEventListener("mousemove",x),B=!1,null!==C&&(clearTimeout(C),C=null);const e=document.getElementById("game-tooltip");e&&(e.classList.remove("visible"),setTimeout((()=>{e.parentNode&&e.parentNode.removeChild(e)}),300))}function w(e){b=e.clientX,E=e.clientY}class k extends c{constructor(e={}){super(e),this.generator=null,this.productionElement=null,this.countElement=null}setup(){this.setContent(this.render()),this.element&&(this.productionElement=this.element.querySelector(".production-value"),this.countElement=this.element.querySelector(".generator-count"),this.element.addEventListener("click",(e=>{this.handleClick(e)})))}handleClick(e){if(!this.generator||!this.element)return;v(this.generateTooltipContent(),e);const n=e=>w(e),t=()=>{y(),document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",t)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",t)}generateTooltipContent(){if(!this.generator)return"";(0,o.b)().getState();const e=this.generator.boosts.filter((e=>e.active)).map((e=>`\n          <div class="tooltip-boost-item ${e.multiplier>1?"positive":"negative"}">\n            <span class="tooltip-label">${e.source}:</span>\n            <span class="tooltip-value">x${e.multiplier.toFixed(2)}</span>\n          </div>\n        `)).join("");return`\n      <div class="tooltip-header" style="color: ${{[f.GD.Basic]:"#4CAF50",[f.GD.Premium]:"#3f51b5",[f.GD.Special]:"#FF9800"}[this.generator.category]||"#4CAF50"};">\n        <strong>${this.generator.name}</strong> <span class="tooltip-count">x${this.generator.count}</span>\n      </div>\n      \n      <div class="tooltip-description">\n        ${this.generator.detailedDescription||this.generator.description}\n      </div>\n      \n      <div class="tooltip-section">\n        <div class="tooltip-section-title">Production</div>\n        <div class="tooltip-production">\n          <div class="tooltip-production-item">\n            <span class="tooltip-label">Base production:</span>\n            <span class="tooltip-value">${A(this.generator.baseProduction)}/sec per unit</span>\n          </div>\n          <div class="tooltip-production-item">\n            <span class="tooltip-label">Current production:</span>\n            <span class="tooltip-value">${A(this.generator.currentProduction)}/sec per unit</span>\n          </div>\n          <div class="tooltip-production-item total">\n            <span class="tooltip-label">Total production:</span>\n            <span class="tooltip-value">${A(this.generator.totalProduction)}/sec</span>\n          </div>\n        </div>\n        \n        ${e?`\n        <div class="tooltip-boosts">\n          <div class="tooltip-section-subtitle">Boosts</div>\n          ${e}\n        </div>\n        `:""}\n      </div>\n    `}getGeneratorIconHtml(e){const n={basic:"🐸",premium:"✨",special:"🔮"};if(e.iconPath){let t=e.iconPath;return t.startsWith("./")&&(t=t.substring(2)),`\n        <div class="generator-icon-wrapper">\n          <img src="${t}" alt="${e.name}" class="generator-icon-img" \n               onerror="console.error('Failed to load icon:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';">\n          <div class="generator-icon-fallback" style="display:none;">${n[e.category]||"🐸"}</div>\n        </div>\n      `}return`\n      <div class="generator-icon-wrapper">\n        <div class="generator-icon-fallback" style="display:flex;">${n[e.category]||"🐸"}</div>\n      </div>\n    `}render(){return this.generator?`\n      <div class="generator-icon">\n        ${this.getGeneratorIconHtml(this.generator)}\n      </div>\n      <div class="generator-info">\n        <div class="name-count-container">\n          <div class="generator-name">${this.generator.name}</div>\n          <div class="generator-count">x${this.generator.count}</div>\n        </div>\n        <div class="generator-production">\n          <span class="production-value">${A(this.generator.totalProduction)}</span>/sec\n        </div>\n      </div>\n    `:'\n        <div class="generator-icon"></div>\n        <div class="generator-info">\n          <div class="name-count-container">\n            <div class="generator-name">Unknown</div>\n            <div class="generator-count">x0</div>\n          </div>\n          <div class="generator-production">\n            <span class="production-value">0</span>/sec\n          </div>\n        </div>\n      '}update(e){this.generator=e,this.element&&(this.setContent(this.render()),this.productionElement=this.element.querySelector(".production-value"),this.countElement=this.element.querySelector(".generator-count")),this.element&&(Object.values(f.GD).forEach((e=>{var n;null===(n=this.element)||void 0===n||n.classList.remove(`category-${e}`)})),this.element.classList.add(`category-${e.category}`))}}class I extends h{constructor(e={}){super(Object.assign({id:e.id||"owned-generators",className:e.className||"owned-generators-container panel"},e)),this.emptyStateElement=null}setup(){var e,n;let t=null===(e=this.element)||void 0===e?void 0:e.querySelector(".generators-container");!t&&this.element?(t=document.createElement("div"),t.classList.add("generators-container"),this.element.appendChild(t),this.emptyStateElement=t.querySelector(".empty-generators"),this.emptyStateElement||(this.emptyStateElement=document.createElement("div"),this.emptyStateElement.classList.add("empty-generators"),this.emptyStateElement.textContent="No frogs yet! Buy some from the shop.",t.appendChild(this.emptyStateElement))):this.emptyStateElement=(null===(n=this.element)||void 0===n?void 0:n.querySelector(".empty-generators"))||null,this.connectToState((e=>{const n=e.generators;return Object.values(n).filter((e=>e.count>0))}),this.updateGenerators.bind(this)),this.subscribeToEvent("GENERATOR_PURCHASED",(()=>{this.refreshGenerators()})),this.subscribeToEvent("GAME_LOADED",(()=>{this.refreshGenerators()})),this.subscribeToEvent("refreshUI",(()=>{this.refreshGenerators()})),setTimeout((()=>{this.refreshGenerators()}),200)}updateGenerators(e){var n,t,o;this.clearChildren(),0===e.length?this.emptyStateElement&&((null===(n=this.element)||void 0===n?void 0:n.contains(this.emptyStateElement))||null===(o=null===(t=this.element)||void 0===t?void 0:t.querySelector(".generators-container"))||void 0===o||o.appendChild(this.emptyStateElement),this.emptyStateElement.style.display=""):(this.emptyStateElement&&(this.emptyStateElement.style.display="none"),e.forEach((e=>{const n=new k({id:`generator-${e.id}`,className:`owned-generator category-${e.category}`});this.addChild(n),n.update(e)}))),this.updateGeneratorCountIndicator(e.length)}updateGeneratorCountIndicator(e){const n=document.getElementById("owned-generators");if(!n)return;const t=n.querySelector(".panel-header h2");t&&(t.textContent=e>0?`Your Frogs (${e})`:"Your Frogs")}refreshGenerators(){const e=(0,o.b)().getState().generators,n=Object.values(e).filter((e=>e.count>0));this.updateGenerators(n)}}class S extends c{constructor(e={}){super(e),this.generator=null,this.purchaseAmount=1,this.canAfford=!1,this.buyButton=null,this.infoButton=null,this.nameElement=null,this.productionElement=null,this.iconElement=null}setup(){if(this.setContent(this.render()),this.element){this.buyButton=this.element.querySelector(".buy-button"),this.nameElement=this.element.querySelector(".generator-name"),this.productionElement=this.element.querySelector(".generator-production"),this.iconElement=this.element.querySelector(".generator-icon"),this.buyButton&&this.buyButton.addEventListener("click",(e=>{this.handlePurchase(e)}));const e=this.element.querySelector(".generator-left");e&&e.addEventListener("click",(e=>{this.handleInfoClick(e)}))}}handleInfoClick(e){if(!this.generator||!this.element)return;e.stopPropagation(),v(this.generateTooltipContent(),e);const n=e=>w(e),t=()=>{y(),document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",t)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",t)}handlePurchase(e){if(e.stopPropagation(),!this.generator||!this.canAfford)return;const n=(0,a.a)().getGeneratorManager(),t=(0,o.b)().getState(),r=n.purchaseGenerator(this.generator.id,this.purchaseAmount,t.resources.bufos);r.success?(this.element&&(this.element.classList.add("purchase-success"),setTimeout((()=>{var e;null===(e=this.element)||void 0===e||e.classList.remove("purchase-success")}),300)),(0,o.b)().setState({resources:{bufos:t.resources.bufos-r.cost}}),this.updateDisplay()):this.element&&(this.element.classList.add("purchase-error"),this.buyButton&&function(e,n=5,t=500){if(!e)return Promise.reject(new Error("Element is required"));const o=e.style.transform||"",r=t/6;new Promise((t=>{let a=0;!function i(){if(a>=6)return e.style.transform=o,void t();const s=n*(a%2==0?1:-1)*(1-a/6);e.style.transform=`${o} translateX(${s}px)`,a++,setTimeout(i,r)}()}))}(this.buyButton,5,500),setTimeout((()=>{var e;null===(e=this.element)||void 0===e||e.classList.remove("purchase-error")}),300))}updateDisplay(){if(this.generator){const e=(0,o.b)().getState().generators[this.generator.id];e&&(this.generator=e,this.updateButtonCost())}}updateButtonCost(){if(!this.generator||!this.buyButton)return;const e=(0,a.a)().getGeneratorManager(),n=(0,o.b)().getState().resources.bufos;let t=`${A(this.generator.currentCost)} bufos`;if(-1===this.purchaseAmount){const o=e.getMaxAffordable(this.generator.id,n);t=0===o?"Can't afford":`${A((0,f.i$)(this.generator,o))} bufos`}else this.purchaseAmount>1&&(t=`${A((0,f.i$)(this.generator,this.purchaseAmount))} bufos`);this.buyButton.textContent=t}generateTooltipContent(){if(!this.generator)return"";const e=(0,a.a)().getGeneratorManager(),n=(0,o.b)().getState().resources.bufos,t=this.generator.currentCost,r=(0,f.i$)(this.generator,10),i=(0,f.i$)(this.generator,100),s=e.getMaxAffordable(this.generator.id,n);return`\n      <div class="tooltip-header" style="color: ${{[f.GD.Basic]:"#4CAF50",[f.GD.Premium]:"#3f51b5",[f.GD.Special]:"#FF9800"}[this.generator.category]||"#4CAF50"};">\n        <strong>${this.generator.name}</strong> <span class="tooltip-count">x${this.generator.count}</span>\n      </div>\n      \n      <div class="tooltip-description">\n        ${this.generator.detailedDescription||this.generator.description}\n      </div>\n      \n      <div class="tooltip-section">\n        <div class="tooltip-section-title">Production</div>\n        <div class="tooltip-production">\n          <div class="tooltip-production-item">\n            <span class="tooltip-label">Production:</span>\n            <span class="tooltip-value">${A(this.generator.currentProduction)}/sec per unit</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class="tooltip-section">\n        <div class="tooltip-section-title">Purchase Info</div>\n        <div class="tooltip-costs">\n          <div class="tooltip-cost-item">\n            <span class="tooltip-label">Next:</span>\n            <span class="tooltip-value">${A(t)} bufos</span>\n          </div>\n          <div class="tooltip-cost-item">\n            <span class="tooltip-label">Next 10:</span>\n            <span class="tooltip-value">${A(r)} bufos</span>\n          </div>\n          <div class="tooltip-cost-item">\n            <span class="tooltip-label">Next 100:</span>\n            <span class="tooltip-value">${A(i)} bufos</span>\n          </div>\n          <div class="tooltip-cost-item affordable">\n            <span class="tooltip-label">You can afford:</span>\n            <span class="tooltip-value">${s}</span>\n          </div>\n        </div>\n      </div>\n    `}getGeneratorIconHtml(e){console.log("Getting shop item icon for:",e.name,"Icon path:",e.iconPath);const n={basic:"🐸",premium:"✨",special:"🔮"};if(e.iconPath){let t=e.iconPath;return t.startsWith("./")&&(t=t.substring(2)),`\n      <div class="generator-icon-wrapper">\n        <img src="${t}" alt="${e.name}" class="generator-icon-img" \n             onerror="console.error('Failed to load icon:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';">\n        <div class="generator-icon-fallback" style="display:none;">${n[e.category]||"🐸"}</div>\n      </div>\n    `}return`\n    <div class="generator-icon-wrapper">\n      <div class="generator-icon-fallback" style="display:flex;">${n[e.category]||"🐸"}</div>\n    </div>\n  `}render(){if(!this.generator)return'\n        <div class="generator-row">\n          <div class="generator-left">\n            <div class="generator-icon"></div>\n            <div class="generator-info">\n              <div class="generator-name-section">\n                <span class="generator-name">Unknown</span>\n              </div>\n              <div class="generator-production">0/sec per unit</div>\n            </div>\n          </div>\n          <button class="buy-button disabled">0 bufos</button>\n        </div>\n      ';const e=(0,a.a)().getGeneratorManager(),n=(0,o.b)().getState().resources.bufos;let t=`${A(this.generator.currentCost)} bufos`;if(-1===this.purchaseAmount){const o=e.getMaxAffordable(this.generator.id,n);t=0===o?"Can't afford":`${A((0,f.i$)(this.generator,o))} bufos`}else this.purchaseAmount>1&&(t=`${A((0,f.i$)(this.generator,this.purchaseAmount))} bufos`);return`\n      <div class="generator-row">\n        <div class="generator-left">\n          <div class="generator-icon">\n            ${this.getGeneratorIconHtml(this.generator)}\n          </div>\n          <div class="generator-info">\n            <div class="generator-name-section">\n              <span class="generator-name">${this.generator.name}</span>\n            </div>\n            <div class="generator-production">\n              ${A(this.generator.currentProduction)}/sec per unit\n            </div>\n          </div>\n        </div>\n        <button class="buy-button ${this.canAfford?"":"disabled"}" data-generator-id="${this.generator.id}">${t}</button>\n      </div>\n    `}update(e){if(!e.generator)return;const n=this.generator;this.generator=e.generator,this.nameElement&&(this.nameElement.textContent=e.generator.name),this.productionElement&&(this.productionElement.textContent=`${A(e.generator.currentProduction)}/sec per unit`),!this.iconElement||n&&n.id===e.generator.id||(console.log("Updating icon for",e.generator.name),this.iconElement.innerHTML=this.getGeneratorIconHtml(e.generator)),void 0!==e.purchaseAmount&&(this.purchaseAmount=e.purchaseAmount),void 0!==e.canAfford&&(this.canAfford=e.canAfford),(0,a.a)().getGeneratorManager(),(0,o.b)().getState().resources.bufos,this.buyButton&&(this.canAfford?(this.buyButton.classList.remove("disabled"),this.buyButton.disabled=!1):(this.buyButton.classList.add("disabled"),this.buyButton.disabled=!0),this.updateButtonCost()),this.element&&(Object.values(f.GD).forEach((e=>{var n;null===(n=this.element)||void 0===n||n.classList.remove(`category-${e}`)})),this.element.classList.add(`category-${this.generator.category}`))}}var T;!function(e){e[e.One=1]="One",e[e.Ten=10]="Ten",e[e.Hundred=100]="Hundred",e[e.Max=-1]="Max"}(T||(T={}));class M extends h{constructor(e={}){super(Object.assign({id:e.id||"buildings-container",className:e.className||"buildings-container"},e)),this.purchaseAmount=T.One,this.purchaseAmountButtons=new Map,this.updateIntervalId=null}setup(){this.createPurchaseControls(),this.connectToState((e=>(0,a.a)().getGeneratorManager().getUnlockedGenerators()),this.updateGenerators.bind(this)),this.subscribeToEvent("GENERATOR_UNLOCKED",(()=>{this.refreshGenerators()})),this.subscribeToEvent("GENERATOR_PURCHASED",(()=>{this.updateAffordability()})),this.subscribeToEvent("GAME_LOADED",(()=>{setTimeout((()=>{this.refreshGenerators()}),200)})),this.subscribeToEvent("refreshUI",(()=>{this.refreshGenerators()})),this.updateIntervalId=window.setInterval((()=>{this.updateAffordability()}),200)}createPurchaseControls(){if(!this.element)return;const e=document.createElement("div");e.classList.add("purchase-controls");const n=document.createElement("div");n.classList.add("purchase-amount-buttons"),[{value:T.One,label:"1"},{value:T.Ten,label:"10"},{value:T.Hundred,label:"100"},{value:T.Max,label:"Max"}].forEach((({value:e,label:t})=>{const o=document.createElement("button");o.classList.add("purchase-amount-button"),o.textContent=t,o.dataset.amount=e.toString(),e===this.purchaseAmount&&o.classList.add("active"),o.addEventListener("click",(()=>{this.setPurchaseAmount(e)})),n.appendChild(o),this.purchaseAmountButtons.set(e,o)})),e.appendChild(n),this.element.appendChild(e)}setPurchaseAmount(e){this.purchaseAmount=e,this.purchaseAmountButtons.forEach(((n,t)=>{t===e?n.classList.add("active"):n.classList.remove("active")})),this.updateCosts(),this.updateAffordability()}updateGenerators(e){const n=this.getChildren();for(const e of n)e.component instanceof S&&this.removeChild(e.component);e.forEach((e=>{const n=new S({id:`shop-item-${e.id}`,className:`building-item category-${e.category}`});this.addChild(n,e),n.update({generator:e,purchaseAmount:this.purchaseAmount})})),this.updateCosts(),this.updateAffordability()}updateCosts(){const e=this.getChildren();for(const n of e)n.component instanceof S&&n.data&&n.component.update({generator:n.data,purchaseAmount:this.purchaseAmount})}updateAffordability(){const e=(0,o.b)().getState(),n=e.resources.bufos,t=this.getChildren(),r=(0,a.a)().getGeneratorManager();for(const o of t)if(o.component instanceof S&&o.data){const t=e.generators[o.data.id];if(t){let e=!1;e=this.purchaseAmount===T.Max?r.getMaxAffordable(t.id,n)>0:n>=(0,f.i$)(t,this.purchaseAmount),o.component.update({generator:t,purchaseAmount:this.purchaseAmount,canAfford:e})}}}refreshGenerators(){const e=(0,a.a)().getGeneratorManager().getUnlockedGenerators();this.updateGenerators(e)}destroy(){null!==this.updateIntervalId&&(clearInterval(this.updateIntervalId),this.updateIntervalId=null),this.purchaseAmountButtons.clear(),super.destroy()}}var D=t(654);class z extends c{constructor(e={}){super(e),this.upgrade=null,this.canAfford=!1,this.button=null,this.activeTooltip=null,this.isMouseOver=!1,this.tooltipTimeout=null}setup(){this.setContent(this.render()),this.element&&(this.button=this.element.querySelector(".upgrade-icon"),this.element.addEventListener("click",this.handlePurchase.bind(this)),this.element.addEventListener("mouseenter",(()=>{this.isMouseOver=!0,this.showTooltip()})),this.element.addEventListener("mouseleave",(()=>{this.isMouseOver=!1,this.hideTooltip()}))),this.connectToState((e=>({bufos:e.resources.bufos})),this.checkAffordability.bind(this))}checkAffordability(e){if(!this.upgrade)return;const n=e.bufos>=this.upgrade.cost;n!==this.canAfford&&(this.canAfford=n,this.element&&(this.canAfford?(this.element.classList.add("affordable"),this.element.classList.remove("not-affordable")):(this.element.classList.add("not-affordable"),this.element.classList.remove("affordable"))))}handlePurchase(e){if(e.preventDefault(),e.stopPropagation(),!this.upgrade||!this.canAfford)return;const n=(0,o.b)().getState().resources.bufos;if((0,a.a)().getUpgradeManager().purchaseUpgrade(this.upgrade.id,n).success){this.element&&(this.element.classList.add("purchase-success"),setTimeout((()=>{var e;null===(e=this.element)||void 0===e||e.classList.remove("purchase-success")}),300));const e=(0,o.b)().getState();(0,o.b)().setState({resources:{bufos:e.resources.bufos-this.upgrade.cost}})}else this.element&&(this.element.classList.add("purchase-error"),setTimeout((()=>{var e;null===(e=this.element)||void 0===e||e.classList.remove("purchase-error")}),500))}showTooltip(){if(null!==this.tooltipTimeout&&(clearTimeout(this.tooltipTimeout),this.tooltipTimeout=null),this.activeTooltip)return;if(!this.upgrade||!this.element)return;const e=this.element.getBoundingClientRect(),n=document.createElement("div");n.classList.add("game-tooltip"),n.innerHTML=this.generateTooltipContent(),n.style.left=`${e.left+e.width/2}px`,n.style.top=`${e.bottom+10}px`,n.style.transform="translateX(-50%)",document.body.appendChild(n),this.activeTooltip=n,this.tooltipTimeout=setTimeout((()=>{n&&n.classList.add("visible"),this.tooltipTimeout=null}),10)}generateTooltipContent(){if(!this.upgrade)return"";const e={[D.BP.Click]:"Click Upgrade",[D.BP.Generator]:"Generator Upgrade",[D.BP.Global]:"Global Upgrade"},n=this.getUpgradeFlavorText();return`\n      <div class="tooltip-upgrade tooltip-category-${this.upgrade.category}">\n        <div class="tooltip-header">\n          <span class="tooltip-title">${this.upgrade.name}</span>\n          <span class="tooltip-category">${e[this.upgrade.category]}</span>\n        </div>\n        <div class="tooltip-description">${this.upgrade.description}</div>\n        <div class="tooltip-flavor">${n}</div>\n        <div class="tooltip-cost">${A(this.upgrade.cost)} bufos</div>\n      </div>\n    `}getUpgradeFlavorText(){if(!this.upgrade)return"";if(this.upgrade.flavorText)return this.upgrade.flavorText;const e={stronger_clicks_1:"Your fingertips tingle with the power of a thousand taps. The frogs sense your newfound strength.",stronger_clicks_2:"Advanced clicking techniques passed down from the ancient Bufo masters. Your fingers move with blinding speed.",tadpole_boost_1:"A safe, nurturing environment for tadpoles to thrive. Happy tadpoles mean more bufos!",froglet_boost_1:"An intensive training regimen that transforms ordinary froglets into bufo-producing champions.",global_production_1:"A rising tide lifts all frogs. Your management skills benefit the entire operation.",click_default:"Every click reverberates through the pond, sending ripples of power across the lily pads.",generator_default:"Optimized production techniques allow your frogs to work smarter, not harder.",global_default:"A rising tide lifts all frogs. Your management skills benefit the entire operation."};return e[this.upgrade.id]||e[`${this.upgrade.category}_default`]||"A mysterious upgrade with untold powers. The frogs whisper of its potential."}hideTooltip(){if(null!==this.tooltipTimeout&&(clearTimeout(this.tooltipTimeout),this.tooltipTimeout=null),!this.activeTooltip)return;this.activeTooltip.classList.remove("visible");const e=this.activeTooltip;this.activeTooltip=null,setTimeout((()=>{e.parentNode&&e.parentNode.removeChild(e)}),300)}getUpgradeIconHtml(){if(!this.upgrade)return"";if(this.upgrade.iconPath)return`<img src="${this.upgrade.iconPath}" alt="${this.upgrade.name}" class="upgrade-icon-img">`;const e={[D.BP.Click]:"👆",[D.BP.Generator]:"🐸",[D.BP.Global]:"🌍"};return`<div class="upgrade-icon-emoji">${{stronger_clicks_1:"💪",stronger_clicks_2:"✨👆",tadpole_boost_1:"🥚",froglet_boost_1:"🐸",global_production_1:"🌿"}[this.upgrade.id]||e[this.upgrade.category]||"✨"}</div>`}render(){var e;return`\n      <button class="upgrade-icon" data-upgrade-id="${(null===(e=this.upgrade)||void 0===e?void 0:e.id)||""}">\n        ${this.getUpgradeIconHtml()}\n      </button>\n    `}update(e){this.upgrade=e,this.element&&(this.element.dataset.category=e.category),this.button&&(this.button.innerHTML=this.getUpgradeIconHtml(),this.button.dataset.upgradeId=e.id);const n=(0,o.b)().getState();this.checkAffordability({bufos:n.resources.bufos})}destroy(){this.hideTooltip(),this.element&&(this.element.removeEventListener("mouseenter",(()=>this.isMouseOver=!0)),this.element.removeEventListener("mouseleave",(()=>this.isMouseOver=!1))),null!==this.tooltipTimeout&&(clearTimeout(this.tooltipTimeout),this.tooltipTimeout=null),super.destroy()}}class O extends h{constructor(e={}){super(Object.assign({id:e.id||"upgrades-container",className:e.className||"upgrades-grid"},e)),this.emptyStateElement=null,this.upgradeItems=new Map}setup(){if(!this.element)return;const e=this.element.querySelector(".empty-upgrades");e?this.emptyStateElement=e:(this.emptyStateElement=document.createElement("div"),this.emptyStateElement.classList.add("empty-upgrades"),this.emptyStateElement.textContent="No upgrades available yet.",this.element.appendChild(this.emptyStateElement)),this.connectToState((e=>e.upgrades.available.map((e=>(0,a.a)().getUpgradeManager().findUpgradeById(e))).filter((e=>void 0!==e))),this.updateUpgrades.bind(this)),this.subscribeToEvent("UPGRADE_PURCHASED",(e=>{this.refreshUpgrades()})),this.subscribeToEvent("UPGRADES_AVAILABLE",(()=>{this.refreshUpgrades()}))}updateUpgrades(e){if(this.element){if(0===e.length)this.emptyStateElement&&(this.element.contains(this.emptyStateElement)||this.element.appendChild(this.emptyStateElement),this.emptyStateElement.style.display="block"),this.clearUpgradeItems();else{this.emptyStateElement&&(this.emptyStateElement.style.display="none");const n=new Set(this.upgradeItems.keys()),t=new Set(e.map((e=>e.id)));for(const e of n)t.has(e)||this.removeUpgradeItem(e);for(const t of e)n.has(t.id)||this.addUpgradeItem(t)}this.updateUpgradeCountIndicator(e.length)}}addUpgradeItem(e){if(!this.element)return;const n=document.createElement("div");n.className="upgrade-icon-container",n.id=`upgrade-container-${e.id}`,this.element.appendChild(n);const t=new z({element:n,id:`upgrade-item-${e.id}`});t.init(),t.update(e),this.upgradeItems.set(e.id,t)}removeUpgradeItem(e){const n=this.upgradeItems.get(e);if(n){n.destroy(),this.upgradeItems.delete(e);const t=document.getElementById(`upgrade-container-${e}`);t&&t.parentNode&&t.parentNode.removeChild(t)}}clearUpgradeItems(){for(const[e,n]of this.upgradeItems.entries()){n.destroy();const t=document.getElementById(`upgrade-container-${e}`);t&&t.parentNode&&t.parentNode.removeChild(t)}this.upgradeItems.clear()}updateUpgradeCountIndicator(e){const n=document.getElementById("upgrades-panel");if(!n)return;const t=n.querySelector(".panel-header h2");t&&e>0?(t.textContent=`Upgrades (${e})`,n.classList.add("has-new-upgrades")):t&&(t.textContent="Upgrades",n.classList.remove("has-new-upgrades"))}refreshUpgrades(){const e=(0,o.b)().getState().upgrades.available,n=(0,a.a)().getUpgradeManager(),t=e.map((e=>n.findUpgradeById(e))).filter((e=>void 0!==e));this.updateUpgrades(t)}destroy(){this.clearUpgradeItems(),super.destroy()}}class R extends c{constructor(e={}){super(Object.assign({id:e.id||"production-stats",className:e.className||"production-stats panel"},e)),this.statsContainer=null,this.contributionsContainer=null}setup(){this.setContent(this.render()),this.element&&(this.statsContainer=this.element.querySelector(".stats-container"),this.contributionsContainer=this.element.querySelector(".contributions")),this.connectToState((e=>(0,d.Jr)(e)),this.updateStats.bind(this)),this.subscribeToEvent("GENERATOR_PRODUCTION_UPDATED",(()=>{this.refreshStats()})),this.subscribeToEvent("GENERATOR_PURCHASED",(()=>{this.refreshStats()}))}render(){return'\n      <div class="panel-content">\n        <div class="stats-container">\n\n        </div>\n        \n        <div class="contributions">\n          <h3>Production Sources</h3>\n          <div class="contributions-list">\n            <div class="empty-contributions">No production sources yet.</div>\n          </div>\n        </div>\n      </div>\n    '}updateStats(e){if(!this.statsContainer||!this.contributionsContainer)return;const n=this.statsContainer.querySelectorAll(".stat-item");if(n.length>=3){const t=n[0].querySelector(".stat-value"),o=n[1].querySelector(".stat-value"),r=n[2].querySelector(".stat-value");t&&(t.textContent=`${A(e.currentRate)}/sec`),o&&(o.textContent=A(e.perMinute)),r&&(r.textContent=A(e.perHour))}const t=this.contributionsContainer.querySelector(".contributions-list");t&&(0===e.generatorContributions.length?t.innerHTML='<div class="empty-contributions">No production sources yet.</div>':t.innerHTML=e.generatorContributions.sort(((e,n)=>n.production-e.production)).map((e=>`\n            <div class="contribution-item">\n              <span class="contribution-name">${e.name} (x${e.count})</span>\n              <span class="contribution-value">${A(e.production)}/sec (${e.percentage.toFixed(1)}%)</span>\n            </div>\n          `)).join(""))}refreshStats(){const e=(0,o.b)().getState(),n=(0,d.Jr)(e);this.updateStats(n)}}var P=t(832),F=t(138),U=t(259);class ${constructor(){this.rootElement=null,this.modalContainer=null,this.notificationContainer=null,this.achievementNotificationContainer=null,this.components=new Map,this.activeModal=null,this.animationFrameId=null,this.isGameVisible=!0,this.resizeObserver=null,this.showLockedAchievements=!0,this.showSecretAchievements=!1}static getInstance(){return $.instance||($.instance=new $),$.instance}init(e="game-container"){this.rootElement=document.getElementById(e),this.rootElement?(this.createBaseStructure(),this.initializeComponents(),this.initializeMenu(),this.setupEventListeners(),this.setupVisibilityTracking(),this.setupResizeHandling(),this.createAchievementNotificationContainer(),this.startUpdateLoop(),console.log("UIManager: Initialized")):console.error(`UIManager: Root element #${e} not found`)}createBaseStructure(){this.rootElement&&(this.rootElement.innerHTML="",this.rootElement.innerHTML='\n    \x3c!-- Game header with title --\x3e\n    <header class="game-header">\n      <h1 class="game-title"></h1>\n    </header>\n\n    \x3c!-- Main content container --\x3e\n    <main class="game-content">\n      \x3c!-- Three-column layout wrapper --\x3e\n      <div class="three-column-layout">\n        \x3c!-- Left column: Click area and production statistics --\x3e\n        <div class="column left-column">\n          <div id="resource-display" class="resource-display"></div>\n          <div id="frog-display" class="frog-display"></div>\n          <div id="production-stats" class="production-stats panel">\n            <div class="panel-header">\n              <h2>Production Statistics</h2>\n            </div>\n            <div class="panel-content">\n              \x3c!-- Production stats will be inserted here --\x3e\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Center column: Menu buttons and owned generators ("Your Frogs") --\x3e\n        <div class="column center-column">\n          <div id="game-menu" class="game-menu">\n            <button id="stats-button" class="menu-button">Stats</button>\n            <button id="achievements-button" class="menu-button">Achievements</button>\n            <button id="save-button" class="menu-button">Save</button>\n            <button id="reset-button" class="menu-button">Reset</button>\n          </div>\n          \n          <div id="owned-generators" class="owned-generators-container panel">\n            <div class="panel-header">\n              <h2>Your Frogs</h2>\n            </div>\n            <div class="panel-content generators-container">\n              \x3c!-- Generator items will be inserted here --\x3e\n              <div class="empty-generators">No frogs yet! Buy some from the shop.</div>\n            </div>\n          </div>\n        </div>\n\n        \x3c!-- Right column: Upgrades and shop --\x3e\n        <div class="column right-column">\n          <div id="upgrades-panel" class="upgrades-panel panel">\n            <div class="panel-header">\n              <h2>Upgrades</h2>\n            </div>\n            <div class="panel-content">\n              <div id="upgrades-container" class="upgrades-grid">\n                \x3c!-- Upgrade items will be inserted here --\x3e\n                <div class="empty-upgrades">No upgrades available yet.</div>\n              </div>\n            </div>\n          </div>\n          \n          <div id="shop-panel" class="shop-panel panel">\n            <div class="panel-header">\n              <h2>Frog Shop</h2>\n            </div>\n            <div class="panel-content">\n              <div id="purchase-controls" class="purchase-controls">\n                <div class="purchase-amount-buttons">\n                  \x3c!-- Purchase amount buttons will be inserted here --\x3e\n                </div>\n              </div>\n              <div id="buildings-container" class="buildings-container">\n                \x3c!-- Shop items will be inserted here --\x3e\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  ',this.modalContainer=document.createElement("div"),this.modalContainer.className="modal-container",this.rootElement.appendChild(this.modalContainer),this.notificationContainer=document.createElement("div"),this.notificationContainer.className="notification-container",this.rootElement.appendChild(this.notificationContainer))}createAchievementNotificationContainer(){this.achievementNotificationContainer=document.createElement("div"),this.achievementNotificationContainer.style.display="none",document.body.appendChild(this.achievementNotificationContainer)}initializeComponents(){if(!this.rootElement)return;const e=new u,n=new g,t=new I,o=new M,r=new O,i=new R;e.init(),n.init(),t.init(),o.init(),r.init(),i.init(),(0,a.a)().checkUnlocks(),this.components.set("resourceDisplay",e),this.components.set("clickArea",n),this.components.set("generatorList",t),this.components.set("shop",o),this.components.set("upgradeList",r),this.components.set("productionStats",i)}setupEventListeners(){const e=(0,r.J)();e.on("UPGRADES_AVAILABLE",(e=>{this.updateTabNotification("upgrades",e.count>0)})),e.on(i.Mn,(e=>{this.showAchievementNotification({achievement:e.achievement,animate:!0,duration:5e3})})),window.addEventListener("error",(e=>{console.error("Global error:",e.error),this.showNotification({message:"An error occurred. Check console for details.",type:"error",duration:5e3})}))}setupVisibilityTracking(){document.addEventListener("visibilitychange",(()=>{this.isGameVisible="visible"===document.visibilityState;const e=(0,a.a)();this.isGameVisible?e.start():e.stop()}))}setupResizeHandling(){this.rootElement&&(this.resizeObserver=new ResizeObserver((e=>{for(const n of e)n.target===this.rootElement&&this.handleResize(n.contentRect.width,n.contentRect.height)})),this.resizeObserver.observe(this.rootElement))}handleResize(e,n){var t,o,r,a;e<1024?(null===(t=this.rootElement)||void 0===t||t.classList.add("mobile-layout"),null===(o=this.rootElement)||void 0===o||o.classList.remove("desktop-layout")):(null===(r=this.rootElement)||void 0===r||r.classList.add("desktop-layout"),null===(a=this.rootElement)||void 0===a||a.classList.remove("mobile-layout"))}startUpdateLoop(){const e=()=>{this.isGameVisible,this.animationFrameId=requestAnimationFrame(e)};this.animationFrameId=requestAnimationFrame(e)}updateTabNotification(e,n){const t=document.getElementById(`${e}-panel`);t&&(n?t.classList.add("has-notification"):t.classList.remove("has-notification"))}initializeMenu(){const e=document.getElementById("stats-button"),n=document.getElementById("achievements-button"),t=document.getElementById("save-button"),o=document.getElementById("reset-button");e&&e.addEventListener("click",this.showStatsModal.bind(this)),n&&n.addEventListener("click",this.showAchievementsModal.bind(this)),t&&t.addEventListener("click",this.handleSave.bind(this)),o&&o.addEventListener("click",this.handleReset.bind(this))}showAchievementsModal(){const e=(0,a.a)().getAchievementManager(),n=e.getUnlockedAchievements(),t=e.getTotalAchievementCount(),o=e.getUnlockedCount(),r=t>0?Math.round(o/t*100):0,i=`\n    <div class="achievement-progress-bar">\n      <div class="achievement-progress-text">${o} of ${t} Achievements Unlocked (${r}%)</div>\n      <div class="achievement-progress-outer">\n        <div class="achievement-progress-inner" style="width: ${r}%"></div>\n      </div>\n    </div>\n  `;let s="";n.forEach((e=>{s+=this.renderAchievementItem(e,!0)})),""===s&&(s='\n      <div class="empty-achievements">\n        <p>No achievements unlocked yet.</p>\n        <p>Keep playing to unlock achievements!</p>\n      </div>\n    ');const c=`\n    <div class="achievements-container">\n      ${i}\n      <div class="achievements-list">\n        ${s}\n      </div>\n    </div>\n  `;this.showModal({id:"achievements-modal",title:"Achievements",content:c,closeOnBackdrop:!0})}renderAchievementItem(e,n){const t=(0,U.q1)(e.category);let o="";o=e.iconPath?`<img src="${e.iconPath}" alt="${e.name}" class="achievement-icon-img">`:`<div class="achievement-icon-emoji">${t}</div>`;let r="";if(e.reward){const n=e.reward;let t="Reward: ";switch(n.type){case U.E.ProductionBoost:t+=`${n.value}x production boost`;break;case U.E.ClickBoost:t+=`${n.value}x click boost`;break;case U.E.GeneratorBoost:t+=`${n.value}x boost to ${n.target} generator`;break;case U.E.BufoBonus:t+=`${n.value} Bufos`;break;case U.E.UnlockGenerator:t+=`Unlocked ${n.target} generator`;break;case U.E.UnlockUpgrade:t+="Unlocked new upgrade";break;case U.E.UnlockFeature:t+="Unlocked new feature";break;default:t+="Special bonus"}r=`<div class="achievement-reward">${t}</div>`}return`\n    <div class="achievement-item category-${e.category}" data-id="${e.id}">\n      <div class="achievement-icon">\n        ${o}\n      </div>\n      <div class="achievement-info">\n        <div class="achievement-name">${e.name}</div>\n        <div class="achievement-description">${e.description}</div>\n        ${r}\n      </div>\n    </div>\n  `}showAchievementNotification(e){const n=document.createElement("div");n.className="achievement-notification";let t="";t=e.achievement.iconPath?`<img src="${e.achievement.iconPath}" alt="${e.achievement.name}" class="achievement-icon-img">`:`<div class="achievement-icon-emoji">${(0,U.q1)(e.achievement.category)}</div>`;let o="";if(e.achievement.reward){const n=e.achievement.reward;let t="";switch(n.type){case U.E.ProductionBoost:t=`${n.value}x production boost`;break;case U.E.ClickBoost:t=`${n.value}x click boost`;break;case U.E.GeneratorBoost:t=`${n.value}x boost to ${n.target} generator`;break;case U.E.BufoBonus:t=`+${n.value} Bufos`;break;case U.E.UnlockGenerator:t=`Unlocked ${n.target} generator`;break;case U.E.UnlockUpgrade:t="Unlocked new upgrade";break;case U.E.UnlockFeature:t="Unlocked new feature";break;default:t="Special bonus"}o=`<div class="achievement-notification-reward">Reward: ${t}</div>`}return n.innerHTML=`\n    <div class="achievement-notification-icon">\n      ${t}\n    </div>\n    <div class="achievement-notification-content">\n      <div class="achievement-notification-title">Achievement Unlocked!</div>\n      <div class="achievement-notification-name">${e.achievement.name}</div>\n      <div class="achievement-notification-description">${e.achievement.description}</div>\n      ${o}\n    </div>\n  `,document.body.appendChild(n),setTimeout((()=>{n.classList.add("visible")}),10),setTimeout((()=>{n.classList.remove("visible"),setTimeout((()=>{n.parentNode&&n.parentNode.removeChild(n)}),300)}),e.duration||1e3),n}filterAchievementsByCategory(e,n){e.querySelectorAll(".achievement-item").forEach((e=>{"all"===n||e.getAttribute("data-category")===n?e.classList.remove("hidden"):e.classList.add("hidden")}))}refreshAchievementsModal(){this.activeModal&&"achievements-modal"===this.activeModal.id&&(this.closeModal(),this.showAchievementsModal())}showStatsModal(){const e=(0,o.b)().getState(),n=(0,a.a)(),t=n.getGeneratorManager(),r=n.getUpgradeManager(),i=n.getAchievementManager(),s=e.resources.totalBufos,c=e.resources.bufos,l=s-c,d=n.clickCount,u=Date.now(),p=u-(e.gameSettings.firstStartTime||e.gameSettings.lastTick||u),m=function(e){if(!Number.isFinite(e)||e<0)return"0s";if(e<60)return`${Math.floor(e)}s`;const n=Math.floor(e/3600),t=Math.floor(e%3600/60);let o="";return n>0&&(o+=`${n}h `),(t>0||n>0)&&(o+=`${t}m `),o+=`${Math.floor(e%60)}s`,o}(Math.floor(p/1e3)),g=i.getTotalAchievementCount(),h=i.getUnlockedCount(),f=g>0?Math.round(h/g*100):0,C=t.getAllGenerators(),b=t.getUnlockedGenerators(),E=Object.values(e.generators).reduce(((e,n)=>e+n.count),0),B=r.getPurchasedUpgrades().length,v=t.getProductionStats(),x=`\n    <div class="stats-container">\n      <h3 class="stats-section-title">Resources</h3>\n      \n      <div class="stats-row">\n        <div class="stat-item">\n          <div class="stat-label">Total Bufos Produced</div>\n          <div class="stat-value">${A(s)}</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Current Bufos</div>\n          <div class="stat-value">${A(c)}</div>\n        </div>\n      </div>\n      \n      <div class="stats-row">\n        <div class="stat-item">\n          <div class="stat-label">Total Bufos Spent</div>\n          <div class="stat-value">${A(l)}</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Current Production</div>\n          <div class="stat-value">${A(v.totalPerSecond)}/sec</div>\n        </div>\n      </div>\n      \n      <h3 class="stats-section-title">Game Progress</h3>\n      \n      <div class="stats-row">\n        <div class="stat-item">\n          <div class="stat-label">Time Played</div>\n          <div class="stat-value">${m}</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Total Clicks</div>\n          <div class="stat-value">${d.toLocaleString()}</div>\n        </div>\n      </div>\n      \n      <div class="stats-row">\n        <div class="stat-item">\n          <div class="stat-label">Achievements</div>\n          <div class="stat-value">${h}/${g} (${f}%)</div>\n          <div class="achievement-progress-indicator">\n            <div class="achievement-progress-bar" style="width: ${f}%"></div>\n          </div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Upgrades Purchased</div>\n          <div class="stat-value">${B}</div>\n        </div>\n      </div>\n      \n      <div class="stats-row">\n        <div class="stat-item">\n          <div class="stat-label">Generators Unlocked</div>\n          <div class="stat-value">${b.length}/${C.length}</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Total Generators Owned</div>\n          <div class="stat-value">${E}</div>\n        </div>\n      </div>\n\n      <h3 class="stats-section-title">Production Details</h3>\n      \n      <div class="stats-row production-details">\n        <div class="stat-item">\n          <div class="stat-label">Per Second</div>\n          <div class="stat-value">${A(v.totalPerSecond)}</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Per Minute</div>\n          <div class="stat-value">${A(v.totalPerMinute)}</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-label">Per Hour</div>\n          <div class="stat-value">${A(v.totalPerHour)}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class="contributions-container">\n      <h3 class="stats-section-title">Production Sources</h3>\n      <div class="contributions-list">\n        ${this.renderProductionSources(v.generatorContributions)}\n      </div>\n    </div>\n  `;this.showModal({id:"stats-modal",title:"Game Statistics",content:`<div class="stats-modal-content">${x}</div>`,closeOnBackdrop:!0})}renderProductionSources(e){return 0===e.length?'<div class="empty-contributions">No production sources yet.</div>':e.sort(((e,n)=>n.production-e.production)).map((e=>`\n      <div class="contribution-item">\n        <div class="contribution-name">${e.name} (x${e.count})</div>\n        <div class="contribution-value">\n          ${A(e.production)}/sec\n          <span class="contribution-percentage">(${e.percentage.toFixed(1)}%)</span>\n        </div>\n      </div>\n    `)).join("")}handleSave(){(0,a.a)();const e=(0,P.KN)(),n=(0,o.b)().getState().gameSettings.lastSaved;e?this.showSaveNotification(`Game saved successfully at ${new Date(n).toLocaleTimeString()}!`):this.showNotification({message:"Failed to save the game",type:"error",duration:3e3})}handleReset(){this.showModal({id:"reset-confirmation-modal",title:"Reset Game",content:"\n      <p>Are you sure you want to reset your game?</p>\n      <p>All progress will be lost!</p>\n    ",buttons:[{text:"Cancel",callback:()=>this.closeModal(),className:"modal-button cancel-button"},{text:"Reset Game",callback:()=>{this.closeModal(),(0,F.R)().clearSave(),(0,a.a)().resetState(),this.showNotification({message:"Game reset successfully. Refreshing page...",type:"info",duration:0}),setTimeout((()=>{window.location.reload()}),0)},className:"modal-button confirm-button"}],closeOnBackdrop:!0})}showSaveNotification(e){let n=document.querySelector(".save-notification");n||(n=document.createElement("div"),n.className="save-notification",document.body.appendChild(n)),n.textContent=e,setTimeout((()=>{n.classList.add("visible"),setTimeout((()=>{n.classList.remove("visible"),setTimeout((()=>{n.parentNode&&n.parentNode.removeChild(n)}),300)}),2e3)}),10)}updateAutoSaveStatus(e){const n=document.getElementById("auto-save-toggle");n&&(n instanceof HTMLInputElement&&(n.checked=e),this.showNotification({message:e?"Auto-save enabled - game will be saved every 5 minutes":"Auto-save disabled - remember to save manually!",type:e?"info":"warning",duration:3e3}))}showModal(e){if(!this.modalContainer)return document.createElement("div");this.closeModal();const n=document.createElement("div");n.className="modal",n.id=e.id;const t=document.createElement("div");t.className="modal-content";const o=document.createElement("div");o.className="modal-header",o.innerHTML=`\n    <h2>${e.title}</h2>\n    <button class="modal-close">&times;</button>\n  `,t.appendChild(o);const a=document.createElement("div");if(a.className="modal-body",a.innerHTML=e.content,t.appendChild(a),e.buttons&&e.buttons.length>0){const n=document.createElement("div");n.className="modal-footer",e.buttons.forEach((e=>{const t=document.createElement("button");t.textContent=e.text,t.className=e.className||"modal-button",t.addEventListener("click",(()=>{e.callback(),this.closeModal()})),n.appendChild(t)})),t.appendChild(n)}n.appendChild(t),this.modalContainer.appendChild(n);const s=n.querySelector(".modal-close");return s&&s.addEventListener("click",(()=>this.closeModal())),!1!==e.closeOnBackdrop&&n.addEventListener("click",(e=>{e.target===n&&this.closeModal()})),n.offsetWidth,setTimeout((()=>{n.classList.add("visible")}),10),this.activeModal=n,(0,r.J)().emit(i.Ly,{modalId:e.id}),n}closeModal(){if(!this.activeModal)return;this.activeModal.classList.remove("visible");const e=this.activeModal.id,n=this.activeModal;this.activeModal=null,setTimeout((()=>{n&&n.parentNode&&(n.parentNode.removeChild(n),(0,r.J)().emit(i.Uu,{modalId:e}))}),300)}showNotification(e){if(!this.notificationContainer)return document.createElement("div");const{message:n,type:t="info",duration:o=3e3}=e,r=document.createElement("div");r.className=`notification notification-${t}`,r.innerHTML=`\n    <div class="notification-content">\n      <span class="notification-message">${n}</span>\n      <button class="notification-close">&times;</button>\n    </div>\n  `,this.notificationContainer.appendChild(r),setTimeout((()=>{r.classList.add("visible")}),10);const a=r.querySelector(".notification-close");return a&&a.addEventListener("click",(()=>{this.closeNotification(r)})),setTimeout((()=>{this.closeNotification(r)}),o),r}closeNotification(e){e.classList.remove("visible"),setTimeout((()=>{e.parentNode&&e.parentNode.removeChild(e)}),300)}destroy(){null!==this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null),this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null),this.components.forEach((e=>{e.destroy()})),this.components.clear(),this.activeModal=null,this.achievementNotificationContainer&&this.achievementNotificationContainer.parentNode&&this.achievementNotificationContainer.parentNode.removeChild(this.achievementNotificationContainer),console.log("UIManager: Destroyed")}getComponent(e){return this.components.get(e)||null}}function j(){return $.getInstance()}},474:(e,n,t)=>{t.d(n,{Z:()=>A});var o=t(393),r=t(794),a=t(654),i=t(217),s=t(628),c=t(957);class l{constructor(e=a.RS){this.allUpgrades=e,s.Yz(`UpgradeManager initialized with ${e.length} upgrades`)}static getInstance(){return l.instance||(l.instance=new l),l.instance}initialize(){const e=this.getPurchasedUpgrades();s.Yz(`Initializing UpgradeManager with ${e.length} purchased upgrades`);for(const n of e){const e=this.findUpgradeById(n);e&&this.applyUpgradeEffects(e)}(0,c.B)().recalculateAllGenerators()}checkAvailableUpgrades(e,n){const t=[],s=this.getPurchasedUpgrades();for(const o of this.allUpgrades)s.includes(o.id)||(0,a.Hp)(o,e.resources.totalBufos,n)&&t.push(o);return(0,o.b)().setState({upgrades:{available:t.map((e=>e.id))}}),t.length>0&&(0,r.J)().emit(i.U9,{upgrades:t}),t}purchaseUpgrade(e,n){const t=this.findUpgradeById(e);if(!t)return{success:!1,cost:0};if(this.isUpgradePurchased(e))return{success:!1,cost:t.cost};if(n<t.cost)return{success:!1,cost:t.cost};const a=(0,o.b)().getState();return(0,o.b)().setState({upgrades:{purchased:[...a.upgrades.purchased,e],available:a.upgrades.available.filter((n=>n!==e))}}),this.applyUpgradeEffects(t),(0,r.J)().emit(i.dY,{upgrade:t,cost:t.cost,effects:t.effects.map((e=>e.type))}),{success:!0,cost:t.cost,effects:t.effects.map((e=>e.type)),upgrade:t}}applyUpgradeEffects(e){try{s.Yz(`Applying effects for upgrade ${e.id}`);for(const n of e.effects)this.applySingleEffect(n,e.id,e.name);const n=(0,c.B)();n.recalculateAllGenerators();const t=n.calculateTotalProduction();return(0,r.J)().emit(i.Gq,{totalProduction:t,source:"upgrade",upgradeId:e.id}),!0}catch(n){return s.z3(`Error applying upgrade effects for ${e.id}:`,n),!1}}applySingleEffect(e,n,t){const r=(0,o.b)().getState(),a=(0,c.B)(),i=`upgrade_${n}`;switch(e.type){case"clickMultiplier":{const t=r.resources.clickMultiplier,a=t*e.multiplier;(0,o.b)().setState({resources:{clickMultiplier:a}}),s.Yz(`Applied click multiplier from ${n}: ${t} -> ${a}, base click power = ${r.resources.baseClickPower}, result = `+r.resources.baseClickPower*a);break}case"generatorProduction":if(!e.target){s.R8(`Missing target in generatorProduction effect for ${n}`);break}if(e.target in r.generators){const n=e.target;a.applyBoostToGenerator(n,i,e.multiplier,t,!0)}else s.R8(`Target generator "${e.target}" not found for upgrade ${n}`);break;case"globalMultiplier":{const n=r.resources.productionMultiplier*e.multiplier;(0,o.b)().setState({resources:{productionMultiplier:n}});break}case"unlockSpecial":if(!e.target){s.R8(`Missing target in unlockSpecial effect for ${n}`);break}break;default:s.R8(`Unknown upgrade effect type: ${e.type}`)}}calculateTotalMultiplierForGenerator(e){let n=1;const t=this.getPurchasedUpgrades().map((e=>this.findUpgradeById(e))).filter((e=>void 0!==e));for(const o of t)for(const t of o.effects)"generatorProduction"===t.type&&t.target===e&&(n*=t.multiplier),"globalMultiplier"===t.type&&(n*=t.multiplier);return n}calculateTotalClickMultiplier(){let e=1;const n=this.getPurchasedUpgrades().map((e=>this.findUpgradeById(e))).filter((e=>void 0!==e));for(const t of n)for(const n of t.effects)"clickMultiplier"===n.type&&(e*=n.multiplier);return e}reapplyAllUpgrades(){s.Yz("Reapplying all upgrade effects");const e=(0,o.b)().getState();(0,o.b)().setState({resources:{productionMultiplier:1}});const n=(0,c.B)();Object.values(e.generators).forEach((e=>{const n=Object.assign(Object.assign({},e),{boosts:[]});(0,o.b)().setState({generators:{[e.id]:n}})}));const t=this.getPurchasedUpgrades();t.forEach((e=>{const n=this.findUpgradeById(e);n&&this.applyUpgradeEffects(n)})),n.recalculateAllGenerators(),s.Yz(`Reapplied ${t.length} upgrades`)}getUpgradeEffects(e){const n=this.findUpgradeById(e);return n?n.effects.map((e=>e.type)):null}findUpgradeById(e){return this.allUpgrades.find((n=>n.id===e))}getAvailableUpgrades(){const e=(0,o.b)().getState().upgrades.available;return this.allUpgrades.filter((n=>e.includes(n.id)))}getPurchasedUpgrades(){return(0,o.b)().getState().upgrades.purchased}isUpgradePurchased(e){return this.getPurchasedUpgrades().includes(e)}setUpgrades(e){Array.isArray(e)&&e.length>0&&(this.allUpgrades=e,s.Rm(`Updated upgrade manager with ${e.length} upgrades`))}getAllUpgrades(){return[...this.allUpgrades]}reset(){}}function A(){return l.getInstance()}},528:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Enhanced tooltip styling with improved transitions */\n.game-tooltip {\n  position: fixed; /* Fixed positioning to avoid positioning issues */\n  z-index: var(--z-index-content);\n  background-color: white;\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid var(--color-border);\n  box-shadow: var(--shadow-md);\n  padding: var(--spacing-md);\n  max-width: 300px;\n  opacity: 0;\n  transform: translateY(10px);\n  transition: opacity 0.2s ease, transform 0.2s ease;\n  pointer-events: none; /* Ensure tooltips don't interfere with mouse events */\n}\n\n.game-tooltip.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* Keep existing styles for generator elements */\n.owned-generator {\n  display: flex;\n  align-items: center;\n  padding: var(--spacing-md);\n  background-color: var(--color-surface);\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid var(--color-border);\n  box-shadow: var(--shadow-sm);\n  transition: all var(--transition-fast);\n  cursor: pointer;\n  position: relative;\n}\n\n.owned-generator:active {\n  transform: translateY(1px);\n  box-shadow: var(--shadow-sm);\n}\n\n.building-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-md);\n  background-color: var(--color-surface);\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid var(--color-border);\n  box-shadow: var(--shadow-sm);\n  transition: all var(--transition-fast);\n}\n\n.generator-left {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  flex: 1;\n}\n\n.generator-left:active {\n  opacity: 0.8;\n}\n\n/* Add subtle indication for elements that can show tooltips */\n[data-tooltip] {\n  position: relative;\n}\n\n[data-tooltip]::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  transition: box-shadow 0.2s ease;\n}","",{version:3,sources:["webpack://./styles/tooltip.css"],names:[],mappings:"AAAA,uDAAuD;AACvD;EACE,eAAe,EAAE,kDAAkD;EACnE,+BAA+B;EAC/B,uBAAuB;EACvB,sCAAsC;EACtC,qDAAqD;EACrD,4BAA4B;EAC5B,0BAA0B;EAC1B,gBAAgB;EAChB,UAAU;EACV,2BAA2B;EAC3B,kDAAkD;EAClD,oBAAoB,EAAE,sDAAsD;AAC9E;;AAEA;EACE,UAAU;EACV,wBAAwB;AAC1B;;AAEA,gDAAgD;AAChD;EACE,aAAa;EACb,mBAAmB;EACnB,0BAA0B;EAC1B,sCAAsC;EACtC,sCAAsC;EACtC,qDAAqD;EACrD,4BAA4B;EAC5B,sCAAsC;EACtC,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,0BAA0B;EAC1B,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,0BAA0B;EAC1B,sCAAsC;EACtC,sCAAsC;EACtC,qDAAqD;EACrD,4BAA4B;EAC5B,sCAAsC;AACxC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,OAAO;AACT;;AAEA;EACE,YAAY;AACd;;AAEA,8DAA8D;AAC9D;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;EACT,sBAAsB;EACtB,oBAAoB;EACpB,gCAAgC;AAClC",sourcesContent:["/* Enhanced tooltip styling with improved transitions */\n.game-tooltip {\n  position: fixed; /* Fixed positioning to avoid positioning issues */\n  z-index: var(--z-index-content);\n  background-color: white;\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid var(--color-border);\n  box-shadow: var(--shadow-md);\n  padding: var(--spacing-md);\n  max-width: 300px;\n  opacity: 0;\n  transform: translateY(10px);\n  transition: opacity 0.2s ease, transform 0.2s ease;\n  pointer-events: none; /* Ensure tooltips don't interfere with mouse events */\n}\n\n.game-tooltip.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* Keep existing styles for generator elements */\n.owned-generator {\n  display: flex;\n  align-items: center;\n  padding: var(--spacing-md);\n  background-color: var(--color-surface);\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid var(--color-border);\n  box-shadow: var(--shadow-sm);\n  transition: all var(--transition-fast);\n  cursor: pointer;\n  position: relative;\n}\n\n.owned-generator:active {\n  transform: translateY(1px);\n  box-shadow: var(--shadow-sm);\n}\n\n.building-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-md);\n  background-color: var(--color-surface);\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid var(--color-border);\n  box-shadow: var(--shadow-sm);\n  transition: all var(--transition-fast);\n}\n\n.generator-left {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  flex: 1;\n}\n\n.generator-left:active {\n  opacity: 0.8;\n}\n\n/* Add subtle indication for elements that can show tooltips */\n[data-tooltip] {\n  position: relative;\n}\n\n[data-tooltip]::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  transition: box-shadow 0.2s ease;\n}"],sourceRoot:""}]);const s=i},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},607:(e,n,t)=>{t.d(n,{HV:()=>l});var o=t(393),r=t(794),a=t(634),i=t(628),s=t(259);class c{constructor(){this.achievements=[],this.unlockedAchievements=new Set,this.achievementProgress={},this.customEvents={},this.consoleOpened=!1,this.clickCount=0,this.originalConsoleLog=null,this.isProcessingConsoleLog=!1,this.isRestoringAchievements=!1,this.achievements=[...s.aG]}static getInstance(){return c.instance||(c.instance=new c),c.instance}initialize(e=!1){i.Rm("Initializing Achievement Manager"),this.registerEventListeners(),this.loadFromState(),e?(this.isRestoringAchievements=!0,setTimeout((()=>{this.isRestoringAchievements=!1}),1e3)):this.checkAllAchievements(),i.Rm(`Achievement Manager initialized with ${this.achievements.length} achievements`)}registerEventListeners(){const e=(0,r.J)();e.on("click",(e=>{this.clickCount++,this.checkAchievementCategory(s.oB.Clicks)})),e.on("GENERATOR_PURCHASED",(e=>{this.checkAchievementCategory(s.oB.Generators)})),e.on("GENERATOR_PRODUCTION_UPDATED",(e=>{this.checkAchievementCategory(s.oB.Production)})),e.on("UPGRADE_PURCHASED",(e=>{this.checkAchievementCategory(s.oB.Special)})),e.on("GAME_TICK",(()=>{Math.random()<.1&&this.checkAllAchievements()})),this.setupConsoleDetection()}setupConsoleDetection(){window.addEventListener("keydown",(e=>{("F12"===e.key||e.ctrlKey&&e.shiftKey&&"I"===e.key)&&(this.consoleOpened=!0,this.checkConsoleAchievement())}))}checkConsoleAchievement(){if(!this.consoleOpened)return;const e=this.achievements.filter((e=>e.requirement.type===s.qG.ConsoleOpened));for(const n of e)this.unlockAchievement(n.id);!1===this.isProcessingConsoleLog&&this.originalConsoleLog&&(this.isProcessingConsoleLog=!0,this.originalConsoleLog("%c🐸 Hello Debugger! You found a secret! 🐸","font-size: 20px; color: #4CAF50;"),this.isProcessingConsoleLog=!1)}loadFromState(){const e=(0,o.b)().getState().achievements;(null==e?void 0:e.unlocked)&&(this.unlockedAchievements=new Set(e.unlocked),i.Rm(`Loaded ${this.unlockedAchievements.size} unlocked achievements`)),(null==e?void 0:e.clickCount)&&(this.clickCount=e.clickCount),(null==e?void 0:e.customEvents)&&(this.customEvents=Object.assign({},e.customEvents))}saveToState(){(0,o.b)().getState(),(0,o.b)().setState({achievements:{unlocked:Array.from(this.unlockedAchievements),progress:Object.assign({},this.achievementProgress),clickCount:this.clickCount,customEvents:Object.assign({},this.customEvents)}})}checkAllAchievements(){if(this.isRestoringAchievements)return;const e=(0,o.b)().getState(),n=(0,a.a)().getGeneratorManager().calculateTotalProduction();let t=0;const r={};Object.entries(e.generators).forEach((([e,n])=>{r[e]=n.count,t+=n.count}));const i={totalBufos:e.resources.totalBufos,bufosPerSecond:n,totalGenerators:t,generatorCounts:r,clickCount:this.clickCount,consoleOpened:this.consoleOpened,upgradesPurchased:e.upgrades.purchased.length,explorationsCompleted:e.explorer.explorationsCompleted,customEvents:this.customEvents};for(const e of this.achievements)this.unlockedAchievements.has(e.id)||(0,s.bD)(e,i)&&this.unlockAchievement(e.id)}checkAchievementCategory(e){0!==this.achievements.filter((n=>n.category===e&&!this.unlockedAchievements.has(n.id))).length&&this.checkAllAchievements()}unlockAchievement(e){if(this.unlockedAchievements.has(e))return!1;const n=this.achievements.find((n=>n.id===e));return n?(this.unlockedAchievements.add(e),this.applyAchievementReward(n),i.Rm(`Achievement unlocked: ${n.name}`),this.isRestoringAchievements||(0,r.J)().emit("ACHIEVEMENT_UNLOCKED",{achievement:n,timestamp:Date.now()}),this.saveToState(),!0):(i.R8(`Tried to unlock non-existent achievement: ${e}`),!1)}reapplyAllAchievementRewards(){const e=this.getUnlockedAchievements();for(const n of e)n.reward&&this.applyAchievementReward(n)}silentUnlockAchievement(e){const n=this.isRestoringAchievements;this.isRestoringAchievements=!0;const t=this.unlockAchievement(e);return this.isRestoringAchievements=n,t}applyAchievementReward(e){if(!e.reward)return;const n=e.reward,t=(0,a.a)(),r=(0,o.b)().getState();switch(n.type){case s.E.ProductionBoost:(0,o.b)().setState({resources:{productionMultiplier:r.resources.productionMultiplier*n.value}}),t.getGeneratorManager().recalculateAllGenerators();break;case s.E.ClickBoost:(0,o.b)().setState({resources:{clickMultiplier:r.resources.clickMultiplier*n.value}});break;case s.E.GeneratorBoost:if(!n.target)break;t.getGeneratorManager().applyBoostToGenerator(n.target,`achievement_${e.id}`,n.value,`Achievement: ${e.name}`,!0);break;case s.E.BufoBonus:{const e=n.value;(0,o.b)().setState({resources:{bufos:r.resources.bufos+e,totalBufos:r.resources.totalBufos+e}});break}}}getAllAchievements(){return[...this.achievements]}getUnlockedAchievements(){return this.achievements.filter((e=>this.unlockedAchievements.has(e.id)))}getVisibleLockedAchievements(){return this.achievements.filter((e=>!this.unlockedAchievements.has(e.id)&&!e.secret))}getAchievementProgress(e){return this.achievementProgress[e]||0}isAchievementUnlocked(e){return this.unlockedAchievements.has(e)}getTotalAchievementCount(){return this.achievements.length}getUnlockedCount(){return this.unlockedAchievements.size}getClickCount(){return this.clickCount}setClickCount(e){this.clickCount=e,this.checkAchievementCategory(s.oB.Clicks)}triggerCustomEvent(e){this.customEvents[e]=!0,this.checkAllAchievements()}getCustomEvents(){return Object.assign({},this.customEvents)}getAchievementDetails(e){return this.achievements.find((n=>n.id===e))}getAllCustomEvents(){return Object.assign({},this.customEvents)}hasCustomEventOccurred(e){return!0===this.customEvents[e]}reset(){this.unlockedAchievements.clear(),this.achievementProgress={},this.customEvents={},this.clickCount=0,this.saveToState()}}function l(){return c.getInstance()}},628:(e,n,t)=>{var o;t.d(n,{$b:()=>o,He:()=>i,Jq:()=>f,Os:()=>h,R8:()=>p,Rm:()=>m,Ti:()=>c,XM:()=>s,Yz:()=>g,lJ:()=>l,o:()=>A,z3:()=>u}),function(e){e[e.NONE=0]="NONE",e[e.ERROR=1]="ERROR",e[e.WARN=2]="WARN",e[e.INFO=3]="INFO",e[e.DEBUG=4]="DEBUG",e[e.TRACE=5]="TRACE"}(o||(o={}));const r={level:o.INFO,enableTimestamps:!0,enableConsoleColors:!0,enableGrouping:!0,context:"App"};let a=0;function i(e){r.level=e}function s(){return r.level}function c(e){r.enableTimestamps=e}function l(e){r.enableConsoleColors=e}function A(e){r.context=e}function d(e){let n="";return r.enableTimestamps&&(n+=`[${(new Date).toISOString().slice(11,23)}] `),n+=`[${r.context}] ${e}`,n}function u(e,...n){if(r.level>=o.ERROR){const t=d(e);r.enableConsoleColors?console.error(`%c${t}`,"color: #FF5252;",...n):console.error(t,...n)}}function p(e,...n){if(r.level>=o.WARN){const t=d(e);r.enableConsoleColors?console.warn(`%c${t}`,"color: #FFC107;",...n):console.warn(t,...n)}}function m(e,...n){if(r.level>=o.INFO){const t=d(e);r.enableConsoleColors?console.log(`%c${t}`,"color: #4CAF50;",...n):console.log(t,...n)}}function g(e,...n){if(r.level>=o.DEBUG){const t=d(e);r.enableConsoleColors?console.debug(`%c${t}`,"color: #2196F3;",...n):console.debug(t,...n)}}function h(e){if(r.level>=o.DEBUG&&r.enableGrouping){const n=d(e);r.enableConsoleColors?console.group(`%c${n}`,"color: #673AB7; font-weight: bold;"):console.group(n),a++}}function f(){r.level>=o.DEBUG&&r.enableGrouping&&a>0&&(console.groupEnd(),a--)}},634:(e,n,t)=>{t.d(n,{a:()=>g});var o=t(393),r=t(794),a=t(957),i=t(474),s=t(205),c=t(607),l=t(259),A=t(832),d=t(56),u=t(628),p=t(217);class m{constructor(){this.isRunning=!1,this.autoSaveEnabled=!0,this.saveIntervalId=null,this.SAVE_RATE_MS=6e4,this.clickCount=0,this.clickMultiplier=1,this.lastClickTime=0,this.clickCombo=0,this.maxCombo=0,this.generatorManager=(0,a.B)(),this.upgradeManager=(0,i.Z)(),this.explorerManager=(0,s.F)(),this.achievementManager=(0,c.HV)(),this.registerManagerEvents()}static getInstance(){return m.instance||(m.instance=new m),m.instance}init(){u.Rm("Initializing GameCore...");let e=!1;const n=(0,A.d5)();if(e=n,!n){this.resetState();const e=Date.now();(0,o.b)().setState({gameSettings:{firstStartTime:e}})}const t=(0,o.b)().getState();this.clickCount=t.resources.clickCount||0,this.autoSaveEnabled=!1!==t.gameSettings.autoSave,this.upgradeManager.initialize(),this.achievementManager.initialize(e),this.start(),this.setupAutoSave(),this.checkUnlocks(),this.getGeneratorManager().recalculateAllGenerators(),setTimeout((()=>{this.checkUnlocks(),this.getGeneratorManager().recalculateAllGenerators(),e||this.achievementManager.checkAllAchievements(),(0,r.J)().emit("refreshUI",{force:!0})}),100)}start(){this.isRunning||(this.isRunning=!0,(0,r.J)().emit(p.nJ),u.Rm("Game started"))}stop(){this.isRunning&&(this.isRunning=!1,(0,r.J)().emit(p.ux),u.Rm("Game paused"))}resetState(){var e;(null===(e=(0,o.b)().getState().gameSettings)||void 0===e?void 0:e.firstStartTime)||Date.now(),(0,o.b)().resetState(),this.generatorManager.reset(),this.upgradeManager.reset(),this.explorerManager.reset(),this.achievementManager.reset(),this.clickCount=0,this.clickMultiplier=1,this.clickCombo=0,this.maxCombo=0,(0,o.b)().setState(Object.assign(Object.assign({},d.f8),{gameSettings:Object.assign(Object.assign({},d.f8.gameSettings),{lastTick:Date.now(),lastSaved:Date.now(),firstStartTime:Date.now()})})),(0,r.J)().emit(p.LG),u.Rm("Game state reset")}registerManagerEvents(){this.registerGeneratorEvents(),this.registerExplorerEvents()}registerGeneratorEvents(){}registerExplorerEvents(){}setupAutoSave(){null!==this.saveIntervalId&&(window.clearInterval(this.saveIntervalId),this.saveIntervalId=null),this.autoSaveEnabled&&(this.saveIntervalId=window.setInterval((()=>{this.isRunning&&(0,A.KN)(!0)}),this.SAVE_RATE_MS))}toggleAutoSave(e){this.autoSaveEnabled=e,(0,o.b)().setState({gameSettings:{autoSave:e}}),this.setupAutoSave(),(0,r.J)().emit("autoSaveToggled",{enabled:e})}isAutoSaveEnabled(){return this.autoSaveEnabled}click(){const e=Date.now(),n=e-this.lastClickTime;this.lastClickTime=e,this.clickCount++,this.achievementManager.setClickCount(this.clickCount);const t=(0,o.b)().getState();(0,o.b)().setState({resources:{clickCount:(t.resources.clickCount||0)+1}});let a=1,i=!1;n<500?(this.clickCombo++,this.clickCombo>10&&(this.clickCombo=10),a=1+.05*this.clickCombo,i=!0,this.clickCombo>this.maxCombo&&(this.maxCombo=this.clickCombo)):this.clickCombo=0;const s=t.resources.clickPower*a;return(0,o.b)().setState({resources:{bufos:t.resources.bufos+s,totalBufos:t.resources.totalBufos+s}}),this.checkUnlocks(),this.achievementManager.checkAchievementCategory(l.oB.Clicks),(0,r.J)().emit("click",{state:(0,o.b)().getState(),clickPower:s,totalClicks:this.clickCount,combo:this.clickCombo,comboMultiplier:a,isCombo:i}),{bufosGained:s,isCombo:i,comboMultiplier:a}}checkUnlocks(){const e=(0,o.b)().getState(),n=this.generatorManager.checkUnlocks(e.resources.totalBufos),t={};Object.entries(e.generators).forEach((([e,n])=>{t[e]=n.count}));const a=this.upgradeManager.checkAvailableUpgrades(e,t);(n.length>0||a.length>0)&&(0,r.J)().emit("unlocksUpdated",{generators:this.generatorManager.getUnlockedGenerators(),newlyUnlocked:n,availableUpgrades:a})}processTick(e){this.isRunning&&((0,o.b)().getState(),this.processProduction(e),this.explorerManager.update(e),this.checkUnlocks(),Math.random()<.1&&this.achievementManager.checkAllAchievements(),(0,o.b)().setState({gameSettings:{lastTick:Date.now()}}),(0,r.J)().emit("tick",{state:(0,o.b)().getState(),generators:this.generatorManager.getUnlockedGenerators(),totalProduction:this.generatorManager.calculateTotalProduction(),explorer:this.explorerManager.getExplorer()}))}processProduction(e){if(e<.001)return;const n=(0,o.b)().getState(),t=this.generatorManager.calculateTotalProduction()*e;(0,o.b)().setState({resources:{bufos:n.resources.bufos+t,totalBufos:n.resources.totalBufos+t}})}destroy(){null!==this.saveIntervalId&&(window.clearInterval(this.saveIntervalId),this.saveIntervalId=null),(0,A.KN)()}getGeneratorManager(){return this.generatorManager}getUpgradeManager(){return this.upgradeManager}getExplorerManager(){return this.explorerManager}getAchievementManager(){return this.achievementManager}}function g(){return m.getInstance()}},654:(e,n,t)=>{t.d(n,{BP:()=>o,Hp:()=>u,RS:()=>c,y$:()=>l});var o,r,a=t(715),i=t(628),s=function(e,n,t,o){return new(t||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}))};!function(e){e.Click="click",e.Generator="generator",e.Global="global"}(o||(o={})),function(e){e.TotalBufos="totalBufos",e.GeneratorCount="generatorCount",e.Achievements="achievements"}(r||(r={}));let c=[];function l(){return s(this,void 0,void 0,(function*(){try{i.Yz("Loading upgrades from JSON...");const e=yield(0,a.hH)("./assets/data/upgrades.json");i.Yz(`Retrieved upgrades JSON with ${e.length} entries`);const n=[];for(const t of e)try{const e=(t.unlockConditions||[]).map((e=>({type:d(e.type),value:e.value,target:e.target}))),o=(t.effects||[]).map((e=>({type:e.type,target:e.target,multiplier:e.multiplier})));n.push(Object.assign(Object.assign({},t),{category:A(t.category),unlockConditions:e,effects:o})),i.Yz(`Processed upgrade: ${t.id}`)}catch(e){i.z3(`Error processing upgrade ${t.id||"unknown"}:`,e)}return c=n,i.Rm(`Initialized ${n.length} upgrades from JSON`),n}catch(e){return i.z3("Failed to initialize upgrades from JSON:",e),[]}}))}function A(e){switch(e.toLowerCase()){case"click":return o.Click;case"generator":return o.Generator;default:return o.Global}}function d(e){switch(e.toLowerCase()){case"totalbufos":default:return r.TotalBufos;case"generatorcount":return r.GeneratorCount;case"achievements":return r.Achievements}}function u(e,n,t,o={}){for(const a of e.unlockConditions)switch(a.type){case r.TotalBufos:if(n<a.value)return!1;break;case r.GeneratorCount:if(!a.target)return!1;if((t[a.target]||0)<a.value)return!1;break;case r.Achievements:if(!a.target)return!1;if(!o[a.target])return!1;break;default:return!1}return!0}},659:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},667:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Panel with notification indicator */\n.panel.has-notification .panel-header {\n    background: linear-gradient(to right, var(--color-accent), var(--color-accent-dark));\n  }\n  \n  /* Production Stats Styling */\n  .production-stats.panel .panel-content {\n    padding: var(--spacing-lg);\n  }\n  \n  .production-stats .stats-container {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    margin-bottom: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n  }\n  \n  .production-stats .stat-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 0;\n    border-bottom: 1px solid #f0f0f0;\n  }\n  \n  .production-stats .stat-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .stat-label {\n    font-weight: 500;\n    color: #555;\n  }\n  \n  .production-stats .stat-value {\n    font-weight: 600;\n    color: #2a9d8f;\n    text-align: right;\n  }\n  \n  .production-stats .contributions {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n  }\n  \n  .production-stats .contributions h3 {\n    font-size: 1.1rem;\n    color: #333;\n    margin-top: 0;\n    margin-bottom: var(--spacing-md);\n    padding-bottom: 8px;\n    border-bottom: 2px solid #f0f0f0;\n  }\n  \n  .production-stats .contribution-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 6px 0;\n    border-bottom: 1px dashed #eee;\n  }\n  \n  .production-stats .contribution-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .contribution-name {\n    font-weight: 500;\n  }\n  \n  .production-stats .contribution-value {\n    color: #2a9d8f;\n    font-weight: 600;\n  }\n  \n  .production-stats .empty-contributions {\n    color: #999;\n    text-align: center;\n    padding: var(--spacing-md) 0;\n    font-style: italic;\n  }\n\n  /* Panel with notification indicator */\n.panel.has-notification .panel-header {\n    background: linear-gradient(to right, var(--color-accent), var(--color-accent-dark));\n  }\n  \n  /* Production Stats Styling */\n  .production-stats.panel .panel-content {\n    padding: var(--spacing-lg);\n  }\n  \n  .production-stats .stats-container {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    margin-bottom: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n    display: none;\n  }\n  \n  .production-stats .stat-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 0;\n    border-bottom: 1px solid #f0f0f0;\n  }\n  \n  .production-stats .stat-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .stat-label {\n    font-weight: 500;\n    color: #555;\n  }\n  \n  .production-stats .stat-value {\n    font-weight: 600;\n    color: #2a9d8f;\n    text-align: right;\n  }\n  \n  .production-stats .contributions {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n  }\n  \n  .production-stats .contributions h3 {\n    font-size: 1.1rem;\n    color: #333;\n    margin-top: 0;\n    margin-bottom: var(--spacing-md);\n    padding-bottom: 8px;\n    border-bottom: 2px solid #f0f0f0;\n  }\n  \n  .production-stats .contribution-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 6px 0;\n    border-bottom: 1px dashed #eee;\n  }\n  \n  .production-stats .contribution-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .contribution-name {\n    font-weight: 500;\n  }\n  \n  .production-stats .contribution-value {\n    color: #2a9d8f;\n    font-weight: 600;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n  }\n  \n  .production-stats .contribution-percentage {\n    font-size: 0.8rem;\n    color: #666;\n    font-weight: normal;\n  }\n  \n  .production-stats .empty-contributions {\n    color: #999;\n    text-align: center;\n    padding: var(--spacing-md) 0;\n    font-style: italic;\n  }","",{version:3,sources:["webpack://./styles/productionStats.css"],names:[],mappings:"AAAA,sCAAsC;AACtC;IACI,oFAAoF;EACtF;;EAEA,6BAA6B;EAC7B;IACE,0BAA0B;EAC5B;;EAEA;IACE,yBAAyB;IACzB,sCAAsC;IACtC,0BAA0B;IAC1B,gCAAgC;IAChC,yCAAyC;IACzC,yBAAyB;EAC3B;;EAEA;IACE,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,cAAc;IACd,gCAAgC;EAClC;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;IAChB,WAAW;EACb;;EAEA;IACE,gBAAgB;IAChB,cAAc;IACd,iBAAiB;EACnB;;EAEA;IACE,yBAAyB;IACzB,sCAAsC;IACtC,0BAA0B;IAC1B,yCAAyC;IACzC,yBAAyB;EAC3B;;EAEA;IACE,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,gCAAgC;IAChC,mBAAmB;IACnB,gCAAgC;EAClC;;EAEA;IACE,aAAa;IACb,8BAA8B;IAC9B,cAAc;IACd,8BAA8B;EAChC;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;EAClB;;EAEA;IACE,cAAc;IACd,gBAAgB;EAClB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,4BAA4B;IAC5B,kBAAkB;EACpB;;EAEA,sCAAsC;AACxC;IACI,oFAAoF;EACtF;;EAEA,6BAA6B;EAC7B;IACE,0BAA0B;EAC5B;;EAEA;IACE,yBAAyB;IACzB,sCAAsC;IACtC,0BAA0B;IAC1B,gCAAgC;IAChC,yCAAyC;IACzC,yBAAyB;IACzB,aAAa;EACf;;EAEA;IACE,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,cAAc;IACd,gCAAgC;EAClC;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;IAChB,WAAW;EACb;;EAEA;IACE,gBAAgB;IAChB,cAAc;IACd,iBAAiB;EACnB;;EAEA;IACE,yBAAyB;IACzB,sCAAsC;IACtC,0BAA0B;IAC1B,yCAAyC;IACzC,yBAAyB;EAC3B;;EAEA;IACE,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,gCAAgC;IAChC,mBAAmB;IACnB,gCAAgC;EAClC;;EAEA;IACE,aAAa;IACb,8BAA8B;IAC9B,cAAc;IACd,8BAA8B;EAChC;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;EAClB;;EAEA;IACE,cAAc;IACd,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,qBAAqB;EACvB;;EAEA;IACE,iBAAiB;IACjB,WAAW;IACX,mBAAmB;EACrB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,4BAA4B;IAC5B,kBAAkB;EACpB",sourcesContent:["/* Panel with notification indicator */\n.panel.has-notification .panel-header {\n    background: linear-gradient(to right, var(--color-accent), var(--color-accent-dark));\n  }\n  \n  /* Production Stats Styling */\n  .production-stats.panel .panel-content {\n    padding: var(--spacing-lg);\n  }\n  \n  .production-stats .stats-container {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    margin-bottom: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n  }\n  \n  .production-stats .stat-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 0;\n    border-bottom: 1px solid #f0f0f0;\n  }\n  \n  .production-stats .stat-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .stat-label {\n    font-weight: 500;\n    color: #555;\n  }\n  \n  .production-stats .stat-value {\n    font-weight: 600;\n    color: #2a9d8f;\n    text-align: right;\n  }\n  \n  .production-stats .contributions {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n  }\n  \n  .production-stats .contributions h3 {\n    font-size: 1.1rem;\n    color: #333;\n    margin-top: 0;\n    margin-bottom: var(--spacing-md);\n    padding-bottom: 8px;\n    border-bottom: 2px solid #f0f0f0;\n  }\n  \n  .production-stats .contribution-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 6px 0;\n    border-bottom: 1px dashed #eee;\n  }\n  \n  .production-stats .contribution-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .contribution-name {\n    font-weight: 500;\n  }\n  \n  .production-stats .contribution-value {\n    color: #2a9d8f;\n    font-weight: 600;\n  }\n  \n  .production-stats .empty-contributions {\n    color: #999;\n    text-align: center;\n    padding: var(--spacing-md) 0;\n    font-style: italic;\n  }\n\n  /* Panel with notification indicator */\n.panel.has-notification .panel-header {\n    background: linear-gradient(to right, var(--color-accent), var(--color-accent-dark));\n  }\n  \n  /* Production Stats Styling */\n  .production-stats.panel .panel-content {\n    padding: var(--spacing-lg);\n  }\n  \n  .production-stats .stats-container {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    margin-bottom: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n    display: none;\n  }\n  \n  .production-stats .stat-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 0;\n    border-bottom: 1px solid #f0f0f0;\n  }\n  \n  .production-stats .stat-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .stat-label {\n    font-weight: 500;\n    color: #555;\n  }\n  \n  .production-stats .stat-value {\n    font-weight: 600;\n    color: #2a9d8f;\n    text-align: right;\n  }\n  \n  .production-stats .contributions {\n    background-color: #ffffff;\n    border-radius: var(--border-radius-sm);\n    padding: var(--spacing-md);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);\n    border: 1px solid #e8f0e8;\n  }\n  \n  .production-stats .contributions h3 {\n    font-size: 1.1rem;\n    color: #333;\n    margin-top: 0;\n    margin-bottom: var(--spacing-md);\n    padding-bottom: 8px;\n    border-bottom: 2px solid #f0f0f0;\n  }\n  \n  .production-stats .contribution-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 6px 0;\n    border-bottom: 1px dashed #eee;\n  }\n  \n  .production-stats .contribution-item:last-child {\n    border-bottom: none;\n  }\n  \n  .production-stats .contribution-name {\n    font-weight: 500;\n  }\n  \n  .production-stats .contribution-value {\n    color: #2a9d8f;\n    font-weight: 600;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n  }\n  \n  .production-stats .contribution-percentage {\n    font-size: 0.8rem;\n    color: #666;\n    font-weight: normal;\n  }\n  \n  .production-stats .empty-contributions {\n    color: #999;\n    text-align: center;\n    padding: var(--spacing-md) 0;\n    font-style: italic;\n  }"],sourceRoot:""}]);const s=i},672:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Animation styles */\n\n/* Smooth fade in */\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.3s ease-out forwards;\n  }\n  \n  /* Smooth fade out */\n  @keyframes fadeOut {\n    from { opacity: 1; }\n    to { opacity: 0; }\n  }\n  \n  .fade-out {\n    animation: fadeOut 0.3s ease-out forwards;\n  }\n  \n  /* Pulse animation (subtle) */\n  @keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.5); }\n    100% { transform: scale(1); }\n  }\n  \n  .pulse {\n    animation: pulse 0.3s ease-in-out;\n  }\n  \n  /* Floating number animation (for click feedback) */\n  @keyframes floatUp {\n    0% { \n      opacity: 0;\n      transform: translateY(0);\n    }\n    20% {\n      opacity: 1;\n    }\n    80% {\n      opacity: 0.8;\n    }\n    100% { \n      opacity: 0;\n      transform: translateY(-50px);\n    }\n  }\n  \n  .floating-number {\n    animation: floatUp 1.5s ease-out forwards;\n    position: absolute;\n    pointer-events: none;\n  }\n  \n  /* Click ripple effect */\n  @keyframes ripple {\n    0% { \n      transform: scale(0);\n      opacity: 0.8;\n    }\n    100% { \n      transform: scale(2.5);\n      opacity: 0;\n    }\n  }\n  \n  .click-indicator {\n    animation: ripple 0.6s ease-out forwards;\n    background-color: rgba(76, 175, 80, 0.2);\n    border-radius: 50%;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n  }\n  \n  /* Hover lift effect (subtle, replaces bounce) */\n  .hover-lift {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }","",{version:3,sources:["webpack://./styles/animations.css"],names:[],mappings:"AAAA,qBAAqB;;AAErB,mBAAmB;AACnB;IACI,OAAO,UAAU,EAAE;IACnB,KAAK,UAAU,EAAE;EACnB;;EAEA;IACE,wCAAwC;EAC1C;;EAEA,oBAAoB;EACpB;IACE,OAAO,UAAU,EAAE;IACnB,KAAK,UAAU,EAAE;EACnB;;EAEA;IACE,yCAAyC;EAC3C;;EAEA,6BAA6B;EAC7B;IACE,KAAK,mBAAmB,EAAE;IAC1B,MAAM,qBAAqB,EAAE;IAC7B,OAAO,mBAAmB,EAAE;EAC9B;;EAEA;IACE,iCAAiC;EACnC;;EAEA,mDAAmD;EACnD;IACE;MACE,UAAU;MACV,wBAAwB;IAC1B;IACA;MACE,UAAU;IACZ;IACA;MACE,YAAY;IACd;IACA;MACE,UAAU;MACV,4BAA4B;IAC9B;EACF;;EAEA;IACE,yCAAyC;IACzC,kBAAkB;IAClB,oBAAoB;EACtB;;EAEA,wBAAwB;EACxB;IACE;MACE,mBAAmB;MACnB,YAAY;IACd;IACA;MACE,qBAAqB;MACrB,UAAU;IACZ;EACF;;EAEA;IACE,wCAAwC;IACxC,wCAAwC;IACxC,kBAAkB;IAClB,kBAAkB;IAClB,gCAAgC;IAChC,oBAAoB;EACtB;;EAEA,gDAAgD;EAChD;IACE,qDAAqD;EACvD;;EAEA;IACE,2BAA2B;IAC3B,wCAAwC;EAC1C",sourcesContent:["/* Animation styles */\n\n/* Smooth fade in */\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.3s ease-out forwards;\n  }\n  \n  /* Smooth fade out */\n  @keyframes fadeOut {\n    from { opacity: 1; }\n    to { opacity: 0; }\n  }\n  \n  .fade-out {\n    animation: fadeOut 0.3s ease-out forwards;\n  }\n  \n  /* Pulse animation (subtle) */\n  @keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.5); }\n    100% { transform: scale(1); }\n  }\n  \n  .pulse {\n    animation: pulse 0.3s ease-in-out;\n  }\n  \n  /* Floating number animation (for click feedback) */\n  @keyframes floatUp {\n    0% { \n      opacity: 0;\n      transform: translateY(0);\n    }\n    20% {\n      opacity: 1;\n    }\n    80% {\n      opacity: 0.8;\n    }\n    100% { \n      opacity: 0;\n      transform: translateY(-50px);\n    }\n  }\n  \n  .floating-number {\n    animation: floatUp 1.5s ease-out forwards;\n    position: absolute;\n    pointer-events: none;\n  }\n  \n  /* Click ripple effect */\n  @keyframes ripple {\n    0% { \n      transform: scale(0);\n      opacity: 0.8;\n    }\n    100% { \n      transform: scale(2.5);\n      opacity: 0;\n    }\n  }\n  \n  .click-indicator {\n    animation: ripple 0.6s ease-out forwards;\n    background-color: rgba(76, 175, 80, 0.2);\n    border-radius: 50%;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n  }\n  \n  /* Hover lift effect (subtle, replaces bounce) */\n  .hover-lift {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }"],sourceRoot:""}]);const s=i},675:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},715:(e,n,t)=>{t.d(n,{hH:()=>a});var o=t(628),r=function(e,n,t,o){return new(t||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}))};function a(e){return r(this,void 0,void 0,(function*(){try{o.Yz(`Attempting to load data from ${e}`),Date.now();const n=e,t=new Promise(((n,t)=>{setTimeout((()=>t(new Error(`Request timeout loading ${e}`))),1e4)})),r=fetch(n),a=yield Promise.race([r,t]);if(!a.ok)throw new Error(`Failed to load data from ${e}: ${a.status} ${a.statusText}`);const i=yield a.text();o.Yz(`Received response from ${e} (${i.length} bytes)`);try{const n=JSON.parse(i);return o.Yz(`Successfully parsed JSON data from ${e}`),n}catch(n){const t=n;throw o.z3(`Error parsing JSON from ${e}:`,t),o.Yz(`First 100 chars of response: ${i.substring(0,100)}...`),new Error(`Invalid JSON in ${e}: ${t.message||"Unknown parse error"}`)}}catch(n){throw o.z3(`Error loading data from ${e}:`,n),n}}))}},794:(e,n,t)=>{t.d(n,{J:()=>a});var o=t(628);class r{constructor(){this.events=new Map,this.debugMode=!1,this.excludedEvents=new Set}static getInstance(){return r.instance||(r.instance=new r),r.instance}setDebugMode(e){this.debugMode=e}on(e,n){this.events.has(e)||this.events.set(e,[]);const t=this.events.get(e);t.includes(n)||(t.push(n),this.debugMode&&o.Yz(`EventBus: Subscribed to '${e}'`,{listenersCount:t.length}))}setExcludedEvents(e){this.excludedEvents=new Set(e)}addExcludedEvent(e){this.excludedEvents.add(e)}removeExcludedEvent(e){this.excludedEvents.delete(e)}off(e,n){if(!this.events.has(e))return;const t=this.events.get(e),r=t.indexOf(n);-1!==r&&(t.splice(r,1),this.debugMode&&o.Yz(`EventBus: Unsubscribed from '${e}'`,{listenersCount:t.length}),0===t.length&&this.events.delete(e))}emit(e,n){if(!this.events.has(e))return void(this.debugMode&&!this.excludedEvents.has(e)&&o.Yz(`EventBus: Emitted '${e}' (no listeners)`));const t=this.events.get(e);this.debugMode&&!this.excludedEvents.has(e)&&(o.Yz(`EventBus: Emitting '${e}'`,{listenersCount:t.length,payload:n}),o.Os(`EventBus: '${e}' callbacks`));for(const r of t)try{r(n)}catch(n){o.z3(`Error in '${e}' event handler:`,n)}this.debugMode&&!this.excludedEvents.has(e)&&o.Jq()}hasListeners(e){return this.events.has(e)&&this.events.get(e).length>0}getListenerCount(e){return this.events.has(e)?this.events.get(e).length:0}clearEvent(e){if(this.events.has(e)){if(this.debugMode){const n=this.events.get(e).length;o.Yz(`EventBus: Cleared all listeners for '${e}'`,{removedCount:n})}this.events.delete(e)}}clearAllEvents(){this.debugMode&&o.Yz("EventBus: Cleared all events and listeners"),this.events.clear()}getEventNames(){return Array.from(this.events.keys())}}function a(){return r.getInstance()}},823:(e,n,t)=>{e.exports=t.p+"598468252b1d79f759b1.jpg"},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},829:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* styles/achievements.css */\n\n/* Achievement container with proper overflow control */\n.achievements-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: auto;\n  padding: 0;\n}\n\n/* Progress bar styling */\n.achievement-progress-bar {\n  margin: 0 0 20px 0;\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n.achievement-progress-text {\n  font-size: 15px;\n  margin-bottom: 8px;\n  text-align: center;\n  font-weight: 500;\n  color: #333;\n}\n\n.achievement-progress-outer {\n  width: 100%;\n  height: 10px;\n  background-color: #e0e0e0;\n  border-radius: 5px;\n  overflow: hidden;\n}\n\n.achievement-progress-inner {\n  height: 100%;\n  background: linear-gradient(to right, var(--color-primary), var(--color-primary-dark));\n  transition: width 0.5s ease;\n}\n\n/* Achievement list with proper scrolling */\n.achievements-list {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 5px 10px 20px 10px;\n}\n\n/* Redesigned achievement item */\n.achievement-item {\n  display: flex;\n  padding: 18px;\n  background-color: white;\n  border-radius: 12px;\n  border: none;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: visible;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  width: 100%;\n}\n\n.achievement-item:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  z-index: 1;\n}\n\n/* Add a colored accent based on category */\n.achievement-item::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 6px;\n  border-radius: 3px 0 0 3px;\n}\n\n.achievement-item.category-clicks::before {\n  background: linear-gradient(to bottom, #2196F3, #0d47a1);\n}\n\n.achievement-item.category-generators::before {\n  background: linear-gradient(to bottom, #4CAF50, #1b5e20);\n}\n\n.achievement-item.category-production::before {\n  background: linear-gradient(to bottom, #FF9800, #e65100);\n}\n\n.achievement-item.category-special::before {\n  background: linear-gradient(to bottom, #9C27B0, #4a148c);\n}\n\n/* Enhanced icon styling */\n.achievement-icon {\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n  border-radius: 16px;\n  background-color: #f7f7f7;\n  margin-right: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  flex-shrink: 0;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n  position: relative;\n}\n\n.achievement-icon-img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.achievement-icon-emoji {\n  font-size: 36px;\n  line-height: 1;\n}\n\n/* Achievement content layout */\n.achievement-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 4px 0;\n}\n\n.achievement-name {\n  font-weight: 700;\n  font-size: 18px;\n  margin-bottom: 8px;\n  color: #333;\n  line-height: 1.2;\n}\n\n.achievement-description {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 12px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n\n/* Enhanced reward styling */\n.achievement-reward {\n  display: inline-flex;\n  align-items: center;\n  margin-top: 8px;\n  margin-bottom: 4px;\n  padding: 8px 12px;\n  background-color: rgba(76, 175, 80, 0.1);\n  border-radius: 6px;\n  font-size: 14px;\n  color: #2e7d32;\n  font-weight: 500;\n  border-left: 3px solid #4CAF50;\n  max-width: 100%;\n  word-break: break-word;\n  box-sizing: border-box;\n}\n\n/* Add icon to reward */\n.achievement-reward::before {\n  content: '🎁';\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n/* Empty state */\n.empty-achievements {\n  text-align: center;\n  padding: 60px 20px;\n  color: #888;\n  font-style: italic;\n}\n\n/* Modal styling adjustments */\n.modal-content {\n  max-width: 650px;\n  width: 95%;\n  height: auto;\n  max-height: 85vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-body {\n  padding: 20px;\n  max-height: 70vh;\n  overflow-y: auto;\n}\n\n/* Scrollbar styling for modal body */\n.modal-body::-webkit-scrollbar {\n  width: 8px;\n}\n\n.modal-body::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.modal-body::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.modal-body::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n/* Achievement notification styling - centered and more pronounced */\n.achievement-notification {\n  position: fixed;\n  top: 85%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.9);\n  background-color: white;\n  border-radius: 16px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25), 0 0 0 1000px rgba(0, 0, 0, 0);\n  padding: 24px;\n  display: flex;\n  align-items: center;\n  transition: all 0.5s cubic-bezier(0.18, 0.89, 0.32, 1.28);\n  z-index: 9999;\n  opacity: 0;\n  width: 400px;\n  max-width: 90vw;\n  pointer-events: none;\n}\n\n.achievement-notification.visible {\n  opacity: 1;\n  transform: translate(-50%, -50%) scale(1);\n  pointer-events: auto;\n}\n\n.achievement-notification-icon {\n  margin-right: 20px;\n  width: 64px;\n  height: 64px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(76, 175, 80, 0.1);\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.achievement-notification-icon img {\n  max-width: 48px;\n  max-height: 48px;\n}\n\n.achievement-notification-icon .achievement-icon-emoji {\n  font-size: 36px;\n}\n\n.achievement-notification-content {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.achievement-notification-title {\n  font-weight: bold;\n  font-size: 18px;\n  color: #4CAF50;\n  margin-bottom: 8px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n\n.achievement-notification-name {\n  font-size: 22px;\n  font-weight: 600;\n  margin-bottom: 8px;\n  color: #333;\n}\n\n.achievement-notification-description {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 10px;\n  line-height: 1.4;\n}\n\n.achievement-notification-reward {\n  padding: 6px 10px;\n  background-color: rgba(76, 175, 80, 0.1);\n  border-radius: 4px;\n  font-size: 14px;\n  color: #2e7d32;\n  font-weight: 500;\n  display: inline-block;\n  border-left: 3px solid #4CAF50;\n}\n\n/* Animation for achievement notification */\n@keyframes achievement-pulse {\n  0% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.4); }\n  70% { box-shadow: 0 0 0 15px rgba(76, 175, 80, 0); }\n  100% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0); }\n}\n\n\n/* Hide elements marked with .hidden */\n.hidden {\n  display: none !important;\n}","",{version:3,sources:["webpack://./styles/achievements.css"],names:[],mappings:"AAAA,4BAA4B;;AAE5B,uDAAuD;AACvD;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,UAAU;AACZ;;AAEA,yBAAyB;AACzB;EACE,kBAAkB;EAClB,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,yCAAyC;AAC3C;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,sFAAsF;EACtF,2BAA2B;AAC7B;;AAEA,2CAA2C;AAC3C;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,2BAA2B;AAC7B;;AAEA,gCAAgC;AAChC;EACE,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,iBAAiB;EACjB,0CAA0C;EAC1C,WAAW;AACb;;AAEA;EACE,2BAA2B;EAC3B,yCAAyC;EACzC,UAAU;AACZ;;AAEA,2CAA2C;AAC3C;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,YAAY;EACZ,UAAU;EACV,0BAA0B;AAC5B;;AAEA;EACE,wDAAwD;AAC1D;;AAEA;EACE,wDAAwD;AAC1D;;AAEA;EACE,wDAAwD;AAC1D;;AAEA;EACE,wDAAwD;AAC1D;;AAEA,0BAA0B;AAC1B;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;EAChB,cAAc;EACd,wCAAwC;EACxC,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,cAAc;AAChB;;AAEA,+BAA+B;AAC/B;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,mBAAmB;EACnB,gBAAgB;EAChB,qBAAqB;EACrB,yBAAyB;AAC3B;;AAEA,4BAA4B;AAC5B;EACE,oBAAoB;EACpB,mBAAmB;EACnB,eAAe;EACf,kBAAkB;EAClB,iBAAiB;EACjB,wCAAwC;EACxC,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,8BAA8B;EAC9B,eAAe;EACf,sBAAsB;EACtB,sBAAsB;AACxB;;AAEA,uBAAuB;AACvB;EACE,aAAa;EACb,iBAAiB;EACjB,eAAe;AACjB;;AAEA,gBAAgB;AAChB;EACE,kBAAkB;EAClB,kBAAkB;EAClB,WAAW;EACX,kBAAkB;AACpB;;AAEA,8BAA8B;AAC9B;EACE,gBAAgB;EAChB,UAAU;EACV,YAAY;EACZ,gBAAgB;EAChB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA,qCAAqC;AACrC;EACE,UAAU;AACZ;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA,oEAAoE;AACpE;EACE,eAAe;EACf,QAAQ;EACR,SAAS;EACT,2CAA2C;EAC3C,uBAAuB;EACvB,mBAAmB;EACnB,0EAA0E;EAC1E,aAAa;EACb,aAAa;EACb,mBAAmB;EACnB,yDAAyD;EACzD,aAAa;EACb,UAAU;EACV,YAAY;EACZ,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,UAAU;EACV,yCAAyC;EACzC,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,wCAAwC;EACxC,mBAAmB;EACnB,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,OAAO;AACT;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,cAAc;EACd,kBAAkB;EAClB,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,eAAe;EACf,WAAW;EACX,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,wCAAwC;EACxC,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,qBAAqB;EACrB,8BAA8B;AAChC;;AAEA,2CAA2C;AAC3C;EACE,KAAK,0CAA0C,EAAE;EACjD,MAAM,2CAA2C,EAAE;EACnD,OAAO,wCAAwC,EAAE;AACnD;;;AAGA,sCAAsC;AACtC;EACE,wBAAwB;AAC1B",sourcesContent:["/* styles/achievements.css */\n\n/* Achievement container with proper overflow control */\n.achievements-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: auto;\n  padding: 0;\n}\n\n/* Progress bar styling */\n.achievement-progress-bar {\n  margin: 0 0 20px 0;\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n\n.achievement-progress-text {\n  font-size: 15px;\n  margin-bottom: 8px;\n  text-align: center;\n  font-weight: 500;\n  color: #333;\n}\n\n.achievement-progress-outer {\n  width: 100%;\n  height: 10px;\n  background-color: #e0e0e0;\n  border-radius: 5px;\n  overflow: hidden;\n}\n\n.achievement-progress-inner {\n  height: 100%;\n  background: linear-gradient(to right, var(--color-primary), var(--color-primary-dark));\n  transition: width 0.5s ease;\n}\n\n/* Achievement list with proper scrolling */\n.achievements-list {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 5px 10px 20px 10px;\n}\n\n/* Redesigned achievement item */\n.achievement-item {\n  display: flex;\n  padding: 18px;\n  background-color: white;\n  border-radius: 12px;\n  border: none;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: visible;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  width: 100%;\n}\n\n.achievement-item:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  z-index: 1;\n}\n\n/* Add a colored accent based on category */\n.achievement-item::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 6px;\n  border-radius: 3px 0 0 3px;\n}\n\n.achievement-item.category-clicks::before {\n  background: linear-gradient(to bottom, #2196F3, #0d47a1);\n}\n\n.achievement-item.category-generators::before {\n  background: linear-gradient(to bottom, #4CAF50, #1b5e20);\n}\n\n.achievement-item.category-production::before {\n  background: linear-gradient(to bottom, #FF9800, #e65100);\n}\n\n.achievement-item.category-special::before {\n  background: linear-gradient(to bottom, #9C27B0, #4a148c);\n}\n\n/* Enhanced icon styling */\n.achievement-icon {\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n  border-radius: 16px;\n  background-color: #f7f7f7;\n  margin-right: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  flex-shrink: 0;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n  position: relative;\n}\n\n.achievement-icon-img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.achievement-icon-emoji {\n  font-size: 36px;\n  line-height: 1;\n}\n\n/* Achievement content layout */\n.achievement-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 4px 0;\n}\n\n.achievement-name {\n  font-weight: 700;\n  font-size: 18px;\n  margin-bottom: 8px;\n  color: #333;\n  line-height: 1.2;\n}\n\n.achievement-description {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 12px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n\n/* Enhanced reward styling */\n.achievement-reward {\n  display: inline-flex;\n  align-items: center;\n  margin-top: 8px;\n  margin-bottom: 4px;\n  padding: 8px 12px;\n  background-color: rgba(76, 175, 80, 0.1);\n  border-radius: 6px;\n  font-size: 14px;\n  color: #2e7d32;\n  font-weight: 500;\n  border-left: 3px solid #4CAF50;\n  max-width: 100%;\n  word-break: break-word;\n  box-sizing: border-box;\n}\n\n/* Add icon to reward */\n.achievement-reward::before {\n  content: '🎁';\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n/* Empty state */\n.empty-achievements {\n  text-align: center;\n  padding: 60px 20px;\n  color: #888;\n  font-style: italic;\n}\n\n/* Modal styling adjustments */\n.modal-content {\n  max-width: 650px;\n  width: 95%;\n  height: auto;\n  max-height: 85vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-body {\n  padding: 20px;\n  max-height: 70vh;\n  overflow-y: auto;\n}\n\n/* Scrollbar styling for modal body */\n.modal-body::-webkit-scrollbar {\n  width: 8px;\n}\n\n.modal-body::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.modal-body::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.modal-body::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n/* Achievement notification styling - centered and more pronounced */\n.achievement-notification {\n  position: fixed;\n  top: 85%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.9);\n  background-color: white;\n  border-radius: 16px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25), 0 0 0 1000px rgba(0, 0, 0, 0);\n  padding: 24px;\n  display: flex;\n  align-items: center;\n  transition: all 0.5s cubic-bezier(0.18, 0.89, 0.32, 1.28);\n  z-index: 9999;\n  opacity: 0;\n  width: 400px;\n  max-width: 90vw;\n  pointer-events: none;\n}\n\n.achievement-notification.visible {\n  opacity: 1;\n  transform: translate(-50%, -50%) scale(1);\n  pointer-events: auto;\n}\n\n.achievement-notification-icon {\n  margin-right: 20px;\n  width: 64px;\n  height: 64px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(76, 175, 80, 0.1);\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.achievement-notification-icon img {\n  max-width: 48px;\n  max-height: 48px;\n}\n\n.achievement-notification-icon .achievement-icon-emoji {\n  font-size: 36px;\n}\n\n.achievement-notification-content {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.achievement-notification-title {\n  font-weight: bold;\n  font-size: 18px;\n  color: #4CAF50;\n  margin-bottom: 8px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n}\n\n.achievement-notification-name {\n  font-size: 22px;\n  font-weight: 600;\n  margin-bottom: 8px;\n  color: #333;\n}\n\n.achievement-notification-description {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 10px;\n  line-height: 1.4;\n}\n\n.achievement-notification-reward {\n  padding: 6px 10px;\n  background-color: rgba(76, 175, 80, 0.1);\n  border-radius: 4px;\n  font-size: 14px;\n  color: #2e7d32;\n  font-weight: 500;\n  display: inline-block;\n  border-left: 3px solid #4CAF50;\n}\n\n/* Animation for achievement notification */\n@keyframes achievement-pulse {\n  0% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.4); }\n  70% { box-shadow: 0 0 0 15px rgba(76, 175, 80, 0); }\n  100% { box-shadow: 0 0 0 0 rgba(76, 175, 80, 0); }\n}\n\n\n/* Hide elements marked with .hidden */\n.hidden {\n  display: none !important;\n}"],sourceRoot:""}]);const s=i},832:(e,n,t)=>{t.d(n,{KN:()=>l,bB:()=>u,d5:()=>A,ki:()=>d});var o=t(393),r=t(794),a=t(138),i=t(634),s=t(628),c=t(217);function l(e=!1){var n;try{const t=(0,o.b)(),l=(0,a.R)(),A=(0,i.a)();t.setState({gameSettings:{lastSaved:Date.now()},resources:{clickCount:A.clickCount}});const d=t.getState(),u=A.getGeneratorManager().getAllGenerators(),p=A.getUpgradeManager().getPurchasedUpgrades(),m=A.getExplorerManager().getExplorer(),g=l.saveGame(d,u,p,m);return g?(s.Rm("Game saved "+(e?"(auto)":"(manual)")),(0,r.J)().emit(c.Dk,{timestamp:(null===(n=d.gameSettings)||void 0===n?void 0:n.lastSaved)||Date.now(),auto:e})):(s.z3("Failed to save game"),(0,r.J)().emit("saveError",{message:"Failed to save game"})),g}catch(e){return s.z3("Error saving game:",e),(0,r.J)().emit("saveError",{message:"Error saving game",error:e}),!1}}function A(){var e,n,t,l,A,d,u,p,m,g,h;try{const f=(0,a.R)().loadGame();if(!f)return!1;const C=(null===(n=null===(e=f.state)||void 0===e?void 0:e.gameSettings)||void 0===n?void 0:n.lastTick)||Date.now(),b=(0,o.b)(),E=(null===(t=f.state.achievements)||void 0===t?void 0:t.unlocked)||[],B=f.state.gameSettings||{},v={unlocked:[],progress:(null===(l=f.state.achievements)||void 0===l?void 0:l.progress)||{},clickCount:(null===(A=f.state.achievements)||void 0===A?void 0:A.clickCount)||0,customEvents:(null===(d=f.state.achievements)||void 0===d?void 0:d.customEvents)||{}},x=B.firstStartTime||Date.now(),y=(null===(u=f.state.resources)||void 0===u?void 0:u.clickCount)||(null===(p=f.state.achievements)||void 0===p?void 0:p.clickCount)||0,w={resources:{bufos:f.state.resources.bufos||0,totalBufos:f.state.resources.totalBufos||0,baseClickPower:f.state.resources.baseClickPower||1,clickPower:f.state.resources.clickPower||1,clickMultiplier:1,productionMultiplier:1,clickCount:y},generators:f.state.generators||{},explorer:f.state.explorer||{},upgrades:{purchased:(null===(m=f.state.upgrades)||void 0===m?void 0:m.purchased)||[],available:(null===(g=f.state.upgrades)||void 0===g?void 0:g.available)||[]},achievements:v,gameSettings:Object.assign(Object.assign({},B),{lastTick:Date.now(),lastSaved:B.lastSaved||Date.now(),autoSave:null===(h=B.autoSave)||void 0===h||h,version:B.version||"1.0.0",firstStartTime:x})};if(!b.loadState(w))return s.z3("Failed to load state from save data"),!1;const k=(0,i.a)();k.clickCount=y,k.getGeneratorManager().reset(),Object.values(w.generators).forEach((e=>{if(e.boosts&&e.boosts.length>0){const n=e.boosts.filter((e=>!e.id.startsWith("upgrade_")));b.setState({generators:{[e.id]:{boosts:n}}})}}));const I=k.getAchievementManager();if(I.isRestoringAchievements=!0,I.setClickCount(y),E.length>0){for(const e of E)I.silentUnlockAchievement(e);I.saveToState()}setTimeout((()=>{I.isRestoringAchievements=!1,I.reapplyAllAchievementRewards()}),500),k.checkUnlocks(),k.getGeneratorManager().recalculateAllGenerators(),k.getUpgradeManager().initialize();const S=function(e){const n=Date.now()-e;if(n<6e4)return null;const t=n/1e3,r=Math.min(t,43200),a=(0,i.a)().getGeneratorManager().calculateTotalProduction(),s=a*t,c=a*r,l=t>r;if(c>0){const e=(0,o.b)().getState();(0,o.b)().setState({resources:{bufos:e.resources.bufos+c,totalBufos:e.resources.totalBufos+c}})}return{timeAway:t,production:s,cappedProduction:c,isCapped:l}}(C);return(0,r.J)().emit(c.VO,{state:b.getState()}),S&&(0,r.J)().emit("offlineProgress",S),setTimeout((()=>{k.getGeneratorManager().recalculateAllGenerators(),k.checkUnlocks()}),100),s.Rm("Game loaded successfully"),!0}catch(e){return s.z3("Error loading game:",e),!1}}function d(){try{const e=(0,a.R)().exportSave();return s.Rm("Save data exported successfully"),e}catch(e){throw s.z3("Error exporting save:",e),(0,r.J)().emit("exportError",{message:"Error exporting save",error:e}),e}}function u(e){try{return(0,a.R)().importSave(e)?(A(),(0,r.J)().emit("saveImported"),s.Rm("Save data imported successfully"),!0):((0,r.J)().emit("importError",{message:"Invalid save data"}),s.z3("Invalid save data format"),!1)}catch(e){return s.z3("Error importing save:",e),(0,r.J)().emit("importError",{message:"Error importing save",error:e}),!1}}},889:(e,n,t)=>{t.d(n,{EF:()=>h,FA:()=>A,GD:()=>r,GE:()=>E,I2:()=>o,Ig:()=>m,i$:()=>f,kf:()=>b,mT:()=>l,rT:()=>C,vX:()=>p,wR:()=>g});var o,r,a,i=t(715),s=t(628),c=function(e,n,t,o){return new(t||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}))};!function(e){e.Tadpole="tadpole",e.Froglet="froglet",e.Bufo="bufo",e.GiantToad="giant_toad",e.PoisonDartFrog="poison_dart_frog",e.TreeFrog="tree_frog",e.BulbousFrog="bulbous_frog",e.GoldenFrog="golden_frog"}(o||(o={})),function(e){e.Basic="basic",e.Premium="premium",e.Special="special"}(r||(r={})),function(e){e.Bufos="bufos",e.Generators="generators",e.Achievement="achievement",e.Special="special"}(a||(a={}));let l={};function A(){return c(this,void 0,void 0,(function*(){try{s.Yz("Loading generators from JSON...");const e=yield(0,i.hH)("./assets/data/generators.json");s.Yz(`Retrieved generators JSON with ${Object.keys(e).length} entries`);const n={};for(const[t,o]of Object.entries(e))try{const e=(o.unlockRequirements||[]).map((e=>({type:u(e.type),value:e.value,target:e.target})));n[t]=Object.assign(Object.assign({},o),{id:t,category:d(o.category),unlockRequirements:e,boosts:o.boosts||[]}),s.Yz(`Processed generator: ${t}`)}catch(e){s.z3(`Error processing generator ${t}:`,e)}return l=n,s.Rm(`Initialized ${Object.keys(n).length} generators from JSON`),n}catch(e){return s.z3("Failed to initialize generators from JSON:",e),{}}}))}function d(e){switch(e.toLowerCase()){case"basic":default:return r.Basic;case"premium":return r.Premium;case"special":return r.Special}}function u(e){switch(e.toLowerCase()){case"bufos":default:return a.Bufos;case"generators":return a.Generators;case"achievement":return a.Achievement;case"special":return a.Special}}function p(e,n,t=[]){let o=1;for(const n of e.boosts)n.active&&(o*=n.multiplier);for(const e of t)e.active&&(o*=e.multiplier);const r=o*n,a=e.baseProduction*r,i=a*e.count,s=0===e.count?e.baseCost:Math.ceil(e.baseCost*Math.pow(e.costMultiplier,e.count));return Object.assign(Object.assign({},e),{currentProduction:a,totalProduction:i,currentCost:s})}function m(e,n,t,o={},r={}){if(e.unlocked)return e;const i=function(e,n,t,o={},r={}){if(e.unlocked)return!0;for(const i of e.unlockRequirements)switch(i.type){case a.Bufos:if(n<i.value)return!1;break;case a.Generators:if(!i.target)continue;if((t[i.target]||0)<i.value)return!1;break;case a.Achievement:if(!i.target)continue;if(!o[i.target])return!1;break;case a.Special:if(!i.target)continue;if(!r[i.target])return!1}return!0}(e,n,t,o,r);return i?Object.assign(Object.assign({},e),{unlocked:!0}):e}function g(e){return Object.values(e).reduce(((e,n)=>e+n.totalProduction),0)}function h(e,n,t=1){return 1===t?n>=e.currentCost:n>=f(e,t)}function f(e,n){if(1===n)return e.currentCost;const t=e.currentCost,o=e.costMultiplier,r=n;return Math.ceil(t*(1-Math.pow(o,r))/(1-o))}function C(e,n){if(n<e.currentCost)return 0;const t=e.costMultiplier,o=e.baseCost,r=e.count;if(1===t)return Math.floor(n/e.currentCost);const a=n*(t-1)/(o*Math.pow(t,r))+1;if(a<=0)return 0;const i=Math.floor(Math.log(a)/Math.log(t));return Math.max(0,i)}function b(e,n,t,o,r=!0){const a=e.boosts.findIndex((e=>e.id===n));if(a>=0){const n=[...e.boosts];return n[a]=Object.assign(Object.assign({},n[a]),{multiplier:t,active:r}),Object.assign(Object.assign({},e),{boosts:n})}return Object.assign(Object.assign({},e),{boosts:[...e.boosts,{id:n,multiplier:t,source:o,active:r}]})}function E(e,n,t){const o=e.boosts.findIndex((e=>e.id===n));if(o<0)return e;const r=[...e.boosts];return r[o]=Object.assign(Object.assign({},r[o]),{active:t}),Object.assign(Object.assign({},e),{boosts:r})}},899:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Panel styling for consistent sectioning */\n.panel {\n  background-color: var(--color-surface);\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid #e0e0e0;\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  transition: box-shadow 0.3s ease;\n  margin-bottom: var(--spacing-md);\n}\n.panel-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.panel:hover {\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.panel-header {\n  background: linear-gradient(to right, var(--color-primary), var(--color-primary-dark));\n  color: var(--color-text-inverse);\n  padding: var(--spacing-md) var(--spacing-lg);\n  border-bottom: var(--border-width) solid var(--color-primary-dark);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.panel-header h2 {\n  font-size: var(--font-size-lg);\n  margin: 0;\n  font-weight: 600;\n}\n\n.panel-content {\n  padding: var(--spacing-md);\n  flex: 1;\n  overflow-y: auto;\n  background-color: #fafafa;\n}\n\n/* Panel with notification indicator */\n.panel.has-notification .panel-header {\n  background: linear-gradient(to right, var(--color-accent), var(--color-accent-dark));\n}","",{version:3,sources:["webpack://./styles/panel.css"],names:[],mappings:"AAAA,4CAA4C;AAC5C;EACE,sCAAsC;EACtC,sCAAsC;EACtC,yCAAyC;EACzC,yCAAyC;EACzC,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,gCAAgC;EAChC,gCAAgC;AAClC;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;AAC7B;AACA;EACE,0CAA0C;AAC5C;;AAEA;EACE,sFAAsF;EACtF,gCAAgC;EAChC,4CAA4C;EAC5C,kEAAkE;EAClE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;EAC9B,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;EAC1B,OAAO;EACP,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA,sCAAsC;AACtC;EACE,oFAAoF;AACtF",sourcesContent:["/* Panel styling for consistent sectioning */\n.panel {\n  background-color: var(--color-surface);\n  border-radius: var(--border-radius-md);\n  border: var(--border-width) solid #e0e0e0;\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  transition: box-shadow 0.3s ease;\n  margin-bottom: var(--spacing-md);\n}\n.panel-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.panel:hover {\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.panel-header {\n  background: linear-gradient(to right, var(--color-primary), var(--color-primary-dark));\n  color: var(--color-text-inverse);\n  padding: var(--spacing-md) var(--spacing-lg);\n  border-bottom: var(--border-width) solid var(--color-primary-dark);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.panel-header h2 {\n  font-size: var(--font-size-lg);\n  margin: 0;\n  font-weight: 600;\n}\n\n.panel-content {\n  padding: var(--spacing-md);\n  flex: 1;\n  overflow-y: auto;\n  background-color: #fafafa;\n}\n\n/* Panel with notification indicator */\n.panel.has-notification .panel-header {\n  background: linear-gradient(to right, var(--color-accent), var(--color-accent-dark));\n}"],sourceRoot:""}]);const s=i},902:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,"/* Modal Styles */\n\n.modal-container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: var(--z-index-modal);\n    pointer-events: none; /* Allow clicks to pass through when no modal is active */\n  }\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s ease, visibility 0.3s ease;\n    z-index: var(--z-index-modal);\n    pointer-events: none;\n  }\n  \n  .modal.visible {\n    opacity: 1;\n    visibility: visible;\n    pointer-events: auto;\n  }\n  \n  .modal-content {\n    background-color: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n    width: 90%;\n    max-width: 600px;\n    max-height: 90vh;\n    overflow: auto;\n    transform: translateY(20px);\n    transition: transform 0.3s ease;\n    pointer-events: auto;\n  }\n  \n  .modal.visible .modal-content {\n    transform: translateY(0);\n  }\n  \n  .modal-header {\n    background: linear-gradient(to right, var(--color-primary), var(--color-primary-dark));\n    color: white;\n    padding: 15px 20px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .modal-header h2 {\n    margin: 0;\n    font-size: 1.4rem;\n    font-weight: 600;\n  }\n  \n  .modal-body {\n    padding: 20px;\n    max-height: 70vh;\n    overflow-y: auto;\n  }\n  \n  .modal-footer {\n    padding: 15px 20px;\n    border-top: 1px solid #eee;\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n  }\n  \n  .modal-button {\n    padding: 8px 16px;\n    border-radius: 4px;\n    border: none;\n    cursor: pointer;\n    font-weight: 500;\n    transition: all 0.2s ease;\n  }\n  \n  .cancel-button {\n    background-color: #f0f0f0;\n    color: #333;\n  }\n  \n  .cancel-button:hover {\n    background-color: #e0e0e0;\n  }\n  \n  .confirm-button {\n    background-color: var(--color-primary);\n    color: white;\n  }\n  \n  .confirm-button:hover {\n    background-color: var(--color-primary-dark);\n  }\n  \n  /* Specific modal styles */\n  .stats-modal-content .production-stats {\n    box-shadow: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n  }\n  \n  .stats-modal-content .panel-header {\n    display: none; /* Hide the duplicate header */\n  }","",{version:3,sources:["webpack://./styles/modal.css"],names:[],mappings:"AAAA,iBAAiB;;AAEjB;IACI,eAAe;IACf,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,6BAA6B;IAC7B,oBAAoB,EAAE,yDAAyD;EACjF;;EAEA;IACE,eAAe;IACf,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,oCAAoC;IACpC,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,UAAU;IACV,kBAAkB;IAClB,mDAAmD;IACnD,6BAA6B;IAC7B,oBAAoB;EACtB;;EAEA;IACE,UAAU;IACV,mBAAmB;IACnB,oBAAoB;EACtB;;EAEA;IACE,uBAAuB;IACvB,kBAAkB;IAClB,0CAA0C;IAC1C,UAAU;IACV,gBAAgB;IAChB,gBAAgB;IAChB,cAAc;IACd,2BAA2B;IAC3B,+BAA+B;IAC/B,oBAAoB;EACtB;;EAEA;IACE,wBAAwB;EAC1B;;EAEA;IACE,sFAAsF;IACtF,YAAY;IACZ,kBAAkB;IAClB,2BAA2B;IAC3B,4BAA4B;IAC5B,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;EACrB;;EAEA;IACE,SAAS;IACT,iBAAiB;IACjB,gBAAgB;EAClB;;EAEA;IACE,aAAa;IACb,gBAAgB;IAChB,gBAAgB;EAClB;;EAEA;IACE,kBAAkB;IAClB,0BAA0B;IAC1B,aAAa;IACb,yBAAyB;IACzB,SAAS;EACX;;EAEA;IACE,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,gBAAgB;IAChB,yBAAyB;EAC3B;;EAEA;IACE,yBAAyB;IACzB,WAAW;EACb;;EAEA;IACE,yBAAyB;EAC3B;;EAEA;IACE,sCAAsC;IACtC,YAAY;EACd;;EAEA;IACE,2CAA2C;EAC7C;;EAEA,0BAA0B;EAC1B;IACE,gBAAgB;IAChB,YAAY;IACZ,SAAS;IACT,UAAU;EACZ;;EAEA;IACE,aAAa,EAAE,8BAA8B;EAC/C",sourcesContent:["/* Modal Styles */\n\n.modal-container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: var(--z-index-modal);\n    pointer-events: none; /* Allow clicks to pass through when no modal is active */\n  }\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s ease, visibility 0.3s ease;\n    z-index: var(--z-index-modal);\n    pointer-events: none;\n  }\n  \n  .modal.visible {\n    opacity: 1;\n    visibility: visible;\n    pointer-events: auto;\n  }\n  \n  .modal-content {\n    background-color: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n    width: 90%;\n    max-width: 600px;\n    max-height: 90vh;\n    overflow: auto;\n    transform: translateY(20px);\n    transition: transform 0.3s ease;\n    pointer-events: auto;\n  }\n  \n  .modal.visible .modal-content {\n    transform: translateY(0);\n  }\n  \n  .modal-header {\n    background: linear-gradient(to right, var(--color-primary), var(--color-primary-dark));\n    color: white;\n    padding: 15px 20px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .modal-header h2 {\n    margin: 0;\n    font-size: 1.4rem;\n    font-weight: 600;\n  }\n  \n  .modal-body {\n    padding: 20px;\n    max-height: 70vh;\n    overflow-y: auto;\n  }\n  \n  .modal-footer {\n    padding: 15px 20px;\n    border-top: 1px solid #eee;\n    display: flex;\n    justify-content: flex-end;\n    gap: 10px;\n  }\n  \n  .modal-button {\n    padding: 8px 16px;\n    border-radius: 4px;\n    border: none;\n    cursor: pointer;\n    font-weight: 500;\n    transition: all 0.2s ease;\n  }\n  \n  .cancel-button {\n    background-color: #f0f0f0;\n    color: #333;\n  }\n  \n  .cancel-button:hover {\n    background-color: #e0e0e0;\n  }\n  \n  .confirm-button {\n    background-color: var(--color-primary);\n    color: white;\n  }\n  \n  .confirm-button:hover {\n    background-color: var(--color-primary-dark);\n  }\n  \n  /* Specific modal styles */\n  .stats-modal-content .production-stats {\n    box-shadow: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n  }\n  \n  .stats-modal-content .panel-header {\n    display: none; /* Hide the duplicate header */\n  }"],sourceRoot:""}]);const s=i},957:(e,n,t)=>{t.d(n,{B:()=>l});var o=t(393),r=t(794),a=t(628),i=t(889),s=t(217);class c{constructor(){}static getInstance(){return c.instance||(c.instance=new c),c.instance}recalculateGenerator(e){const n=(0,o.b)().getState(),t=n.generators[e];if(!t)return t;const r=n.resources.productionMultiplier,a=(0,i.vX)(t,r,[]);return(0,o.b)().setState({generators:{[e]:a}}),a}recalculateAllGenerators(){const e=(0,o.b)().getState();(0,o.b)().startBatch(),Object.keys(e.generators).forEach((e=>{this.recalculateGenerator(e)})),(0,o.b)().endBatch(),(0,r.J)().emit(s.Gq,{totalProduction:this.calculateTotalProduction()})}checkUnlocks(e){const n=(0,o.b)().getState(),t=[],c=Object.entries(n.generators).reduce(((e,[n,t])=>(e[n]=t.count,e)),{}),l={},A={};return(0,o.b)().startBatch(),Object.entries(n.generators).forEach((([d,u])=>{const p=n.generators[d],m=(0,i.Ig)(p,e,c,l,A);m.unlocked&&!p.unlocked?((0,o.b)().setState({generators:{[d]:m}}),t.push(m),(0,r.J)().emit(s.ST,{generator:m}),a.Yz(`Generator ${d} was unlocked`)):m.unlocked!==p.unlocked&&((0,o.b)().setState({generators:{[d]:{unlocked:m.unlocked}}}),a.Yz(`Generator ${d} unlock status updated to ${m.unlocked}`))})),(0,o.b)().endBatch(),this.recalculateAllGenerators(),t.length>0&&(0,r.J)().emit("refreshUI",{force:!0}),t}purchaseGenerator(e,n,t){const a=(0,o.b)().getState().generators[e];if(!a||!a.unlocked||!a.enabled)return{success:!1,cost:0,generator:a,productionIncrease:0};if(-1===n&&(n=(0,i.rT)(a,t))<=0)return{success:!1,cost:0,generator:a,productionIncrease:0};if(!(0,i.EF)(a,t,n))return{success:!1,cost:0,generator:a,productionIncrease:0};const c=(0,i.i$)(a,n),l=a.totalProduction,A=Object.assign(Object.assign({},a),{count:a.count+n});(0,o.b)().setState({generators:{[e]:A}});const d=this.recalculateGenerator(e),u=d.totalProduction-l,p=this.calculateTotalProduction();return(0,r.J)().emit(s.Gc,{generator:d,quantity:n,cost:c}),(0,r.J)().emit(s.Gq,{totalProduction:p}),{success:!0,cost:c,generator:d,productionIncrease:u}}getMaxAffordable(e,n){const t=(0,o.b)().getState().generators[e];return t&&t.unlocked&&t.enabled?(0,i.rT)(t,n):0}calculateTotalProduction(){const e=(0,o.b)().getState();return(0,i.wR)(e.generators)}calculateProductionForTime(e,n=1){return this.calculateTotalProduction()*e*n}getProductionStats(){const e=(0,o.b)().getState(),n=this.calculateTotalProduction(),t=Object.values(e.generators).filter((e=>e.count>0&&e.totalProduction>0)).map((e=>({id:e.id,name:e.name,production:e.totalProduction,percentage:n>0?e.totalProduction/n*100:0,count:e.count})));return{totalPerSecond:n,totalPerMinute:60*n,totalPerHour:3600*n,generatorContributions:t,activeBonusMultiplier:e.resources.productionMultiplier}}applyBoostToGenerator(e,n,t,a,c=!0){const l=(0,o.b)().getState().generators[e];if(!l)return;const A=(0,i.kf)(l,n,t,a,c);(0,o.b)().setState({generators:{[e]:A}}),this.recalculateGenerator(e),(0,r.J)().emit(s.Gq,{totalProduction:this.calculateTotalProduction()}),(0,r.J)().emit("BOOST_CHANGED",{generator:A,boostId:n,active:c})}toggleGeneratorBoost(e,n,t){const a=(0,o.b)().getState().generators[e];if(!a)return;const c=(0,i.GE)(a,n,t);(0,o.b)().setState({generators:{[e]:c}}),this.recalculateGenerator(e),(0,r.J)().emit(s.Gq,{totalProduction:this.calculateTotalProduction()}),(0,r.J)().emit("BOOST_CHANGED",{generator:c,boostId:n,active:t})}getAllGenerators(){const e=(0,o.b)().getState();return Object.values(e.generators)}getUnlockedGenerators(){const e=(0,o.b)().getState();return Object.values(e.generators).filter((e=>e.unlocked))}reset(){this.recalculateAllGenerators()}}function l(){return c.getInstance()}}},o={};function r(e){var n=o[e];if(void 0!==n)return n.exports;var a=o[e]={id:e,exports:{}};return t[e](a,a.exports,r),a.exports}r.m=t,r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((n,t)=>(r.f[t](e,n),n)),[])),r.u=e=>e+".bundle.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="bufo-clicker:",r.l=(t,o,a,i)=>{if(e[t])e[t].push(o);else{var s,c;if(void 0!==a)for(var l=document.getElementsByTagName("script"),A=0;A<l.length;A++){var d=l[A];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==n+a){s=d;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.setAttribute("data-webpack",n+a),s.src=t),e[t]=[o];var u=(n,o)=>{s.onerror=s.onload=null,clearTimeout(p);var r=e[t];if(delete e[t],s.parentNode&&s.parentNode.removeChild(s),r&&r.forEach((e=>e(o))),n)return n(o)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=u.bind(null,s.onerror),s.onload=u.bind(null,s.onload),c&&document.head.appendChild(s)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{r.b=document.baseURI||self.location.href;var e={792:0};r.f.j=(n,t)=>{var o=r.o(e,n)?e[n]:void 0;if(0!==o)if(o)t.push(o[2]);else{var a=new Promise(((t,r)=>o=e[n]=[t,r]));t.push(o[2]=a);var i=r.p+r.u(n),s=new Error;r.l(i,(t=>{if(r.o(e,n)&&(0!==(o=e[n])&&(e[n]=void 0),o)){var a=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;s.message="Loading chunk "+n+" failed.\n("+a+": "+i+")",s.name="ChunkLoadError",s.type=a,s.request=i,o[1](s)}}),"chunk-"+n,n)}};var n=(n,t)=>{var o,a,[i,s,c]=t,l=0;if(i.some((n=>0!==e[n]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);c&&c(r)}for(n&&n(t);l<i.length;l++)a=i[l],r.o(e,a)&&e[a]&&e[a][0](),e[a]=0},t=self.webpackChunkbufo_clicker=self.webpackChunkbufo_clicker||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})(),r.nc=void 0;var a=r(393),i=r(794),s=r(634),c=r(43),l=r(832),A=r(437),d=r(957),u=r(205),p=r(474),m=r(607),g=r(654),h=r(889),f=r(259),C=r(628),b=r(217);const E={generators:!1,upgrades:!1,achievements:!1,isComplete:!1};var B=function(e,n,t,o){return new(t||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}))};function v(){return B(this,arguments,void 0,(function*(e="game-container",n){try{C.He(C.$b.INFO),C.o("GameInit"),C.Rm("Starting game initialization");const t=(e,t)=>{C.Yz(`Initialization step: ${e} (${t}%)`),n&&n({step:e,progress:t})};t("Initializing core systems",10),(0,a.b)();const o=(0,i.J)();t("Loading game data",20);try{yield function(){return e=this,n=void 0,o=function*(){try{C.Rm("Loading game data...");const e=(0,h.FA)().then((e=>(E.generators=!0,C.Rm(`Loaded ${Object.keys(e).length} generators`),e))).catch((e=>{throw C.z3("Failed to load generators:",e),e})),n=(0,g.y$)().then((e=>(E.upgrades=!0,C.Rm(`Loaded ${e.length} upgrades`),e))).catch((e=>{throw C.z3("Failed to load upgrades:",e),e})),t=(0,f.$m)().then((e=>(E.achievements=!0,C.Rm(`Loaded ${e.length} upgrades`),e))).catch((e=>{throw C.z3("Failed to load achievements:",e),e}));return yield Promise.all([e,n,t]),E.isComplete=!0,C.Rm("All game data loaded successfully"),Object.assign({},E)}catch(e){return E.error=e instanceof Error?e:new Error(String(e)),C.z3("Game data loading failed:",e),Object.assign({},E)}},new((t=void 0)||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}));var e,n,t,o}();const e={generatorsLoaded:Object.keys(h.mT).length,upgradesLoaded:g.RS.length,isComplete:E.isComplete};C.Rm(`Data loaded: ${e.generatorsLoaded} generators, ${e.upgradesLoaded} upgrades`),E.generators&&E.upgrades&&E.achievements||C.R8("Some game data failed to load. Using defaults where necessary.")}catch(e){C.z3("Error loading game data from JSON:",e)}t("Initializing managers",40),function(){C.Rm("Initializing game managers");const e=(0,d.B)(),n=((0,u.F)(),(0,p.Z)());(0,m.HV)(),C.Yz(`Available generators: ${Object.keys(h.mT).length}`),C.Yz(`Available upgrades: ${g.RS.length}`),C.Yz(`Available achievements: ${f.aG.length}`),g.RS.length>0?(n.setUpgrades(g.RS),C.Rm(`Initialized upgrade manager with ${g.RS.length} upgrades`)):C.R8("No upgrades data available during manager initialization"),Object.keys(h.mT).length>0?(e.recalculateAllGenerators(),C.Rm(`Initialized generator manager with ${Object.keys(h.mT).length} generators`)):C.R8("No generators data available during manager initialization"),C.Rm("Game managers initialized successfully")}(),t("Initializing UI",60);const r=(0,A.Q)();try{r.init(e)}catch(e){C.z3("Error initializing UI",e)}t("Initializing game core",70),(0,s.a)().init(),t("Initializing game loop",80);const v=(0,c.h)();t("Loading saved game",90);const x=yield function(){return B(this,arguments,void 0,(function*(e=2){let n=0;for(;n<=e;){try{if((0,l.d5)())return C.Rm("Game save loaded successfully"),!0;n<e?(C.R8(`Failed to load save, retrying (${n+1}/${e})...`),yield new Promise((e=>setTimeout(e,500)))):C.R8("Failed to load save, reverting to default state")}catch(t){if(C.z3("Error loading save:",t),n>=e)return(0,s.a)().resetState(),!1}n++}return!1}))}();return t("Starting game systems",95),function(){const e=(0,i.J)();document.addEventListener("visibilitychange",(()=>{"hidden"===document.visibilityState?(C.Yz("Game visibility changed to hidden, pausing game"),(0,s.a)().stop(),(0,c.h)().stop()):(C.Yz("Game visibility changed to visible, resuming game"),(0,s.a)().start(),(0,c.h)().start())})),window.addEventListener("error",(n=>{e.emit("ERROR",{message:n.message,source:n.filename,lineno:n.lineno,colno:n.colno,error:n.error})})),e.on(b.VO,(e=>{(0,s.a)().checkUnlocks()}))}(),v.start(),t("Initialization complete",100),C.Rm("Game initialization complete"),o.emit(b.nJ,{timestamp:Date.now(),loadedSave:x}),!0}catch(e){return C.z3("Critical error during initialization:",e),n&&n({step:"Initialization failed",progress:0,error:e instanceof Error?e:new Error(String(e))}),!1}}))}var x=r(72),y=r.n(x),w=r(825),k=r.n(w),I=r(659),S=r.n(I),T=r(675),M=r.n(T),D=r(540),z=r.n(D),O=r(113),R=r.n(O),P=r(109),F={};F.styleTagTransform=R(),F.setAttributes=M(),F.insert=S().bind(null,"head"),F.domAPI=k(),F.insertStyleElement=z(),y()(P.A,F),P.A&&P.A.locals&&P.A.locals;(function(){return e=this,n=void 0,o=function*(){C.o("BufoIdle"),C.He(C.$b.INFO),C.Rm("Application starting");const e=function(e="game-container"){const n=document.getElementById(e);if(!n)return console.error(`Container element #${e} not found`),{update:()=>{},remove:()=>{}};const t=document.createElement("div");t.className="game-loading",t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.display="flex",t.style.flexDirection="column",t.style.alignItems="center",t.style.justifyContent="center",t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.style.color="#fff",t.style.zIndex="1000";const o=document.createElement("h2");o.textContent="Loading Bufo Idle...",o.style.marginBottom="20px";const r=document.createElement("div");r.style.width="300px",r.style.height="20px",r.style.backgroundColor="#333",r.style.borderRadius="10px",r.style.overflow="hidden";const a=document.createElement("div");a.style.width="0%",a.style.height="100%",a.style.backgroundColor="#4CAF50",a.style.transition="width 0.3s ease-out";const i=document.createElement("div");return i.style.marginTop="10px",i.style.fontSize="14px",i.style.color="#ccc",r.appendChild(a),t.appendChild(o),t.appendChild(r),t.appendChild(i),n.appendChild(t),{update:e=>{a.style.width=`${e.progress}%`,i.textContent=e.step,e.error&&(i.textContent=`Error: ${e.error.message}`,i.style.color="#FF5252")},remove:()=>{t.style.transition="opacity 0.5s ease-out",t.style.opacity="0",setTimeout((()=>{t.parentNode&&t.parentNode.removeChild(t)}),500)}}}("game-container");e.update({step:"Starting game initialization...",progress:10}),window.onerror=(e,n,t,o,r)=>(C.z3("Unhandled error:",r||e),!1);try{const n=yield v("game-container",(n=>{e.update(n),n.error&&C.z3("Initialization error:",n.error)}));if(setTimeout((()=>{e.remove()}),n?500:2e3),!n)throw new Error("Game initialization failed");C.Rm("Game successfully initialized and ready to play")}catch(n){C.z3("Critical application error:",n),e.update({step:"Fatal Error: Could not initialize the game",progress:0,error:n instanceof Error?n:new Error(String(n))})}},new((t=void 0)||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}c((o=o.apply(e,n||[])).next())}));var e,n,t,o})().catch((e=>{console.error("Fatal error in main:",e);const n=document.getElementById("game-container");n&&(n.innerHTML=`\n      <div style="color: red; padding: 20px; text-align: center;">\n        <h2>Game Failed to Start</h2>\n        <p>An unexpected error occurred: ${(null==e?void 0:e.message)||"Unknown error"}</p>\n        <p>Please try refreshing the page. If the problem persists, contact support.</p>\n      </div>\n    `)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,